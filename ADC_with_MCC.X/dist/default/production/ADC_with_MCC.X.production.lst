

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jul 08 19:27:59 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51  0000                     
    52                           ; Version 1.45
    53                           ; Generated 16/11/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F26K20 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	smallconst
    88  001000                     __psmallconst:
    89                           	opt stack 0
    90  001000  00                 	db	0
    91  001001                     _dpowers:
    92                           	opt stack 0
    93  001001  0001               	dw	1
    94  001003  0000               	dw	0
    95  001005  000A               	dw	10
    96  001007  0000               	dw	0
    97  001009  0064               	dw	100
    98  00100B  0000               	dw	0
    99  00100D  03E8               	dw	1000
   100  00100F  0000               	dw	0
   101  001011  2710               	dw	10000
   102  001013  0000               	dw	0
   103  001015  86A0               	dw	34464
   104  001017  0001               	dw	1
   105  001019  4240               	dw	16960
   106  00101B  000F               	dw	15
   107  00101D  9680               	dw	38528
   108  00101F  0098               	dw	152
   109  001021  E100               	dw	57600
   110  001023  05F5               	dw	1525
   111  001025  CA00               	dw	51712
   112  001027  3B9A               	dw	15258
   113  001029                     __end_of_dpowers:
   114                           	opt stack 0
   115  001029                     __powers_:
   116                           	opt stack 0
   117  001029  00                 	db	0
   118  00102A  80                 	db	128
   119  00102B  3F                 	db	63
   120  00102C  00                 	db	0
   121  00102D  20                 	db	32
   122  00102E  41                 	db	65
   123  00102F  00                 	db	0
   124  001030  C8                 	db	200
   125  001031  42                 	db	66
   126  001032  00                 	db	0
   127  001033  7A                 	db	122
   128  001034  44                 	db	68
   129  001035  40                 	db	64
   130  001036  1C                 	db	28
   131  001037  46                 	db	70
   132  001038  50                 	db	80
   133  001039  C3                 	db	195
   134  00103A  47                 	db	71
   135  00103B  24                 	db	36
   136  00103C  74                 	db	116
   137  00103D  49                 	db	73
   138  00103E  97                 	db	151
   139  00103F  18                 	db	24
   140  001040  4B                 	db	75
   141  001041  BC                 	db	188
   142  001042  BE                 	db	190
   143  001043  4C                 	db	76
   144  001044  6B                 	db	107
   145  001045  6E                 	db	110
   146  001046  4E                 	db	78
   147  001047  03                 	db	3
   148  001048  15                 	db	21
   149  001049  50                 	db	80
   150  00104A  79                 	db	121
   151  00104B  AD                 	db	173
   152  00104C  60                 	db	96
   153  00104D  F3                 	db	243
   154  00104E  49                 	db	73
   155  00104F  71                 	db	113
   156  001050                     __end_of__powers_:
   157                           	opt stack 0
   158  001050                     __npowers_:
   159                           	opt stack 0
   160  001050  00                 	db	0
   161  001051  80                 	db	128
   162  001052  3F                 	db	63
   163  001053  CD                 	db	205
   164  001054  CC                 	db	204
   165  001055  3D                 	db	61
   166  001056  D7                 	db	215
   167  001057  23                 	db	35
   168  001058  3C                 	db	60
   169  001059  12                 	db	18
   170  00105A  83                 	db	131
   171  00105B  3A                 	db	58
   172  00105C  B7                 	db	183
   173  00105D  D1                 	db	209
   174  00105E  38                 	db	56
   175  00105F  C6                 	db	198
   176  001060  27                 	db	39
   177  001061  37                 	db	55
   178  001062  38                 	db	56
   179  001063  86                 	db	134
   180  001064  35                 	db	53
   181  001065  C0                 	db	192
   182  001066  D6                 	db	214
   183  001067  33                 	db	51
   184  001068  CC                 	db	204
   185  001069  2B                 	db	43
   186  00106A  32                 	db	50
   187  00106B  70                 	db	112
   188  00106C  89                 	db	137
   189  00106D  30                 	db	48
   190  00106E  E7                 	db	231
   191  00106F  DB                 	db	219
   192  001070  2E                 	db	46
   193  001071  E5                 	db	229
   194  001072  3C                 	db	60
   195  001073  1E                 	db	30
   196  001074  42                 	db	66
   197  001075  A2                 	db	162
   198  001076  0D                 	db	13
   199  001077                     __end_of__npowers_:
   200                           	opt stack 0
   201  0000                     _T2CONbits	set	4042
   202  0000                     _PIR1bits	set	3998
   203  0000                     _TMR2	set	4044
   204  0000                     _PR2	set	4043
   205  0000                     _T2CON	set	4042
   206  0000                     _CCPR2H	set	4028
   207  0000                     _CCPR2L	set	4027
   208  0000                     _CCP2CON	set	4026
   209  0000                     _PORTBbits	set	3969
   210  0000                     _PORTB	set	3969
   211  0000                     _ADCON0bits	set	4034
   212  0000                     _ADRESH	set	4036
   213  0000                     _ADRESL	set	4035
   214  0000                     _ADCON2	set	4032
   215  0000                     _ADCON1	set	4033
   216  0000                     _ADCON0	set	4034
   217  0000                     _INTCONbits	set	4082
   218  0000                     _INTCON2bits	set	4081
   219  0000                     _TRISA	set	3986
   220  0000                     _WPUB	set	3964
   221  0000                     _TRISC	set	3988
   222  0000                     _TRISB	set	3987
   223  0000                     _LATC	set	3979
   224  0000                     _ANSELH	set	3967
   225  0000                     _ANSEL	set	3966
   226  0000                     _LATA	set	3977
   227  0000                     _LATB	set	3978
   228  0000                     _OSCTUNE	set	3995
   229  0000                     _OSCCON	set	4051
   230  001077                     STR_1:
   231  001077  56                 	db	86	;'V'
   232  001078  6F                 	db	111	;'o'
   233  001079  6C                 	db	108	;'l'
   234  00107A  74                 	db	116	;'t'
   235  00107B  61                 	db	97	;'a'
   236  00107C  67                 	db	103	;'g'
   237  00107D  65                 	db	101	;'e'
   238  00107E  20                 	db	32
   239  00107F  3D                 	db	61	;'='
   240  001080  20                 	db	32
   241  001081  00                 	db	0
   242  001082                     STR_2:
   243  001082  20                 	db	32
   244  001083  25                 	db	37
   245  001084  2E                 	db	46
   246  001085  33                 	db	51	;'3'
   247  001086  67                 	db	103	;'g'
   248  001087  00                 	db	0
   249                           
   250                           ; #config settings
   251  001088  00                 	db	0	; dummy byte at the end
   252  0000                     
   253                           	psect	cinit
   254  003276                     __pcinit:
   255                           	opt stack 0
   256  003276                     start_initialization:
   257                           	opt stack 0
   258  003276                     __initialization:
   259                           	opt stack 0
   260                           
   261                           ; Clear objects allocated to BANK0 (25 bytes)
   262  003276  EE00  F087         	lfsr	0,__pbssBANK0
   263  00327A  0E19               	movlw	25
   264  00327C                     clear_0:
   265  00327C  6AEE               	clrf	postinc0,c
   266  00327E  06E8               	decf	wreg,f,c
   267  003280  E1FD               	bnz	clear_0
   268  003282                     end_of_initialization:
   269                           	opt stack 0
   270  003282                     __end_of__initialization:
   271                           	opt stack 0
   272  003282  0E00               	movlw	low (__Lmediumconst shr (0+16))
   273  003284  6EF8               	movwf	tblptru,c
   274  003286  0100               	movlb	0
   275  003288  EFA8  F015         	goto	_main	;jump to C main() function
   276                           tblptru	equ	0xFF8
   277                           postinc0	equ	0xFEE
   278                           wreg	equ	0xFE8
   279                           
   280                           	psect	bssBANK0
   281  000087                     __pbssBANK0:
   282                           	opt stack 0
   283  000087                     _volt:
   284                           	opt stack 0
   285  000087                     	ds	3
   286  00008A                     _convertedValue:
   287                           	opt stack 0
   288  00008A                     	ds	2
   289  00008C                     _VOLTAGE:
   290                           	opt stack 0
   291  00008C                     	ds	20
   292                           tblptru	equ	0xFF8
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           
   296                           	psect	cstackBANK0
   297  000060                     __pcstackBANK0:
   298                           	opt stack 0
   299  000060                     ?_sprintf:
   300                           	opt stack 0
   301  000060                     sprintf@sp:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x0
   305  000060                     	ds	2
   306  000062                     sprintf@f:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x2
   310  000062                     	ds	5
   311  000067                     ??_sprintf:
   312                           
   313                           ; 1 bytes @ 0x7
   314  000067                     	ds	6
   315  00006D                     _sprintf$1163:
   316                           	opt stack 0
   317                           
   318                           ; 3 bytes @ 0xD
   319  00006D                     	ds	3
   320  000070                     sprintf@ap:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x10
   324  000070                     	ds	2
   325  000072                     sprintf@temp:
   326                           	opt stack 0
   327                           
   328                           ; 3 bytes @ 0x12
   329  000072                     	ds	3
   330  000075                     sprintf@flag:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x15
   334  000075                     	ds	2
   335  000077                     sprintf@tmpval:
   336                           	opt stack 0
   337                           
   338                           ; 4 bytes @ 0x17
   339  000077                     	ds	4
   340  00007B                     sprintf@val:
   341                           	opt stack 0
   342                           
   343                           ; 4 bytes @ 0x1B
   344  00007B                     	ds	4
   345  00007F                     sprintf@exp:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x1F
   349  00007F                     	ds	2
   350  000081                     sprintf@prec:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x21
   354  000081                     	ds	2
   355  000083                     sprintf@fval:
   356                           	opt stack 0
   357                           
   358                           ; 3 bytes @ 0x23
   359  000083                     	ds	3
   360  000086                     sprintf@c:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x26
   364  000086                     	ds	1
   365                           tblptru	equ	0xFF8
   366                           postinc0	equ	0xFEE
   367                           wreg	equ	0xFE8
   368                           
   369                           	psect	cstackCOMRAM
   370  000001                     __pcstackCOMRAM:
   371                           	opt stack 0
   372  000001                     ??_isdigit:
   373  000001                     ??_ADC_StartConversion:
   374  000001                     ?_ADC_GetConversionResult:
   375                           	opt stack 0
   376  000001                     ?___awmod:
   377                           	opt stack 0
   378  000001                     ?___ftpack:
   379                           	opt stack 0
   380  000001                     ?__tdiv_to_l_:
   381                           	opt stack 0
   382  000001                     ?__div_to_l_:
   383                           	opt stack 0
   384  000001                     ?___lldiv:
   385                           	opt stack 0
   386  000001                     ?___llmod:
   387                           	opt stack 0
   388  000001                     LCDWriteNibble@rs:
   389                           	opt stack 0
   390  000001                     PWM2_LoadDutyValue@dutyValue:
   391                           	opt stack 0
   392  000001                     ___awmod@dividend:
   393                           	opt stack 0
   394  000001                     __div_to_l_@f1:
   395                           	opt stack 0
   396  000001                     ___ftpack@arg:
   397                           	opt stack 0
   398  000001                     __tdiv_to_l_@f1:
   399                           	opt stack 0
   400  000001                     ___lldiv@dividend:
   401                           	opt stack 0
   402  000001                     ___llmod@dividend:
   403                           	opt stack 0
   404                           
   405                           ; 4 bytes @ 0x0
   406  000001                     	ds	1
   407  000002                     ADC_StartConversion@channel:
   408                           	opt stack 0
   409  000002                     LCDWriteNibble@ch:
   410                           	opt stack 0
   411  000002                     _isdigit$800:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0x1
   415  000002                     	ds	1
   416  000003                     ??_LCDPutCmd:
   417  000003                     ??_PWM2_LoadDutyValue:
   418  000003                     ??_ADC_GetConversionResult:
   419  000003                     ??_LCDPutChar:
   420  000003                     isdigit@c:
   421                           	opt stack 0
   422  000003                     ___awmod@divisor:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x2
   426  000003                     	ds	1
   427  000004                     LCDPutChar@ch:
   428                           	opt stack 0
   429  000004                     LCDPutCmd@ch:
   430                           	opt stack 0
   431  000004                     ___ftpack@exp:
   432                           	opt stack 0
   433  000004                     __div_to_l_@f2:
   434                           	opt stack 0
   435  000004                     __tdiv_to_l_@f2:
   436                           	opt stack 0
   437                           
   438                           ; 3 bytes @ 0x3
   439  000004                     	ds	1
   440  000005                     ??_LCD_Initialize:
   441  000005                     LCDGoto@ln:
   442                           	opt stack 0
   443  000005                     ___awmod@counter:
   444                           	opt stack 0
   445  000005                     ___ftpack@sign:
   446                           	opt stack 0
   447  000005                     LCDPutStr@str:
   448                           	opt stack 0
   449  000005                     ___lldiv@divisor:
   450                           	opt stack 0
   451  000005                     ___llmod@divisor:
   452                           	opt stack 0
   453                           
   454                           ; 4 bytes @ 0x4
   455  000005                     	ds	1
   456  000006                     ??_LCDGoto:
   457  000006                     ??___ftpack:
   458  000006                     ___awmod@sign:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x5
   462  000006                     	ds	1
   463  000007                     ??_LCDPutStr:
   464  000007                     ??__tdiv_to_l_:
   465  000007                     ?___awdiv:
   466                           	opt stack 0
   467  000007                     ___awdiv@dividend:
   468                           	opt stack 0
   469  000007                     __div_to_l_@quot:
   470                           	opt stack 0
   471                           
   472                           ; 4 bytes @ 0x6
   473  000007                     	ds	1
   474  000008                     _LCDGoto$428:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x7
   478  000008                     	ds	1
   479  000009                     ?___lwtoft:
   480                           	opt stack 0
   481  000009                     LCDPutStr@i:
   482                           	opt stack 0
   483  000009                     ___llmod@counter:
   484                           	opt stack 0
   485  000009                     ___awdiv@divisor:
   486                           	opt stack 0
   487  000009                     ___lwtoft@c:
   488                           	opt stack 0
   489  000009                     ___lldiv@quotient:
   490                           	opt stack 0
   491                           
   492                           ; 4 bytes @ 0x8
   493  000009                     	ds	1
   494  00000A                     LCDGoto@pos:
   495                           	opt stack 0
   496  00000A                     __tdiv_to_l_@quot:
   497                           	opt stack 0
   498                           
   499                           ; 4 bytes @ 0x9
   500  00000A                     	ds	1
   501  00000B                     ___awdiv@counter:
   502                           	opt stack 0
   503  00000B                     __div_to_l_@cntr:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0xA
   507  00000B                     	ds	1
   508  00000C                     ___awdiv@sign:
   509                           	opt stack 0
   510  00000C                     __div_to_l_@exp1:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0xB
   514  00000C                     	ds	1
   515  00000D                     ___lldiv@counter:
   516                           	opt stack 0
   517  00000D                     ___awdiv@quotient:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0xC
   521  00000D                     	ds	1
   522  00000E                     __tdiv_to_l_@cntr:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0xD
   526  00000E                     	ds	1
   527  00000F                     ?___wmul:
   528                           	opt stack 0
   529  00000F                     __tdiv_to_l_@exp1:
   530                           	opt stack 0
   531  00000F                     ___wmul@multiplier:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0xE
   535  00000F                     	ds	2
   536  000011                     ___wmul@multiplicand:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x10
   540  000011                     	ds	2
   541  000013                     ___wmul@product:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x12
   545  000013                     	ds	2
   546  000015                     ?___fttol:
   547                           	opt stack 0
   548  000015                     ___fttol@f1:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x14
   552  000015                     	ds	4
   553  000019                     ??___fttol:
   554                           
   555                           ; 1 bytes @ 0x18
   556  000019                     	ds	5
   557  00001E                     ___fttol@sign1:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x1D
   561  00001E                     	ds	1
   562  00001F                     ___fttol@lval:
   563                           	opt stack 0
   564                           
   565                           ; 4 bytes @ 0x1E
   566  00001F                     	ds	4
   567  000023                     ___fttol@exp1:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x22
   571  000023                     	ds	1
   572  000024                     ?___lltoft:
   573                           	opt stack 0
   574  000024                     ___lltoft@c:
   575                           	opt stack 0
   576                           
   577                           ; 4 bytes @ 0x23
   578  000024                     	ds	4
   579  000028                     ??___lltoft:
   580                           
   581                           ; 1 bytes @ 0x27
   582  000028                     	ds	4
   583  00002C                     ___lltoft@exp:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x2B
   587  00002C                     	ds	1
   588  00002D                     ?___ftneg:
   589                           	opt stack 0
   590  00002D                     ___ftneg@f1:
   591                           	opt stack 0
   592                           
   593                           ; 3 bytes @ 0x2C
   594  00002D                     	ds	3
   595  000030                     ?___ftmul:
   596                           	opt stack 0
   597  000030                     ___ftmul@f1:
   598                           	opt stack 0
   599                           
   600                           ; 3 bytes @ 0x2F
   601  000030                     	ds	3
   602  000033                     ___ftmul@f2:
   603                           	opt stack 0
   604                           
   605                           ; 3 bytes @ 0x32
   606  000033                     	ds	3
   607  000036                     ??___ftmul:
   608                           
   609                           ; 1 bytes @ 0x35
   610  000036                     	ds	3
   611  000039                     ___ftmul@exp:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x38
   615  000039                     	ds	1
   616  00003A                     ___ftmul@f3_as_product:
   617                           	opt stack 0
   618                           
   619                           ; 3 bytes @ 0x39
   620  00003A                     	ds	3
   621  00003D                     ___ftmul@cntr:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x3C
   625  00003D                     	ds	1
   626  00003E                     ___ftmul@sign:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x3D
   630  00003E                     	ds	1
   631  00003F                     ?_fround:
   632                           	opt stack 0
   633  00003F                     ?_scale:
   634                           	opt stack 0
   635                           
   636                           ; 3 bytes @ 0x3E
   637  00003F                     	ds	3
   638  000042                     _fround$1161:
   639                           	opt stack 0
   640  000042                     _scale$1162:
   641                           	opt stack 0
   642                           
   643                           ; 3 bytes @ 0x41
   644  000042                     	ds	3
   645  000045                     scale@scl:
   646                           	opt stack 0
   647  000045                     _fround$1160:
   648                           	opt stack 0
   649                           
   650                           ; 3 bytes @ 0x44
   651  000045                     	ds	1
   652  000046                     ?___ftdiv:
   653                           	opt stack 0
   654  000046                     ___ftdiv@f1:
   655                           	opt stack 0
   656                           
   657                           ; 3 bytes @ 0x45
   658  000046                     	ds	2
   659  000048                     fround@prec:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x47
   663  000048                     	ds	1
   664  000049                     ?___ftadd:
   665                           	opt stack 0
   666  000049                     ___ftadd@f1:
   667                           	opt stack 0
   668  000049                     ___ftdiv@f2:
   669                           	opt stack 0
   670                           
   671                           ; 3 bytes @ 0x48
   672  000049                     	ds	3
   673  00004C                     ??___ftdiv:
   674  00004C                     ___ftadd@f2:
   675                           	opt stack 0
   676                           
   677                           ; 3 bytes @ 0x4B
   678  00004C                     	ds	3
   679  00004F                     ??___ftadd:
   680  00004F                     ___ftdiv@cntr:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0x4E
   684  00004F                     	ds	1
   685  000050                     ___ftdiv@f3:
   686                           	opt stack 0
   687                           
   688                           ; 3 bytes @ 0x4F
   689  000050                     	ds	2
   690  000052                     ___ftadd@sign:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x51
   694  000052                     	ds	1
   695  000053                     ___ftadd@exp2:
   696                           	opt stack 0
   697  000053                     ___ftdiv@exp:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x52
   701  000053                     	ds	1
   702  000054                     ___ftadd@exp1:
   703                           	opt stack 0
   704  000054                     ___ftdiv@sign:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x53
   708  000054                     	ds	1
   709  000055                     ?___ftsub:
   710                           	opt stack 0
   711  000055                     ___ftge@ff1:
   712                           	opt stack 0
   713  000055                     ___ftsub@f1:
   714                           	opt stack 0
   715                           
   716                           ; 3 bytes @ 0x54
   717  000055                     	ds	3
   718  000058                     ___ftge@ff2:
   719                           	opt stack 0
   720  000058                     ___ftsub@f2:
   721                           	opt stack 0
   722                           
   723                           ; 3 bytes @ 0x57
   724  000058                     	ds	3
   725  00005B                     ??___ftge:
   726                           
   727                           ; 1 bytes @ 0x5A
   728  00005B                     	ds	3
   729  00005E                     tblptru	equ	0xFF8
   730                           postinc0	equ	0xFEE
   731                           wreg	equ	0xFE8
   732                           
   733                           ; 1 bytes @ 0x5D
   734 ;;
   735 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   736 ;;
   737 ;; *************** function _main *****************
   738 ;; Defined at:
   739 ;;		line 9 in file "main.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;		None
   742 ;; Auto vars:     Size  Location     Type
   743 ;;		None
   744 ;; Return value:  Size  Location     Type
   745 ;;                  1    wreg      void 
   746 ;; Registers used:
   747 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   757 ;;Total ram usage:        0 bytes
   758 ;; Hardware stack levels required when called:    4
   759 ;; This function calls:
   760 ;;		_ADC_GetConversionResult
   761 ;;		_ADC_IsConversionDone
   762 ;;		_ADC_StartConversion
   763 ;;		_LCDGoto
   764 ;;		_LCDPutCmd
   765 ;;		_LCDPutStr
   766 ;;		_LCD_Initialize
   767 ;;		_PWM2_LoadDutyValue
   768 ;;		_SYSTEM_Initialize
   769 ;;		___ftdiv
   770 ;;		___ftmul
   771 ;;		___lwtoft
   772 ;;		_sprintf
   773 ;; This function is called by:
   774 ;;		Startup code after reset
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778                           	psect	text0
   779  002B50                     __ptext0:
   780                           	opt stack 0
   781  002B50                     _main:
   782                           	opt stack 27
   783                           
   784                           ;main.c: 11: SYSTEM_Initialize();
   785                           
   786                           ;incstack = 0
   787  002B50  EC46  F019         	call	_SYSTEM_Initialize	;wreg free
   788                           
   789                           ;main.c: 12: LCD_Initialize();
   790  002B54  EC6F  F018         	call	_LCD_Initialize	;wreg free
   791                           
   792                           ;main.c: 13: LCDPutCmd(0x0C);
   793  002B58  0E0C               	movlw	12
   794  002B5A  EC50  F018         	call	_LCDPutCmd
   795  002B5E                     
   796                           ;main.c: 16: {
   797                           ;main.c: 17: convertedValue = 0;
   798  002B5E  0E00               	movlw	0
   799  002B60  0100               	movlb	0	; () banked
   800  002B62  6F8B               	movwf	(_convertedValue+1)& (0+255),b
   801  002B64  0E00               	movlw	0
   802  002B66  6F8A               	movwf	_convertedValue& (0+255),b
   803                           
   804                           ; BSR set to: 0
   805                           ;main.c: 18: ADC_StartConversion(channel_AN0);
   806  002B68  0E00               	movlw	0
   807  002B6A  EC2E  F019         	call	_ADC_StartConversion
   808  002B6E  EC77  F019         	call	_ADC_IsConversionDone	;wreg free
   809  002B72  0900               	iorlw	0
   810  002B74  B4D8               	btfsc	status,2,c
   811  002B76  D7FB               	goto	l111
   812                           
   813                           ;main.c: 20: convertedValue = ADC_GetConversionResult();
   814  002B78  EC66  F019         	call	_ADC_GetConversionResult	;wreg free
   815  002B7C  C001  F08A         	movff	?_ADC_GetConversionResult,_convertedValue
   816  002B80  C002  F08B         	movff	?_ADC_GetConversionResult+1,_convertedValue+1
   817                           
   818                           ;main.c: 22: volt = (convertedValue * 5.0)/1023;
   819  002B84  0E00               	movlw	0
   820  002B86  6E33               	movwf	___ftmul@f2,c
   821  002B88  0EA0               	movlw	160
   822  002B8A  6E34               	movwf	___ftmul@f2+1,c
   823  002B8C  0E40               	movlw	64
   824  002B8E  6E35               	movwf	___ftmul@f2+2,c
   825  002B90  C08A  F009         	movff	_convertedValue,___lwtoft@c
   826  002B94  C08B  F00A         	movff	_convertedValue+1,___lwtoft@c+1
   827  002B98  EC0D  F019         	call	___lwtoft	;wreg free
   828  002B9C  C009  F030         	movff	?___lwtoft,___ftmul@f1
   829  002BA0  C00A  F031         	movff	?___lwtoft+1,___ftmul@f1+1
   830  002BA4  C00B  F032         	movff	?___lwtoft+2,___ftmul@f1+2
   831  002BA8  EC41  F014         	call	___ftmul	;wreg free
   832  002BAC  C030  F046         	movff	?___ftmul,___ftdiv@f1
   833  002BB0  C031  F047         	movff	?___ftmul+1,___ftdiv@f1+1
   834  002BB4  C032  F048         	movff	?___ftmul+2,___ftdiv@f1+2
   835  002BB8  0EC0               	movlw	192
   836  002BBA  6E49               	movwf	___ftdiv@f2,c
   837  002BBC  0E7F               	movlw	127
   838  002BBE  6E4A               	movwf	___ftdiv@f2+1,c
   839  002BC0  0E44               	movlw	68
   840  002BC2  6E4B               	movwf	___ftdiv@f2+2,c
   841  002BC4  EC35  F015         	call	___ftdiv	;wreg free
   842  002BC8  C046  F087         	movff	?___ftdiv,_volt
   843  002BCC  C047  F088         	movff	?___ftdiv+1,_volt+1
   844  002BD0  C048  F089         	movff	?___ftdiv+2,_volt+2
   845                           
   846                           ;main.c: 23: LCDPutStr("Voltage = ");
   847  002BD4  0E77               	movlw	low STR_1
   848  002BD6  6E05               	movwf	LCDPutStr@str,c
   849  002BD8  0E10               	movlw	high STR_1
   850  002BDA  6E06               	movwf	LCDPutStr@str+1,c
   851  002BDC  EC35  F017         	call	_LCDPutStr	;wreg free
   852                           
   853                           ;main.c: 24: sprintf(VOLTAGE, " %.3g", volt );
   854  002BE0  0E8C               	movlw	low _VOLTAGE
   855  002BE2  0100               	movlb	0	; () banked
   856  002BE4  6F60               	movwf	sprintf@sp& (0+255),b
   857  002BE6  0E00               	movlw	high _VOLTAGE
   858  002BE8  6F61               	movwf	(sprintf@sp+1)& (0+255),b
   859  002BEA  0E82               	movlw	low STR_2
   860  002BEC  6F62               	movwf	sprintf@f& (0+255),b
   861  002BEE  0E10               	movlw	high STR_2
   862  002BF0  6F63               	movwf	(sprintf@f+1)& (0+255),b
   863  002BF2  C087  F064         	movff	_volt,?_sprintf+4
   864  002BF6  C088  F065         	movff	_volt+1,?_sprintf+5
   865  002BFA  C089  F066         	movff	_volt+2,?_sprintf+6
   866  002BFE  EC45  F008         	call	_sprintf	;wreg free
   867                           
   868                           ;main.c: 25: LCDPutStr(VOLTAGE);
   869  002C02  0E8C               	movlw	low _VOLTAGE
   870  002C04  6E05               	movwf	LCDPutStr@str,c
   871  002C06  0E00               	movlw	high _VOLTAGE
   872  002C08  6E06               	movwf	LCDPutStr@str+1,c
   873  002C0A  EC35  F017         	call	_LCDPutStr	;wreg free
   874                           
   875                           ;main.c: 26: LCDGoto(0,0);
   876  002C0E  0E00               	movlw	0
   877  002C10  6E05               	movwf	LCDGoto@ln,c
   878  002C12  0E00               	movlw	0
   879  002C14  EC0E  F018         	call	_LCDGoto
   880                           
   881                           ;main.c: 27: PWM2_LoadDutyValue(convertedValue);
   882  002C18  C08A  F001         	movff	_convertedValue,PWM2_LoadDutyValue@dutyValue
   883  002C1C  C08B  F002         	movff	_convertedValue+1,PWM2_LoadDutyValue@dutyValue+1
   884  002C20  EC8D  F018         	call	_PWM2_LoadDutyValue	;wreg free
   885  002C24  D79C               	goto	l109
   886  002C26                     __end_of_main:
   887                           	opt stack 0
   888                           tblptru	equ	0xFF8
   889                           postinc0	equ	0xFEE
   890                           wreg	equ	0xFE8
   891                           status	equ	0xFD8
   892                           
   893 ;; *************** function _sprintf *****************
   894 ;; Defined at:
   895 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
   896 ;; Parameters:    Size  Location     Type
   897 ;;  sp              2    0[BANK0 ] PTR unsigned char 
   898 ;;		 -> VOLTAGE(20), 
   899 ;;  f               2    2[BANK0 ] PTR const unsigned char 
   900 ;;		 -> STR_2(6), 
   901 ;; Auto vars:     Size  Location     Type
   902 ;;  temp            3   18[BANK0 ] PTR const unsigned char 
   903 ;;  val             4   27[BANK0 ] unsigned long 
   904 ;;  tmpval          4   23[BANK0 ] struct .
   905 ;;  fval            3   35[BANK0 ] struct .
   906 ;;  cp              3    0        PTR const unsigned char 
   907 ;;  prec            2   33[BANK0 ] int 
   908 ;;  exp             2   31[BANK0 ] int 
   909 ;;  flag            2   21[BANK0 ] unsigned short 
   910 ;;  ap              2   16[BANK0 ] PTR void [1]
   911 ;;		 -> ?_sprintf(2), 
   912 ;;  len             2    0        unsigned int 
   913 ;;  width           2    0        int 
   914 ;;  c               1   38[BANK0 ] char 
   915 ;;  d               1    0        unsigned char 
   916 ;; Return value:  Size  Location     Type
   917 ;;                  2    0[BANK0 ] int 
   918 ;; Registers used:
   919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   920 ;; Tracked objects:
   921 ;;		On entry : 0/0
   922 ;;		On exit  : 0/0
   923 ;;		Unchanged: 0/0
   924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   925 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   926 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   927 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   928 ;;      Totals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   929 ;;Total ram usage:       39 bytes
   930 ;; Hardware stack levels used:    1
   931 ;; Hardware stack levels required when called:    3
   932 ;; This function calls:
   933 ;;		___awdiv
   934 ;;		___awmod
   935 ;;		___ftadd
   936 ;;		___ftdiv
   937 ;;		___ftge
   938 ;;		___ftmul
   939 ;;		___ftneg
   940 ;;		___ftsub
   941 ;;		___fttol
   942 ;;		___lldiv
   943 ;;		___llmod
   944 ;;		___lltoft
   945 ;;		___wmul
   946 ;;		__div_to_l_
   947 ;;		__tdiv_to_l_
   948 ;;		_fround
   949 ;;		_isdigit
   950 ;;		_scale
   951 ;; This function is called by:
   952 ;;		_main
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           	psect	text1
   957  00108A                     __ptext1:
   958                           	opt stack 0
   959  00108A                     _sprintf:
   960                           	opt stack 27
   961                           
   962                           ;doprnt.c: 494: va_list ap;
   963                           ;doprnt.c: 499: signed char c;
   964                           ;doprnt.c: 501: int width;
   965                           ;doprnt.c: 504: int prec;
   966                           ;doprnt.c: 508: unsigned short flag;
   967                           ;doprnt.c: 515: char d;
   968                           ;doprnt.c: 516: double fval;
   969                           ;doprnt.c: 517: int exp;
   970                           ;doprnt.c: 523: union {
   971                           ;doprnt.c: 524: unsigned long vd;
   972                           ;doprnt.c: 525: double integ;
   973                           ;doprnt.c: 526: } tmpval;
   974                           ;doprnt.c: 528: unsigned long val;
   975                           ;doprnt.c: 529: unsigned len;
   976                           ;doprnt.c: 530: const char * cp;
   977                           ;doprnt.c: 533: *ap = __va_start();
   978                           
   979                           ;incstack = 0
   980  00108A  0E64               	movlw	low (?_sprintf+4)
   981  00108C  0100               	movlb	0	; () banked
   982  00108E  6F70               	movwf	sprintf@ap& (0+255),b
   983  001090  0E00               	movlw	high (?_sprintf+4)
   984  001092  6F71               	movwf	(sprintf@ap+1)& (0+255),b
   985                           
   986                           ;doprnt.c: 536: while(c = *f++) {
   987  001094  EFFD  F00E         	goto	l326
   988  001098                     
   989                           ; BSR set to: 0
   990                           ;doprnt.c: 538: if(c != '%')
   991                           
   992                           ; BSR set to: 0
   993  001098  0E25               	movlw	37
   994  00109A  1986               	xorwf	sprintf@c& (0+255),w,b
   995  00109C  B4D8               	btfsc	status,2,c
   996  00109E  D008               	goto	l236
   997                           
   998                           ; BSR set to: 0
   999                           ;doprnt.c: 540: {
  1000                           ;doprnt.c: 541: ((*sp++ = (c)));
  1001  0010A0  C060  FFD9         	movff	sprintf@sp,fsr2l
  1002  0010A4  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1003  0010A8  C086  FFDF         	movff	sprintf@c,indf2
  1004  0010AC  EFFB  F00E         	goto	l3141
  1005  0010B0                     l236:
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;doprnt.c: 543: }
  1009                           ;doprnt.c: 548: flag = 0;
  1010                           
  1011                           ; BSR set to: 0
  1012  0010B0  0E00               	movlw	0
  1013  0010B2  6F76               	movwf	(sprintf@flag+1)& (0+255),b
  1014  0010B4  0E00               	movlw	0
  1015  0010B6  6F75               	movwf	sprintf@flag& (0+255),b
  1016                           
  1017                           ; BSR set to: 0
  1018                           ;doprnt.c: 611: if(*f == '.') {
  1019  0010B8  C062  FFF6         	movff	sprintf@f,tblptrl
  1020  0010BC  C063  FFF7         	movff	sprintf@f+1,tblptrh
  1021  0010C0                     	if	0	;tblptru may be non-zero
  1022  0010C0                     	endif
  1023  0010C0                     	if	0	;tblptru may be non-zero
  1024  0010C0                     	endif
  1025  0010C0  0008               	tblrd		*
  1026  0010C2  50F5               	movf	tablat,w,c
  1027  0010C4  0A2E               	xorlw	46
  1028  0010C6  A4D8               	btfss	status,2,c
  1029  0010C8  D02F               	goto	l237
  1030                           
  1031                           ; BSR set to: 0
  1032                           ;doprnt.c: 612: flag |= 0x4000;
  1033  0010CA  8D76               	bsf	(sprintf@flag+1)& (0+255),6,b
  1034                           
  1035                           ;doprnt.c: 613: f++;
  1036  0010CC  4B62               	infsnz	sprintf@f& (0+255),f,b
  1037  0010CE  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  1038                           
  1039                           ; BSR set to: 0
  1040                           ;doprnt.c: 620: {
  1041                           ;doprnt.c: 621: prec = 0;
  1042  0010D0  0E00               	movlw	0
  1043  0010D2  6F82               	movwf	(sprintf@prec+1)& (0+255),b
  1044  0010D4  0E00               	movlw	0
  1045  0010D6  6F81               	movwf	sprintf@prec& (0+255),b
  1046                           
  1047                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1048  0010D8  D01C               	goto	l238
  1049  0010DA                     
  1050                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1051                           
  1052                           ; BSR set to: 0
  1053  0010DA  C081  F00F         	movff	sprintf@prec,___wmul@multiplier
  1054  0010DE  C082  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1055  0010E2  0E00               	movlw	0
  1056  0010E4  6E12               	movwf	___wmul@multiplicand+1,c
  1057  0010E6  0E0A               	movlw	10
  1058  0010E8  6E11               	movwf	___wmul@multiplicand,c
  1059  0010EA  ECE8  F018         	call	___wmul	;wreg free
  1060  0010EE  C062  FFF6         	movff	sprintf@f,tblptrl
  1061  0010F2  C063  FFF7         	movff	sprintf@f+1,tblptrh
  1062  0010F6                     	if	0	;tblptru may be non-zero
  1063  0010F6                     	endif
  1064  0010F6                     	if	0	;tblptru may be non-zero
  1065  0010F6                     	endif
  1066  0010F6  0008               	tblrd		*
  1067  0010F8  50F5               	movf	tablat,w,c
  1068  0010FA  260F               	addwf	?___wmul,f,c
  1069  0010FC  0E00               	movlw	0
  1070  0010FE  2210               	addwfc	?___wmul+1,f,c
  1071  001100  0ED0               	movlw	208
  1072  001102  240F               	addwf	?___wmul,w,c
  1073  001104  0100               	movlb	0	; () banked
  1074  001106  6F81               	movwf	sprintf@prec& (0+255),b
  1075  001108  0EFF               	movlw	255
  1076  00110A  2010               	addwfc	?___wmul+1,w,c
  1077  00110C  6F82               	movwf	(sprintf@prec+1)& (0+255),b
  1078                           
  1079                           ; BSR set to: 0
  1080  00110E  4B62               	infsnz	sprintf@f& (0+255),f,b
  1081  001110  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  1082  001112                     l238:
  1083                           
  1084                           ; BSR set to: 0
  1085                           
  1086                           ; BSR set to: 0
  1087  001112  C062  FFF6         	movff	sprintf@f,tblptrl
  1088  001116  C063  FFF7         	movff	sprintf@f+1,tblptrh
  1089  00111A                     	if	0	;tblptru may be non-zero
  1090  00111A                     	endif
  1091  00111A                     	if	0	;tblptru may be non-zero
  1092  00111A                     	endif
  1093  00111A  0008               	tblrd		*
  1094  00111C  50F5               	movf	tablat,w,c
  1095  00111E  EC1F  F019         	call	_isdigit
  1096  001122  A0D8               	btfss	status,0,c
  1097  001124  D00A               	goto	l242
  1098  001126  D7D9               	goto	l239
  1099  001128                     l237:
  1100                           
  1101                           ;doprnt.c: 626: prec = 0;
  1102  001128  0E00               	movlw	0
  1103  00112A  0100               	movlb	0	; () banked
  1104  00112C  6F82               	movwf	(sprintf@prec+1)& (0+255),b
  1105  00112E  0E00               	movlw	0
  1106  001130  6F81               	movwf	sprintf@prec& (0+255),b
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;doprnt.c: 628: flag |= 0x1000;
  1110  001132  8976               	bsf	(sprintf@flag+1)& (0+255),4,b
  1111                           
  1112                           ; BSR set to: 0
  1113                           ;doprnt.c: 630: }
  1114                           ;doprnt.c: 635: switch(c = *f++) {
  1115  001134  D002               	goto	l242
  1116  001136                     
  1117                           ; BSR set to: 0
  1118                           ;doprnt.c: 683: flag |= 0x200;
  1119                           
  1120                           ; BSR set to: 0
  1121  001136  8376               	bsf	(sprintf@flag+1)& (0+255),1,b
  1122                           
  1123                           ;doprnt.c: 684: break;
  1124  001138  D014               	goto	l246
  1125  00113A                     l242:
  1126                           
  1127                           ; BSR set to: 0
  1128  00113A  C062  FFF6         	movff	sprintf@f,tblptrl
  1129  00113E  C063  FFF7         	movff	sprintf@f+1,tblptrh
  1130  001142  0100               	movlb	0	; () banked
  1131  001144  4B62               	infsnz	sprintf@f& (0+255),f,b
  1132  001146  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  1133  001148                     	if	0	;tblptru may be non-zero
  1134  001148                     	endif
  1135  001148                     	if	0	;tblptru may be non-zero
  1136  001148                     	endif
  1137  001148  0008               	tblrd		*
  1138  00114A  CFF5 F086          	movff	tablat,sprintf@c
  1139  00114E  5186               	movf	sprintf@c& (0+255),w,b
  1140                           
  1141                           ; Switch size 1, requested type "space"
  1142                           ; Number of cases is 2, Range of values is 0 to 103
  1143                           ; switch strategies available:
  1144                           ; Name         Instructions Cycles
  1145                           ; simple_byte            7     4 (average)
  1146                           ;	Chosen strategy is simple_byte
  1147  001150  0A00               	xorlw	0	; case 0
  1148  001152  B4D8               	btfsc	status,2,c
  1149  001154  EF0A  F00F         	goto	u3300
  1150  001158  0A67               	xorlw	103	; case 103
  1151  00115A  B4D8               	btfsc	status,2,c
  1152  00115C  D7EC               	goto	l245
  1153  00115E  EFFD  F00E         	goto	l326
  1154  001162                     l246:
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;doprnt.c: 825: if(flag & (0x700)) {
  1158                           
  1159                           ; BSR set to: 0
  1160  001162  0E07               	movlw	7
  1161  001164  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  1162  001166  B4D8               	btfsc	status,2,c
  1163  001168  EFC1  F00E         	goto	l248
  1164                           
  1165                           ; BSR set to: 0
  1166                           ;doprnt.c: 827: if(flag & 0x1000)
  1167  00116C  A976               	btfss	(sprintf@flag+1)& (0+255),4,b
  1168  00116E  D004               	goto	l249
  1169                           
  1170                           ; BSR set to: 0
  1171                           ;doprnt.c: 829: prec = 6;
  1172  001170  0E00               	movlw	0
  1173  001172  6F82               	movwf	(sprintf@prec+1)& (0+255),b
  1174  001174  0E06               	movlw	6
  1175  001176  6F81               	movwf	sprintf@prec& (0+255),b
  1176  001178                     l249:
  1177                           
  1178                           ; BSR set to: 0
  1179                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1180                           
  1181                           ; BSR set to: 0
  1182  001178  C070  FFD9         	movff	sprintf@ap,fsr2l
  1183  00117C  C071  FFDA         	movff	sprintf@ap+1,fsr2h
  1184  001180  CFDE F083          	movff	postinc2,sprintf@fval
  1185  001184  CFDE F084          	movff	postinc2,sprintf@fval+1
  1186  001188  CFDD F085          	movff	postdec2,sprintf@fval+2
  1187                           
  1188                           ; BSR set to: 0
  1189  00118C  0E03               	movlw	3
  1190  00118E  2770               	addwf	sprintf@ap& (0+255),f,b
  1191  001190  0E00               	movlw	0
  1192  001192  2371               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;doprnt.c: 831: if(fval < 0.0) {
  1196  001194  AF85               	btfss	(sprintf@fval+2)& (0+255),7,b
  1197  001196  D011               	goto	l250
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;doprnt.c: 832: fval = -fval;
  1201  001198  C083  F02D         	movff	sprintf@fval,___ftneg@f1
  1202  00119C  C084  F02E         	movff	sprintf@fval+1,___ftneg@f1+1
  1203  0011A0  C085  F02F         	movff	sprintf@fval+2,___ftneg@f1+2
  1204  0011A4  ECFB  F018         	call	___ftneg	;wreg free
  1205  0011A8  C02D  F083         	movff	?___ftneg,sprintf@fval
  1206  0011AC  C02E  F084         	movff	?___ftneg+1,sprintf@fval+1
  1207  0011B0  C02F  F085         	movff	?___ftneg+2,sprintf@fval+2
  1208                           
  1209                           ;doprnt.c: 833: flag |= 0x03;
  1210  0011B4  0E03               	movlw	3
  1211  0011B6  0100               	movlb	0	; () banked
  1212  0011B8  1375               	iorwf	sprintf@flag& (0+255),f,b
  1213  0011BA                     l250:
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;doprnt.c: 834: }
  1217                           ;doprnt.c: 835: exp = 0;
  1218                           
  1219                           ; BSR set to: 0
  1220  0011BA  0E00               	movlw	0
  1221  0011BC  6F80               	movwf	(sprintf@exp+1)& (0+255),b
  1222  0011BE  0E00               	movlw	0
  1223  0011C0  6F7F               	movwf	sprintf@exp& (0+255),b
  1224                           
  1225                           ; BSR set to: 0
  1226                           ;doprnt.c: 836: if( fval!=0) {
  1227  0011C2  5183               	movf	sprintf@fval& (0+255),w,b
  1228  0011C4  1184               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1229  0011C6  1185               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1230  0011C8  B4D8               	btfsc	status,2,c
  1231  0011CA  D086               	goto	l255
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1235  0011CC  0E82               	movlw	130
  1236  0011CE  6F67               	movwf	??_sprintf& (0+255),b
  1237  0011D0  0EFF               	movlw	255
  1238  0011D2  6F68               	movwf	(??_sprintf+1)& (0+255),b
  1239  0011D4  C083  F069         	movff	sprintf@fval,??_sprintf+2
  1240  0011D8  C084  F06A         	movff	sprintf@fval+1,??_sprintf+3
  1241  0011DC  C085  F06B         	movff	sprintf@fval+2,??_sprintf+4
  1242  0011E0  C086  F06C         	movff	sprintf@fval+3,??_sprintf+5
  1243  0011E4  0E10               	movlw	16
  1244  0011E6  D005               	goto	u2790
  1245  0011E8                     u2795:
  1246  0011E8  90D8               	bcf	status,0,c
  1247  0011EA  336C               	rrcf	(??_sprintf+5)& (0+255),f,b
  1248  0011EC  336B               	rrcf	(??_sprintf+4)& (0+255),f,b
  1249  0011EE  336A               	rrcf	(??_sprintf+3)& (0+255),f,b
  1250  0011F0  3369               	rrcf	(??_sprintf+2)& (0+255),f,b
  1251  0011F2                     u2790:
  1252  0011F2  2EE8               	decfsz	wreg,f,c
  1253  0011F4  D7F9               	goto	u2795
  1254  0011F6  5169               	movf	(??_sprintf+2)& (0+255),w,b
  1255  0011F8  2567               	addwf	??_sprintf& (0+255),w,b
  1256  0011FA  6F7F               	movwf	sprintf@exp& (0+255),b
  1257  0011FC  0E00               	movlw	0
  1258  0011FE  2168               	addwfc	(??_sprintf+1)& (0+255),w,b
  1259  001200  6F80               	movwf	(sprintf@exp+1)& (0+255),b
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;doprnt.c: 838: exp--;
  1263  001202  077F               	decf	sprintf@exp& (0+255),f,b
  1264  001204  A0D8               	btfss	status,0,c
  1265  001206  0780               	decf	(sprintf@exp+1)& (0+255),f,b
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;doprnt.c: 839: exp *= 3;
  1269  001208  C07F  F00F         	movff	sprintf@exp,___wmul@multiplier
  1270  00120C  C080  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1271  001210  0E00               	movlw	0
  1272  001212  6E12               	movwf	___wmul@multiplicand+1,c
  1273  001214  0E03               	movlw	3
  1274  001216  6E11               	movwf	___wmul@multiplicand,c
  1275  001218  ECE8  F018         	call	___wmul	;wreg free
  1276  00121C  C00F  F07F         	movff	?___wmul,sprintf@exp
  1277  001220  C010  F080         	movff	?___wmul+1,sprintf@exp+1
  1278                           
  1279                           ;doprnt.c: 840: exp /= 10;
  1280  001224  C07F  F007         	movff	sprintf@exp,___awdiv@dividend
  1281  001228  C080  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1282  00122C  0E00               	movlw	0
  1283  00122E  6E0A               	movwf	___awdiv@divisor+1,c
  1284  001230  0E0A               	movlw	10
  1285  001232  6E09               	movwf	___awdiv@divisor,c
  1286  001234  ECB2  F016         	call	___awdiv	;wreg free
  1287  001238  C007  F07F         	movff	?___awdiv,sprintf@exp
  1288  00123C  C008  F080         	movff	?___awdiv+1,sprintf@exp+1
  1289                           
  1290                           ;doprnt.c: 841: if(exp < 0)
  1291  001240  0100               	movlb	0	; () banked
  1292  001242  AF80               	btfss	(sprintf@exp+1)& (0+255),7,b
  1293  001244  D003               	goto	l252
  1294                           
  1295                           ; BSR set to: 0
  1296                           ;doprnt.c: 842: exp--;
  1297  001246  077F               	decf	sprintf@exp& (0+255),f,b
  1298  001248  A0D8               	btfss	status,0,c
  1299  00124A  0780               	decf	(sprintf@exp+1)& (0+255),f,b
  1300  00124C                     l252:
  1301                           
  1302                           ; BSR set to: 0
  1303                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1304                           
  1305                           ; BSR set to: 0
  1306  00124C  517F               	movf	sprintf@exp& (0+255),w,b
  1307  00124E  0800               	sublw	0
  1308  001250  EC11  F00F         	call	_scale
  1309  001254  C03F  F077         	movff	?_scale,sprintf@tmpval
  1310  001258  C040  F078         	movff	?_scale+1,sprintf@tmpval+1
  1311  00125C  C041  F079         	movff	?_scale+2,sprintf@tmpval+2
  1312                           
  1313                           ;doprnt.c: 847: tmpval.integ *= fval;
  1314  001260  C077  F030         	movff	sprintf@tmpval,___ftmul@f1
  1315  001264  C078  F031         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1316  001268  C079  F032         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1317  00126C  C083  F033         	movff	sprintf@fval,___ftmul@f2
  1318  001270  C084  F034         	movff	sprintf@fval+1,___ftmul@f2+1
  1319  001274  C085  F035         	movff	sprintf@fval+2,___ftmul@f2+2
  1320  001278  EC41  F014         	call	___ftmul	;wreg free
  1321  00127C  C030  F077         	movff	?___ftmul,sprintf@tmpval
  1322  001280  C031  F078         	movff	?___ftmul+1,sprintf@tmpval+1
  1323  001284  C032  F079         	movff	?___ftmul+2,sprintf@tmpval+2
  1324                           
  1325                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1326  001288  C077  F055         	movff	sprintf@tmpval,___ftge@ff1
  1327  00128C  C078  F056         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1328  001290  C079  F057         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1329  001294  0E00               	movlw	0
  1330  001296  6E58               	movwf	___ftge@ff2,c
  1331  001298  0E80               	movlw	128
  1332  00129A  6E59               	movwf	___ftge@ff2+1,c
  1333  00129C  0E3F               	movlw	63
  1334  00129E  6E5A               	movwf	___ftge@ff2+2,c
  1335  0012A0  EC6A  F016         	call	___ftge	;wreg free
  1336  0012A4  B0D8               	btfsc	status,0,c
  1337  0012A6  D005               	goto	l253
  1338                           
  1339                           ;doprnt.c: 849: exp--;
  1340  0012A8  0100               	movlb	0	; () banked
  1341  0012AA  077F               	decf	sprintf@exp& (0+255),f,b
  1342  0012AC  A0D8               	btfss	status,0,c
  1343  0012AE  0780               	decf	(sprintf@exp+1)& (0+255),f,b
  1344  0012B0  D013               	goto	l255
  1345  0012B2                     l253:
  1346                           
  1347                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1348                           
  1349                           ; BSR set to: 0
  1350  0012B2  C077  F055         	movff	sprintf@tmpval,___ftge@ff1
  1351  0012B6  C078  F056         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1352  0012BA  C079  F057         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1353  0012BE  0E00               	movlw	0
  1354  0012C0  6E58               	movwf	___ftge@ff2,c
  1355  0012C2  0E20               	movlw	32
  1356  0012C4  6E59               	movwf	___ftge@ff2+1,c
  1357  0012C6  0E41               	movlw	65
  1358  0012C8  6E5A               	movwf	___ftge@ff2+2,c
  1359  0012CA  EC6A  F016         	call	___ftge	;wreg free
  1360  0012CE  A0D8               	btfss	status,0,c
  1361  0012D0  D003               	goto	l255
  1362                           
  1363                           ;doprnt.c: 851: exp++;
  1364  0012D2  0100               	movlb	0	; () banked
  1365  0012D4  4B7F               	infsnz	sprintf@exp& (0+255),f,b
  1366  0012D6  2B80               	incf	(sprintf@exp+1)& (0+255),f,b
  1367  0012D8                     l255:
  1368                           
  1369                           ;doprnt.c: 852: }
  1370                           ;doprnt.c: 854: if(exp <= 0)
  1371                           
  1372                           ; BSR set to: 0
  1373                           
  1374                           ; BSR set to: 0
  1375                           
  1376                           ; BSR set to: 0
  1377  0012D8  0100               	movlb	0	; () banked
  1378  0012DA  BF80               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1379  0012DC  D005               	goto	u2830
  1380  0012DE  5180               	movf	(sprintf@exp+1)& (0+255),w,b
  1381  0012E0  E106               	bnz	l256
  1382  0012E2  057F               	decf	sprintf@exp& (0+255),w,b
  1383  0012E4  B0D8               	btfsc	status,0,c
  1384  0012E6  D003               	goto	l256
  1385  0012E8                     u2830:
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;doprnt.c: 855: c = 1;
  1389  0012E8  0E01               	movlw	1
  1390  0012EA  6F86               	movwf	sprintf@c& (0+255),b
  1391  0012EC  D002               	goto	l257
  1392  0012EE                     l256:
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;doprnt.c: 856: else
  1396                           ;doprnt.c: 857: c = exp;
  1397  0012EE  C07F  F086         	movff	sprintf@exp,sprintf@c
  1398  0012F2                     l257:
  1399                           
  1400                           ; BSR set to: 0
  1401                           ;doprnt.c: 858: if(
  1402                           ;doprnt.c: 866: flag & 0x200 && (exp < -4 || exp >= (int)prec)
  1403                           ;doprnt.c: 868: ) {
  1404  0012F2  A376               	btfss	(sprintf@flag+1)& (0+255),1,b
  1405  0012F4  D246               	goto	l258
  1406                           
  1407                           ; BSR set to: 0
  1408  0012F6  AF80               	btfss	(sprintf@exp+1)& (0+255),7,b
  1409  0012F8  D006               	goto	u2850
  1410  0012FA  0EFC               	movlw	252
  1411  0012FC  5D7F               	subwf	sprintf@exp& (0+255),w,b
  1412  0012FE  0EFF               	movlw	255
  1413  001300  5980               	subwfb	(sprintf@exp+1)& (0+255),w,b
  1414  001302  A0D8               	btfss	status,0,c
  1415  001304  D00A               	goto	u2860
  1416  001306                     u2850:
  1417                           
  1418                           ; BSR set to: 0
  1419  001306  5181               	movf	sprintf@prec& (0+255),w,b
  1420  001308  5D7F               	subwf	sprintf@exp& (0+255),w,b
  1421  00130A  5180               	movf	(sprintf@exp+1)& (0+255),w,b
  1422  00130C  0A80               	xorlw	128
  1423  00130E  6F67               	movwf	??_sprintf& (0+255),b
  1424  001310  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  1425  001312  0A80               	xorlw	128
  1426  001314  5967               	subwfb	??_sprintf& (0+255),w,b
  1427  001316  A0D8               	btfss	status,0,c
  1428  001318  D234               	goto	l258
  1429  00131A                     u2860:
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;doprnt.c: 870: if(prec && flag & 0x200)
  1433                           
  1434                           ; BSR set to: 0
  1435  00131A  5181               	movf	sprintf@prec& (0+255),w,b
  1436  00131C  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1437  00131E  A4D8               	btfss	status,2,c
  1438                           
  1439                           ; BSR set to: 0
  1440  001320  A376               	btfss	(sprintf@flag+1)& (0+255),1,b
  1441  001322  D003               	goto	l261
  1442                           
  1443                           ; BSR set to: 0
  1444                           ;doprnt.c: 871: prec--;
  1445  001324  0781               	decf	sprintf@prec& (0+255),f,b
  1446  001326  A0D8               	btfss	status,0,c
  1447  001328  0782               	decf	(sprintf@prec+1)& (0+255),f,b
  1448  00132A                     l261:
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;doprnt.c: 873: if((unsigned)prec > (sizeof dpowers/sizeof dpowers[0]) - 2)
  1452                           
  1453                           ; BSR set to: 0
  1454  00132A  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  1455  00132C  E104               	bnz	u2890
  1456  00132E  0E09               	movlw	9
  1457  001330  5D81               	subwf	sprintf@prec& (0+255),w,b
  1458  001332  A0D8               	btfss	status,0,c
  1459  001334  D003               	goto	l262
  1460  001336                     u2890:
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;doprnt.c: 874: c = (sizeof dpowers/sizeof dpowers[0]) - 2;
  1464  001336  0E08               	movlw	8
  1465  001338  6F86               	movwf	sprintf@c& (0+255),b
  1466  00133A  D002               	goto	l263
  1467  00133C                     l262:
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;doprnt.c: 875: else
  1471                           ;doprnt.c: 876: c = prec;
  1472  00133C  C081  F086         	movff	sprintf@prec,sprintf@c
  1473  001340                     l263:
  1474                           
  1475                           ; BSR set to: 0
  1476                           ;doprnt.c: 877: if( fval!=0) {
  1477                           
  1478                           ; BSR set to: 0
  1479  001340  5183               	movf	sprintf@fval& (0+255),w,b
  1480  001342  1184               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1481  001344  1185               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1482  001346  B4D8               	btfsc	status,2,c
  1483  001348  D0E0               	goto	l268
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;doprnt.c: 878: fval /= scale(exp-c);
  1487  00134A  C083  F046         	movff	sprintf@fval,___ftdiv@f1
  1488  00134E  C084  F047         	movff	sprintf@fval+1,___ftdiv@f1+1
  1489  001352  C085  F048         	movff	sprintf@fval+2,___ftdiv@f1+2
  1490  001356  5186               	movf	sprintf@c& (0+255),w,b
  1491  001358  0800               	sublw	0
  1492  00135A  257F               	addwf	sprintf@exp& (0+255),w,b
  1493  00135C  EC11  F00F         	call	_scale
  1494  001360  C03F  F049         	movff	?_scale,___ftdiv@f2
  1495  001364  C040  F04A         	movff	?_scale+1,___ftdiv@f2+1
  1496  001368  C041  F04B         	movff	?_scale+2,___ftdiv@f2+2
  1497  00136C  EC35  F015         	call	___ftdiv	;wreg free
  1498  001370  C046  F083         	movff	?___ftdiv,sprintf@fval
  1499  001374  C047  F084         	movff	?___ftdiv+1,sprintf@fval+1
  1500  001378  C048  F085         	movff	?___ftdiv+2,sprintf@fval+2
  1501                           
  1502                           ;doprnt.c: 893: if(fval - (double)(unsigned long)fval >= 0.5)
  1503  00137C  C083  F04C         	movff	sprintf@fval,___ftadd@f2
  1504  001380  C084  F04D         	movff	sprintf@fval+1,___ftadd@f2+1
  1505  001384  C085  F04E         	movff	sprintf@fval+2,___ftadd@f2+2
  1506  001388  C083  F015         	movff	sprintf@fval,___fttol@f1
  1507  00138C  C084  F016         	movff	sprintf@fval+1,___fttol@f1+1
  1508  001390  C085  F017         	movff	sprintf@fval+2,___fttol@f1+2
  1509  001394  ECBB  F014         	call	___fttol	;wreg free
  1510  001398  C015  F024         	movff	?___fttol,___lltoft@c
  1511  00139C  C016  F025         	movff	?___fttol+1,___lltoft@c+1
  1512  0013A0  C017  F026         	movff	?___fttol+2,___lltoft@c+2
  1513  0013A4  C018  F027         	movff	?___fttol+3,___lltoft@c+3
  1514  0013A8  ECE0  F017         	call	___lltoft	;wreg free
  1515  0013AC  C024  F02D         	movff	?___lltoft,___ftneg@f1
  1516  0013B0  C025  F02E         	movff	?___lltoft+1,___ftneg@f1+1
  1517  0013B4  C026  F02F         	movff	?___lltoft+2,___ftneg@f1+2
  1518  0013B8  ECFB  F018         	call	___ftneg	;wreg free
  1519  0013BC  C02D  F049         	movff	?___ftneg,___ftadd@f1
  1520  0013C0  C02E  F04A         	movff	?___ftneg+1,___ftadd@f1+1
  1521  0013C4  C02F  F04B         	movff	?___ftneg+2,___ftadd@f1+2
  1522  0013C8  EC3E  F012         	call	___ftadd	;wreg free
  1523  0013CC  C049  F055         	movff	?___ftadd,___ftge@ff1
  1524  0013D0  C04A  F056         	movff	?___ftadd+1,___ftge@ff1+1
  1525  0013D4  C04B  F057         	movff	?___ftadd+2,___ftge@ff1+2
  1526  0013D8  0E00               	movlw	0
  1527  0013DA  6E58               	movwf	___ftge@ff2,c
  1528  0013DC  0E00               	movlw	0
  1529  0013DE  6E59               	movwf	___ftge@ff2+1,c
  1530  0013E0  0E3F               	movlw	63
  1531  0013E2  6E5A               	movwf	___ftge@ff2+2,c
  1532  0013E4  EC6A  F016         	call	___ftge	;wreg free
  1533  0013E8  A0D8               	btfss	status,0,c
  1534  0013EA  D014               	goto	l265
  1535                           
  1536                           ;doprnt.c: 894: fval += 0.5;
  1537  0013EC  C083  F049         	movff	sprintf@fval,___ftadd@f1
  1538  0013F0  C084  F04A         	movff	sprintf@fval+1,___ftadd@f1+1
  1539  0013F4  C085  F04B         	movff	sprintf@fval+2,___ftadd@f1+2
  1540  0013F8  0E00               	movlw	0
  1541  0013FA  6E4C               	movwf	___ftadd@f2,c
  1542  0013FC  0E00               	movlw	0
  1543  0013FE  6E4D               	movwf	___ftadd@f2+1,c
  1544  001400  0E3F               	movlw	63
  1545  001402  6E4E               	movwf	___ftadd@f2+2,c
  1546  001404  EC3E  F012         	call	___ftadd	;wreg free
  1547  001408  C049  F083         	movff	?___ftadd,sprintf@fval
  1548  00140C  C04A  F084         	movff	?___ftadd+1,sprintf@fval+1
  1549  001410  C04B  F085         	movff	?___ftadd+2,sprintf@fval+2
  1550  001414                     l265:
  1551                           
  1552                           ;doprnt.c: 895: if((unsigned long)fval >= dpowers[c+1]) {
  1553  001414  C086  F067         	movff	sprintf@c,??_sprintf
  1554  001418  0100               	movlb	0	; () banked
  1555  00141A  6B68               	clrf	(??_sprintf+1)& (0+255),b
  1556  00141C  BF67               	btfsc	??_sprintf& (0+255),7,b
  1557  00141E  0768               	decf	(??_sprintf+1)& (0+255),f,b
  1558  001420  90D8               	bcf	status,0,c
  1559  001422  3767               	rlcf	??_sprintf& (0+255),f,b
  1560  001424  3768               	rlcf	(??_sprintf+1)& (0+255),f,b
  1561  001426  90D8               	bcf	status,0,c
  1562  001428  3767               	rlcf	??_sprintf& (0+255),f,b
  1563  00142A  3768               	rlcf	(??_sprintf+1)& (0+255),f,b
  1564  00142C  0E04               	movlw	4
  1565  00142E  2767               	addwf	??_sprintf& (0+255),f,b
  1566  001430  0E00               	movlw	0
  1567  001432  2368               	addwfc	(??_sprintf+1)& (0+255),f,b
  1568  001434  0E01               	movlw	low _dpowers
  1569  001436  2567               	addwf	??_sprintf& (0+255),w,b
  1570  001438  6EF6               	movwf	tblptrl,c
  1571  00143A  0E10               	movlw	high _dpowers
  1572  00143C  2168               	addwfc	(??_sprintf+1)& (0+255),w,b
  1573  00143E  6EF7               	movwf	tblptrh,c
  1574  001440                     	if	0	;There are less than 3 active tblptr bytes
  1575  001440                     	endif
  1576  001440  C083  F015         	movff	sprintf@fval,___fttol@f1
  1577  001444  C084  F016         	movff	sprintf@fval+1,___fttol@f1+1
  1578  001448  C085  F017         	movff	sprintf@fval+2,___fttol@f1+2
  1579  00144C  ECBB  F014         	call	___fttol	;wreg free
  1580  001450  0009               	tblrd		*+
  1581  001452  50F5               	movf	tablat,w,c
  1582  001454  5C15               	subwf	?___fttol,w,c
  1583  001456  0009               	tblrd		*+
  1584  001458  50F5               	movf	tablat,w,c
  1585  00145A  5816               	subwfb	?___fttol+1,w,c
  1586  00145C  0009               	tblrd		*+
  1587  00145E  50F5               	movf	tablat,w,c
  1588  001460  5817               	subwfb	?___fttol+2,w,c
  1589  001462  0009               	tblrd		*+
  1590  001464  50F5               	movf	tablat,w,c
  1591  001466  5818               	subwfb	?___fttol+3,w,c
  1592  001468  A0D8               	btfss	status,0,c
  1593  00146A  D018               	goto	l266
  1594                           
  1595                           ;doprnt.c: 896: fval *= 1e-1;
  1596  00146C  C083  F030         	movff	sprintf@fval,___ftmul@f1
  1597  001470  C084  F031         	movff	sprintf@fval+1,___ftmul@f1+1
  1598  001474  C085  F032         	movff	sprintf@fval+2,___ftmul@f1+2
  1599  001478  0ECD               	movlw	205
  1600  00147A  6E33               	movwf	___ftmul@f2,c
  1601  00147C  0ECC               	movlw	204
  1602  00147E  6E34               	movwf	___ftmul@f2+1,c
  1603  001480  0E3D               	movlw	61
  1604  001482  6E35               	movwf	___ftmul@f2+2,c
  1605  001484  EC41  F014         	call	___ftmul	;wreg free
  1606  001488  C030  F083         	movff	?___ftmul,sprintf@fval
  1607  00148C  C031  F084         	movff	?___ftmul+1,sprintf@fval+1
  1608  001490  C032  F085         	movff	?___ftmul+2,sprintf@fval+2
  1609                           
  1610                           ;doprnt.c: 897: exp++;
  1611  001494  0100               	movlb	0	; () banked
  1612  001496  4B7F               	infsnz	sprintf@exp& (0+255),f,b
  1613  001498  2B80               	incf	(sprintf@exp+1)& (0+255),f,b
  1614                           
  1615                           ;doprnt.c: 898: } else if((unsigned long)fval < dpowers[c]) {
  1616  00149A  D037               	goto	l268
  1617  00149C                     l266:
  1618                           
  1619                           ; BSR set to: 0
  1620  00149C  0100               	movlb	0	; () banked
  1621  00149E  5186               	movf	sprintf@c& (0+255),w,b
  1622  0014A0  0D04               	mullw	4
  1623  0014A2  0E01               	movlw	low _dpowers
  1624  0014A4  24F3               	addwf	prodl,w,c
  1625  0014A6  6EF6               	movwf	tblptrl,c
  1626  0014A8  0E10               	movlw	high _dpowers
  1627  0014AA  20F4               	addwfc	prodh,w,c
  1628  0014AC  6EF7               	movwf	tblptrh,c
  1629  0014AE                     	if	0	;There are less than 3 active tblptr bytes
  1630  0014AE                     	endif
  1631  0014AE  C083  F015         	movff	sprintf@fval,___fttol@f1
  1632  0014B2  C084  F016         	movff	sprintf@fval+1,___fttol@f1+1
  1633  0014B6  C085  F017         	movff	sprintf@fval+2,___fttol@f1+2
  1634  0014BA  ECBB  F014         	call	___fttol	;wreg free
  1635  0014BE  0009               	tblrd		*+
  1636  0014C0  50F5               	movf	tablat,w,c
  1637  0014C2  5C15               	subwf	?___fttol,w,c
  1638  0014C4  0009               	tblrd		*+
  1639  0014C6  50F5               	movf	tablat,w,c
  1640  0014C8  5816               	subwfb	?___fttol+1,w,c
  1641  0014CA  0009               	tblrd		*+
  1642  0014CC  50F5               	movf	tablat,w,c
  1643  0014CE  5817               	subwfb	?___fttol+2,w,c
  1644  0014D0  0009               	tblrd		*+
  1645  0014D2  50F5               	movf	tablat,w,c
  1646  0014D4  5818               	subwfb	?___fttol+3,w,c
  1647  0014D6  B0D8               	btfsc	status,0,c
  1648  0014D8  D018               	goto	l268
  1649                           
  1650                           ;doprnt.c: 899: fval *= 10.0;
  1651  0014DA  C083  F030         	movff	sprintf@fval,___ftmul@f1
  1652  0014DE  C084  F031         	movff	sprintf@fval+1,___ftmul@f1+1
  1653  0014E2  C085  F032         	movff	sprintf@fval+2,___ftmul@f1+2
  1654  0014E6  0E00               	movlw	0
  1655  0014E8  6E33               	movwf	___ftmul@f2,c
  1656  0014EA  0E20               	movlw	32
  1657  0014EC  6E34               	movwf	___ftmul@f2+1,c
  1658  0014EE  0E41               	movlw	65
  1659  0014F0  6E35               	movwf	___ftmul@f2+2,c
  1660  0014F2  EC41  F014         	call	___ftmul	;wreg free
  1661  0014F6  C030  F083         	movff	?___ftmul,sprintf@fval
  1662  0014FA  C031  F084         	movff	?___ftmul+1,sprintf@fval+1
  1663  0014FE  C032  F085         	movff	?___ftmul+2,sprintf@fval+2
  1664                           
  1665                           ;doprnt.c: 900: exp--;
  1666  001502  0100               	movlb	0	; () banked
  1667  001504  077F               	decf	sprintf@exp& (0+255),f,b
  1668  001506  A0D8               	btfss	status,0,c
  1669  001508  0780               	decf	(sprintf@exp+1)& (0+255),f,b
  1670  00150A                     l268:
  1671                           
  1672                           ;doprnt.c: 901: }
  1673                           ;doprnt.c: 903: }
  1674                           ;doprnt.c: 959: {
  1675                           ;doprnt.c: 973: if(flag & 0x03)
  1676                           
  1677                           ; BSR set to: 0
  1678                           
  1679                           ; BSR set to: 0
  1680                           
  1681                           ; BSR set to: 0
  1682  00150A  0E03               	movlw	3
  1683  00150C  0100               	movlb	0	; () banked
  1684  00150E  1575               	andwf	sprintf@flag& (0+255),w,b
  1685  001510  6F67               	movwf	??_sprintf& (0+255),b
  1686  001512  0E00               	movlw	0
  1687  001514  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  1688  001516  6F68               	movwf	(??_sprintf+1)& (0+255),b
  1689  001518  5167               	movf	??_sprintf& (0+255),w,b
  1690  00151A  1168               	iorwf	(??_sprintf+1)& (0+255),w,b
  1691  00151C  B4D8               	btfsc	status,2,c
  1692  00151E  D008               	goto	l269
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;doprnt.c: 974: ((*sp++ = ('-')));
  1696  001520  C060  FFD9         	movff	sprintf@sp,fsr2l
  1697  001524  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1698  001528  0E2D               	movlw	45
  1699  00152A  6EDF               	movwf	indf2,c
  1700                           
  1701                           ; BSR set to: 0
  1702  00152C  4B60               	infsnz	sprintf@sp& (0+255),f,b
  1703  00152E  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  1704  001530                     l269:
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;doprnt.c: 980: }
  1708                           ;doprnt.c: 985: val = (unsigned long)fval;
  1709                           
  1710                           ; BSR set to: 0
  1711  001530  C083  F015         	movff	sprintf@fval,___fttol@f1
  1712  001534  C084  F016         	movff	sprintf@fval+1,___fttol@f1+1
  1713  001538  C085  F017         	movff	sprintf@fval+2,___fttol@f1+2
  1714  00153C  ECBB  F014         	call	___fttol	;wreg free
  1715  001540  C015  F07B         	movff	?___fttol,sprintf@val
  1716  001544  C016  F07C         	movff	?___fttol+1,sprintf@val+1
  1717  001548  C017  F07D         	movff	?___fttol+2,sprintf@val+2
  1718  00154C  C018  F07E         	movff	?___fttol+3,sprintf@val+3
  1719                           
  1720                           ;doprnt.c: 986: ((*sp++ = (val/dpowers[c] + '0')));
  1721  001550  C07B  F001         	movff	sprintf@val,___lldiv@dividend
  1722  001554  C07C  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1723  001558  C07D  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1724  00155C  C07E  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1725  001560  0100               	movlb	0	; () banked
  1726  001562  5186               	movf	sprintf@c& (0+255),w,b
  1727  001564  0D04               	mullw	4
  1728  001566  0E01               	movlw	low _dpowers
  1729  001568  24F3               	addwf	prodl,w,c
  1730  00156A  6EF6               	movwf	tblptrl,c
  1731  00156C  0E10               	movlw	high _dpowers
  1732  00156E  20F4               	addwfc	prodh,w,c
  1733  001570  6EF7               	movwf	tblptrh,c
  1734  001572                     	if	0	;There are less than 3 active tblptr bytes
  1735  001572                     	endif
  1736  001572  0009               	tblrd		*+
  1737  001574  CFF5 F005          	movff	tablat,___lldiv@divisor
  1738  001578  0009               	tblrd		*+
  1739  00157A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1740  00157E  0009               	tblrd		*+
  1741  001580  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1742  001584  000A               	tblrd		*-
  1743  001586  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1744  00158A  ECF4  F016         	call	___lldiv	;wreg free
  1745  00158E  5001               	movf	?___lldiv,w,c
  1746  001590  0F30               	addlw	48
  1747  001592  C060  FFD9         	movff	sprintf@sp,fsr2l
  1748  001596  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1749  00159A  6EDF               	movwf	indf2,c
  1750  00159C  0100               	movlb	0	; () banked
  1751  00159E  4B60               	infsnz	sprintf@sp& (0+255),f,b
  1752  0015A0  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;doprnt.c: 987: val %= dpowers[c];
  1756  0015A2  C07B  F001         	movff	sprintf@val,___llmod@dividend
  1757  0015A6  C07C  F002         	movff	sprintf@val+1,___llmod@dividend+1
  1758  0015AA  C07D  F003         	movff	sprintf@val+2,___llmod@dividend+2
  1759  0015AE  C07E  F004         	movff	sprintf@val+3,___llmod@dividend+3
  1760  0015B2  5186               	movf	sprintf@c& (0+255),w,b
  1761  0015B4  0D04               	mullw	4
  1762  0015B6  0E01               	movlw	low _dpowers
  1763  0015B8  24F3               	addwf	prodl,w,c
  1764  0015BA  6EF6               	movwf	tblptrl,c
  1765  0015BC  0E10               	movlw	high _dpowers
  1766  0015BE  20F4               	addwfc	prodh,w,c
  1767  0015C0  6EF7               	movwf	tblptrh,c
  1768  0015C2                     	if	0	;There are less than 3 active tblptr bytes
  1769  0015C2                     	endif
  1770  0015C2  0009               	tblrd		*+
  1771  0015C4  CFF5 F005          	movff	tablat,___llmod@divisor
  1772  0015C8  0009               	tblrd		*+
  1773  0015CA  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1774  0015CE  0009               	tblrd		*+
  1775  0015D0  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1776  0015D4  000A               	tblrd		*-
  1777  0015D6  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1778  0015DA  ECAD  F017         	call	___llmod	;wreg free
  1779  0015DE  C001  F07B         	movff	?___llmod,sprintf@val
  1780  0015E2  C002  F07C         	movff	?___llmod+1,sprintf@val+1
  1781  0015E6  C003  F07D         	movff	?___llmod+2,sprintf@val+2
  1782  0015EA  C004  F07E         	movff	?___llmod+3,sprintf@val+3
  1783                           
  1784                           ;doprnt.c: 992: if(prec)
  1785  0015EE  0100               	movlb	0	; () banked
  1786  0015F0  5181               	movf	sprintf@prec& (0+255),w,b
  1787  0015F2  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1788  0015F4  B4D8               	btfsc	status,2,c
  1789  0015F6  D082               	goto	u2990
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;doprnt.c: 994: {
  1793                           ;doprnt.c: 995: ((*sp++ = ('.')));
  1794  0015F8  C060  FFD9         	movff	sprintf@sp,fsr2l
  1795  0015FC  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1796  001600  0E2E               	movlw	46
  1797  001602  6EDF               	movwf	indf2,c
  1798                           
  1799                           ; BSR set to: 0
  1800  001604  4B60               	infsnz	sprintf@sp& (0+255),f,b
  1801  001606  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;doprnt.c: 996: prec -= c;
  1805  001608  5186               	movf	sprintf@c& (0+255),w,b
  1806  00160A  5F81               	subwf	sprintf@prec& (0+255),f,b
  1807  00160C  0E00               	movlw	0
  1808  00160E  BF86               	btfsc	sprintf@c& (0+255),7,b
  1809  001610  0EFF               	movlw	255
  1810  001612  5B82               	subwfb	(sprintf@prec+1)& (0+255),f,b
  1811                           
  1812                           ;doprnt.c: 997: while(c--) {
  1813  001614  D05E               	goto	l271
  1814  001616                     l272:
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;doprnt.c: 1002: if(flag & 0x200 && val == 0) {
  1818  001616  A376               	btfss	(sprintf@flag+1)& (0+255),1,b
  1819  001618  D00E               	goto	l273
  1820                           
  1821                           ; BSR set to: 0
  1822  00161A  517B               	movf	sprintf@val& (0+255),w,b
  1823  00161C  117C               	iorwf	(sprintf@val+1)& (0+255),w,b
  1824  00161E  117D               	iorwf	(sprintf@val+2)& (0+255),w,b
  1825  001620  117E               	iorwf	(sprintf@val+3)& (0+255),w,b
  1826  001622  A4D8               	btfss	status,2,c
  1827  001624  D008               	goto	l273
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;doprnt.c: 1003: prec = c = 0;
  1831  001626  0E00               	movlw	0
  1832  001628  6F86               	movwf	sprintf@c& (0+255),b
  1833  00162A  5186               	movf	sprintf@c& (0+255),w,b
  1834  00162C  6F81               	movwf	sprintf@prec& (0+255),b
  1835  00162E  6B82               	clrf	(sprintf@prec+1)& (0+255),b
  1836  001630  BF81               	btfsc	sprintf@prec& (0+255),7,b
  1837  001632  0782               	decf	(sprintf@prec+1)& (0+255),f,b
  1838                           
  1839                           ;doprnt.c: 1004: break;
  1840  001634  D05F               	goto	l275
  1841  001636                     l273:
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;doprnt.c: 1005: }
  1845                           ;doprnt.c: 1007: ((*sp++ = ('0' + (val/dpowers[c]))));
  1846                           
  1847                           ; BSR set to: 0
  1848  001636  C07B  F001         	movff	sprintf@val,___lldiv@dividend
  1849  00163A  C07C  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1850  00163E  C07D  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1851  001642  C07E  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1852  001646  5186               	movf	sprintf@c& (0+255),w,b
  1853  001648  0D04               	mullw	4
  1854  00164A  0E01               	movlw	low _dpowers
  1855  00164C  24F3               	addwf	prodl,w,c
  1856  00164E  6EF6               	movwf	tblptrl,c
  1857  001650  0E10               	movlw	high _dpowers
  1858  001652  20F4               	addwfc	prodh,w,c
  1859  001654  6EF7               	movwf	tblptrh,c
  1860  001656                     	if	0	;There are less than 3 active tblptr bytes
  1861  001656                     	endif
  1862  001656  0009               	tblrd		*+
  1863  001658  CFF5 F005          	movff	tablat,___lldiv@divisor
  1864  00165C  0009               	tblrd		*+
  1865  00165E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1866  001662  0009               	tblrd		*+
  1867  001664  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1868  001668  000A               	tblrd		*-
  1869  00166A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1870  00166E  ECF4  F016         	call	___lldiv	;wreg free
  1871  001672  5001               	movf	?___lldiv,w,c
  1872  001674  0F30               	addlw	48
  1873  001676  C060  FFD9         	movff	sprintf@sp,fsr2l
  1874  00167A  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1875  00167E  6EDF               	movwf	indf2,c
  1876  001680  0100               	movlb	0	; () banked
  1877  001682  4B60               	infsnz	sprintf@sp& (0+255),f,b
  1878  001684  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;doprnt.c: 1008: val %= dpowers[c];
  1882  001686  C07B  F001         	movff	sprintf@val,___llmod@dividend
  1883  00168A  C07C  F002         	movff	sprintf@val+1,___llmod@dividend+1
  1884  00168E  C07D  F003         	movff	sprintf@val+2,___llmod@dividend+2
  1885  001692  C07E  F004         	movff	sprintf@val+3,___llmod@dividend+3
  1886  001696  5186               	movf	sprintf@c& (0+255),w,b
  1887  001698  0D04               	mullw	4
  1888  00169A  0E01               	movlw	low _dpowers
  1889  00169C  24F3               	addwf	prodl,w,c
  1890  00169E  6EF6               	movwf	tblptrl,c
  1891  0016A0  0E10               	movlw	high _dpowers
  1892  0016A2  20F4               	addwfc	prodh,w,c
  1893  0016A4  6EF7               	movwf	tblptrh,c
  1894  0016A6                     	if	0	;There are less than 3 active tblptr bytes
  1895  0016A6                     	endif
  1896  0016A6  0009               	tblrd		*+
  1897  0016A8  CFF5 F005          	movff	tablat,___llmod@divisor
  1898  0016AC  0009               	tblrd		*+
  1899  0016AE  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1900  0016B2  0009               	tblrd		*+
  1901  0016B4  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1902  0016B8  000A               	tblrd		*-
  1903  0016BA  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1904  0016BE  ECAD  F017         	call	___llmod	;wreg free
  1905  0016C2  C001  F07B         	movff	?___llmod,sprintf@val
  1906  0016C6  C002  F07C         	movff	?___llmod+1,sprintf@val+1
  1907  0016CA  C003  F07D         	movff	?___llmod+2,sprintf@val+2
  1908  0016CE  C004  F07E         	movff	?___llmod+3,sprintf@val+3
  1909  0016D2                     l271:
  1910  0016D2  0100               	movlb	0	; () banked
  1911  0016D4  0786               	decf	sprintf@c& (0+255),f,b
  1912  0016D6  2986               	incf	sprintf@c& (0+255),w,b
  1913  0016D8  B4D8               	btfsc	status,2,c
  1914  0016DA  D00C               	goto	l275
  1915  0016DC  D79C               	goto	l272
  1916  0016DE                     
  1917                           ; BSR set to: 0
  1918                           ;doprnt.c: 1012: ((*sp++ = ('0')));
  1919                           
  1920                           ; BSR set to: 0
  1921  0016DE  C060  FFD9         	movff	sprintf@sp,fsr2l
  1922  0016E2  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1923  0016E6  0E30               	movlw	48
  1924  0016E8  6EDF               	movwf	indf2,c
  1925                           
  1926                           ; BSR set to: 0
  1927  0016EA  4B60               	infsnz	sprintf@sp& (0+255),f,b
  1928  0016EC  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;doprnt.c: 1013: prec--;
  1932  0016EE  0781               	decf	sprintf@prec& (0+255),f,b
  1933  0016F0  A0D8               	btfss	status,0,c
  1934  0016F2  0782               	decf	(sprintf@prec+1)& (0+255),f,b
  1935  0016F4                     l275:
  1936                           
  1937                           ; BSR set to: 0
  1938                           
  1939                           ; BSR set to: 0
  1940  0016F4  5181               	movf	sprintf@prec& (0+255),w,b
  1941  0016F6  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1942  0016F8  A4D8               	btfss	status,2,c
  1943  0016FA  D7F1               	goto	l276
  1944  0016FC                     u2990:
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;doprnt.c: 1014: }
  1948                           ;doprnt.c: 1015: }
  1949                           ;doprnt.c: 1021: ((*sp++ = ('e')));
  1950                           
  1951                           ; BSR set to: 0
  1952                           
  1953                           ; BSR set to: 0
  1954  0016FC  C060  FFD9         	movff	sprintf@sp,fsr2l
  1955  001700  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1956  001704  0E65               	movlw	101
  1957  001706  6EDF               	movwf	indf2,c
  1958                           
  1959                           ; BSR set to: 0
  1960  001708  4B60               	infsnz	sprintf@sp& (0+255),f,b
  1961  00170A  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  1962                           
  1963                           ; BSR set to: 0
  1964                           ;doprnt.c: 1022: if(exp < 0) {
  1965  00170C  AF80               	btfss	(sprintf@exp+1)& (0+255),7,b
  1966  00170E  D00A               	goto	l278
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;doprnt.c: 1023: exp = -exp;
  1970  001710  6D7F               	negf	sprintf@exp& (0+255),b
  1971  001712  1F80               	comf	(sprintf@exp+1)& (0+255),f,b
  1972  001714  B0D8               	btfsc	status,0,c
  1973  001716  2B80               	incf	(sprintf@exp+1)& (0+255),f,b
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;doprnt.c: 1024: ((*sp++ = ('-')));
  1977  001718  C060  FFD9         	movff	sprintf@sp,fsr2l
  1978  00171C  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1979  001720  0E2D               	movlw	45
  1980  001722  D005               	goto	L2
  1981  001724                     l278:
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;doprnt.c: 1026: ((*sp++ = ('+')));
  1985                           
  1986                           ; BSR set to: 0
  1987  001724  C060  FFD9         	movff	sprintf@sp,fsr2l
  1988  001728  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  1989  00172C  0E2B               	movlw	43
  1990  00172E                     L2:
  1991  00172E  6EDF               	movwf	indf2,c
  1992                           
  1993                           ; BSR set to: 0
  1994  001730  4B60               	infsnz	sprintf@sp& (0+255),f,b
  1995  001732  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;doprnt.c: 1039: ((*sp++ = (exp / 10 + '0')));
  1999                           
  2000                           ; BSR set to: 0
  2001  001734  C07F  F007         	movff	sprintf@exp,___awdiv@dividend
  2002  001738  C080  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2003  00173C  0E00               	movlw	0
  2004  00173E  6E0A               	movwf	___awdiv@divisor+1,c
  2005  001740  0E0A               	movlw	10
  2006  001742  6E09               	movwf	___awdiv@divisor,c
  2007  001744  ECB2  F016         	call	___awdiv	;wreg free
  2008  001748  5007               	movf	?___awdiv,w,c
  2009  00174A  0F30               	addlw	48
  2010  00174C  C060  FFD9         	movff	sprintf@sp,fsr2l
  2011  001750  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2012  001754  6EDF               	movwf	indf2,c
  2013  001756  0100               	movlb	0	; () banked
  2014  001758  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2015  00175A  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;doprnt.c: 1040: ((*sp++ = (exp % 10 + '0')));
  2019  00175C  C07F  F001         	movff	sprintf@exp,___awmod@dividend
  2020  001760  C080  F002         	movff	sprintf@exp+1,___awmod@dividend+1
  2021  001764  0E00               	movlw	0
  2022  001766  6E04               	movwf	___awmod@divisor+1,c
  2023  001768  0E0A               	movlw	10
  2024  00176A  6E03               	movwf	___awmod@divisor,c
  2025  00176C  EC75  F017         	call	___awmod	;wreg free
  2026  001770  5001               	movf	?___awmod,w,c
  2027  001772  0F30               	addlw	48
  2028  001774  C060  FFD9         	movff	sprintf@sp,fsr2l
  2029  001778  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2030  00177C  6EDF               	movwf	indf2,c
  2031  00177E  0100               	movlb	0	; () banked
  2032  001780  D33A               	goto	l3141
  2033  001782                     l258:
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;doprnt.c: 1048: }
  2037                           ;doprnt.c: 1087: if(flag & 0x200) {
  2038  001782  A376               	btfss	(sprintf@flag+1)& (0+255),1,b
  2039  001784  D0EB               	goto	l280
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;doprnt.c: 1088: if(exp < 0)
  2043  001786  AF80               	btfss	(sprintf@exp+1)& (0+255),7,b
  2044  001788  D00A               	goto	l281
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;doprnt.c: 1089: prec -= (exp+1);
  2048  00178A  0E01               	movlw	1
  2049  00178C  257F               	addwf	sprintf@exp& (0+255),w,b
  2050  00178E  6F67               	movwf	??_sprintf& (0+255),b
  2051  001790  0E00               	movlw	0
  2052  001792  2180               	addwfc	(sprintf@exp+1)& (0+255),w,b
  2053  001794  6F68               	movwf	(??_sprintf+1)& (0+255),b
  2054  001796  5167               	movf	??_sprintf& (0+255),w,b
  2055  001798  5F81               	subwf	sprintf@prec& (0+255),f,b
  2056  00179A  5168               	movf	(??_sprintf+1)& (0+255),w,b
  2057  00179C  5B82               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2058  00179E                     l281:
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;doprnt.c: 1091: val = (unsigned long)fval;
  2062                           
  2063                           ; BSR set to: 0
  2064  00179E  C083  F015         	movff	sprintf@fval,___fttol@f1
  2065  0017A2  C084  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2066  0017A6  C085  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2067  0017AA  ECBB  F014         	call	___fttol	;wreg free
  2068  0017AE  C015  F07B         	movff	?___fttol,sprintf@val
  2069  0017B2  C016  F07C         	movff	?___fttol+1,sprintf@val+1
  2070  0017B6  C017  F07D         	movff	?___fttol+2,sprintf@val+2
  2071  0017BA  C018  F07E         	movff	?___fttol+3,sprintf@val+3
  2072                           
  2073                           ;doprnt.c: 1092: for(c = 0 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2074  0017BE  0E00               	movlw	0
  2075  0017C0  0100               	movlb	0	; () banked
  2076  0017C2  6F86               	movwf	sprintf@c& (0+255),b
  2077  0017C4                     l2991:
  2078                           
  2079                           ; BSR set to: 0
  2080  0017C4  0E0A               	movlw	10
  2081  0017C6  1986               	xorwf	sprintf@c& (0+255),w,b
  2082  0017C8  B4D8               	btfsc	status,2,c
  2083  0017CA  D018               	goto	u3050
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;doprnt.c: 1093: if(val < dpowers[c])
  2087                           
  2088                           ; BSR set to: 0
  2089                           
  2090                           ; BSR set to: 0
  2091  0017CC  5186               	movf	sprintf@c& (0+255),w,b
  2092  0017CE  0D04               	mullw	4
  2093  0017D0  0E01               	movlw	low _dpowers
  2094  0017D2  24F3               	addwf	prodl,w,c
  2095  0017D4  6EF6               	movwf	tblptrl,c
  2096  0017D6  0E10               	movlw	high _dpowers
  2097  0017D8  20F4               	addwfc	prodh,w,c
  2098  0017DA  6EF7               	movwf	tblptrh,c
  2099  0017DC                     	if	0	;There are less than 3 active tblptr bytes
  2100  0017DC                     	endif
  2101  0017DC  0009               	tblrd		*+
  2102  0017DE  50F5               	movf	tablat,w,c
  2103  0017E0  5D7B               	subwf	sprintf@val& (0+255),w,b
  2104  0017E2  0009               	tblrd		*+
  2105  0017E4  50F5               	movf	tablat,w,c
  2106  0017E6  597C               	subwfb	(sprintf@val+1)& (0+255),w,b
  2107  0017E8  0009               	tblrd		*+
  2108  0017EA  50F5               	movf	tablat,w,c
  2109  0017EC  597D               	subwfb	(sprintf@val+2)& (0+255),w,b
  2110  0017EE  0009               	tblrd		*+
  2111  0017F0  50F5               	movf	tablat,w,c
  2112  0017F2  597E               	subwfb	(sprintf@val+3)& (0+255),w,b
  2113  0017F4  A0D8               	btfss	status,0,c
  2114  0017F6  D002               	goto	u3050
  2115                           
  2116                           ; BSR set to: 0
  2117                           
  2118                           ; BSR set to: 0
  2119                           
  2120                           ; BSR set to: 0
  2121                           ;doprnt.c: 1094: break;
  2122  0017F8  2B86               	incf	sprintf@c& (0+255),f,b
  2123  0017FA  D7E4               	goto	l2991
  2124  0017FC                     u3050:
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;doprnt.c: 1095: prec -= c;
  2128                           
  2129                           ; BSR set to: 0
  2130  0017FC  5186               	movf	sprintf@c& (0+255),w,b
  2131  0017FE  5F81               	subwf	sprintf@prec& (0+255),f,b
  2132  001800  0E00               	movlw	0
  2133  001802  BF86               	btfsc	sprintf@c& (0+255),7,b
  2134  001804  0EFF               	movlw	255
  2135  001806  5B82               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2136                           
  2137                           ;doprnt.c: 1096: if(prec <= 12)
  2138  001808  BF82               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2139  00180A  D006               	goto	u3060
  2140  00180C  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  2141  00180E  E11B               	bnz	l285
  2142  001810  0E0D               	movlw	13
  2143  001812  5D81               	subwf	sprintf@prec& (0+255),w,b
  2144  001814  B0D8               	btfsc	status,0,c
  2145  001816  D017               	goto	l285
  2146  001818                     u3060:
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;doprnt.c: 1097: fval += fround(prec);
  2150  001818  C083  F049         	movff	sprintf@fval,___ftadd@f1
  2151  00181C  C084  F04A         	movff	sprintf@fval+1,___ftadd@f1+1
  2152  001820  C085  F04B         	movff	sprintf@fval+2,___ftadd@f1+2
  2153  001824  5181               	movf	sprintf@prec& (0+255),w,b
  2154  001826  EC15  F011         	call	_fround
  2155  00182A  C03F  F04C         	movff	?_fround,___ftadd@f2
  2156  00182E  C040  F04D         	movff	?_fround+1,___ftadd@f2+1
  2157  001832  C041  F04E         	movff	?_fround+2,___ftadd@f2+2
  2158  001836  EC3E  F012         	call	___ftadd	;wreg free
  2159  00183A  C049  F083         	movff	?___ftadd,sprintf@fval
  2160  00183E  C04A  F084         	movff	?___ftadd+1,sprintf@fval+1
  2161  001842  C04B  F085         	movff	?___ftadd+2,sprintf@fval+2
  2162  001846                     l285:
  2163                           
  2164                           ;doprnt.c: 1100: {
  2165                           ;doprnt.c: 1101: double temp;
  2166                           ;doprnt.c: 1102: temp = scale(prec);
  2167  001846  0100               	movlb	0	; () banked
  2168  001848  5181               	movf	sprintf@prec& (0+255),w,b
  2169  00184A  EC11  F00F         	call	_scale
  2170  00184E  C03F  F072         	movff	?_scale,sprintf@temp
  2171  001852  C040  F073         	movff	?_scale+1,sprintf@temp+1
  2172  001856  C041  F074         	movff	?_scale+2,sprintf@temp+2
  2173                           
  2174                           ;doprnt.c: 1103: temp *= fval - (double)val;
  2175  00185A  C072  F030         	movff	sprintf@temp,___ftmul@f1
  2176  00185E  C073  F031         	movff	sprintf@temp+1,___ftmul@f1+1
  2177  001862  C074  F032         	movff	sprintf@temp+2,___ftmul@f1+2
  2178  001866  C083  F04C         	movff	sprintf@fval,___ftadd@f2
  2179  00186A  C084  F04D         	movff	sprintf@fval+1,___ftadd@f2+1
  2180  00186E  C085  F04E         	movff	sprintf@fval+2,___ftadd@f2+2
  2181  001872  C07B  F024         	movff	sprintf@val,___lltoft@c
  2182  001876  C07C  F025         	movff	sprintf@val+1,___lltoft@c+1
  2183  00187A  C07D  F026         	movff	sprintf@val+2,___lltoft@c+2
  2184  00187E  C07E  F027         	movff	sprintf@val+3,___lltoft@c+3
  2185  001882  ECE0  F017         	call	___lltoft	;wreg free
  2186  001886  C024  F02D         	movff	?___lltoft,___ftneg@f1
  2187  00188A  C025  F02E         	movff	?___lltoft+1,___ftneg@f1+1
  2188  00188E  C026  F02F         	movff	?___lltoft+2,___ftneg@f1+2
  2189  001892  ECFB  F018         	call	___ftneg	;wreg free
  2190  001896  C02D  F049         	movff	?___ftneg,___ftadd@f1
  2191  00189A  C02E  F04A         	movff	?___ftneg+1,___ftadd@f1+1
  2192  00189E  C02F  F04B         	movff	?___ftneg+2,___ftadd@f1+2
  2193  0018A2  EC3E  F012         	call	___ftadd	;wreg free
  2194  0018A6  C049  F033         	movff	?___ftadd,___ftmul@f2
  2195  0018AA  C04A  F034         	movff	?___ftadd+1,___ftmul@f2+1
  2196  0018AE  C04B  F035         	movff	?___ftadd+2,___ftmul@f2+2
  2197  0018B2  EC41  F014         	call	___ftmul	;wreg free
  2198  0018B6  C030  F072         	movff	?___ftmul,sprintf@temp
  2199  0018BA  C031  F073         	movff	?___ftmul+1,sprintf@temp+1
  2200  0018BE  C032  F074         	movff	?___ftmul+2,sprintf@temp+2
  2201                           
  2202                           ;doprnt.c: 1104: val = (unsigned long)temp;
  2203  0018C2  C072  F015         	movff	sprintf@temp,___fttol@f1
  2204  0018C6  C073  F016         	movff	sprintf@temp+1,___fttol@f1+1
  2205  0018CA  C074  F017         	movff	sprintf@temp+2,___fttol@f1+2
  2206  0018CE  ECBB  F014         	call	___fttol	;wreg free
  2207  0018D2  C015  F07B         	movff	?___fttol,sprintf@val
  2208  0018D6  C016  F07C         	movff	?___fttol+1,sprintf@val+1
  2209  0018DA  C017  F07D         	movff	?___fttol+2,sprintf@val+2
  2210  0018DE  C018  F07E         	movff	?___fttol+3,sprintf@val+3
  2211                           
  2212                           ;doprnt.c: 1105: }
  2213                           ;doprnt.c: 1106: while(prec && val % 10 == 0) {
  2214  0018E2  D01E               	goto	l286
  2215  0018E4                     
  2216                           ;doprnt.c: 1107: val /= 10;
  2217  0018E4  C07B  F001         	movff	sprintf@val,___lldiv@dividend
  2218  0018E8  C07C  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2219  0018EC  C07D  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2220  0018F0  C07E  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2221  0018F4  0E0A               	movlw	10
  2222  0018F6  6E05               	movwf	___lldiv@divisor,c
  2223  0018F8  0E00               	movlw	0
  2224  0018FA  6E06               	movwf	___lldiv@divisor+1,c
  2225  0018FC  0E00               	movlw	0
  2226  0018FE  6E07               	movwf	___lldiv@divisor+2,c
  2227  001900  0E00               	movlw	0
  2228  001902  6E08               	movwf	___lldiv@divisor+3,c
  2229  001904  ECF4  F016         	call	___lldiv	;wreg free
  2230  001908  C001  F07B         	movff	?___lldiv,sprintf@val
  2231  00190C  C002  F07C         	movff	?___lldiv+1,sprintf@val+1
  2232  001910  C003  F07D         	movff	?___lldiv+2,sprintf@val+2
  2233  001914  C004  F07E         	movff	?___lldiv+3,sprintf@val+3
  2234                           
  2235                           ;doprnt.c: 1108: prec--;
  2236  001918  0100               	movlb	0	; () banked
  2237  00191A  0781               	decf	sprintf@prec& (0+255),f,b
  2238  00191C  A0D8               	btfss	status,0,c
  2239  00191E  0782               	decf	(sprintf@prec+1)& (0+255),f,b
  2240  001920                     l286:
  2241                           
  2242                           ; BSR set to: 0
  2243  001920  0100               	movlb	0	; () banked
  2244  001922  5181               	movf	sprintf@prec& (0+255),w,b
  2245  001924  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2246  001926  B4D8               	btfsc	status,2,c
  2247  001928  D039               	goto	l292
  2248                           
  2249                           ; BSR set to: 0
  2250  00192A  C07B  F001         	movff	sprintf@val,___llmod@dividend
  2251  00192E  C07C  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2252  001932  C07D  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2253  001936  C07E  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2254  00193A  0E0A               	movlw	10
  2255  00193C  6E05               	movwf	___llmod@divisor,c
  2256  00193E  0E00               	movlw	0
  2257  001940  6E06               	movwf	___llmod@divisor+1,c
  2258  001942  0E00               	movlw	0
  2259  001944  6E07               	movwf	___llmod@divisor+2,c
  2260  001946  0E00               	movlw	0
  2261  001948  6E08               	movwf	___llmod@divisor+3,c
  2262  00194A  ECAD  F017         	call	___llmod	;wreg free
  2263  00194E  5001               	movf	?___llmod,w,c
  2264  001950  1002               	iorwf	?___llmod+1,w,c
  2265  001952  1003               	iorwf	?___llmod+2,w,c
  2266  001954  1004               	iorwf	?___llmod+3,w,c
  2267  001956  A4D8               	btfss	status,2,c
  2268  001958  D021               	goto	l292
  2269  00195A  D7C4               	goto	l287
  2270  00195C                     l280:
  2271                           
  2272                           ;doprnt.c: 1112: if(prec <= 12)
  2273  00195C  0100               	movlb	0	; () banked
  2274  00195E  BF82               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2275  001960  D006               	goto	u3090
  2276  001962  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  2277  001964  E11B               	bnz	l3023
  2278  001966  0E0D               	movlw	13
  2279  001968  5D81               	subwf	sprintf@prec& (0+255),w,b
  2280  00196A  B0D8               	btfsc	status,0,c
  2281  00196C  D017               	goto	l292
  2282  00196E                     u3090:
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;doprnt.c: 1113: fval += fround(prec);
  2286  00196E  C083  F049         	movff	sprintf@fval,___ftadd@f1
  2287  001972  C084  F04A         	movff	sprintf@fval+1,___ftadd@f1+1
  2288  001976  C085  F04B         	movff	sprintf@fval+2,___ftadd@f1+2
  2289  00197A  5181               	movf	sprintf@prec& (0+255),w,b
  2290  00197C  EC15  F011         	call	_fround
  2291  001980  C03F  F04C         	movff	?_fround,___ftadd@f2
  2292  001984  C040  F04D         	movff	?_fround+1,___ftadd@f2+1
  2293  001988  C041  F04E         	movff	?_fround+2,___ftadd@f2+2
  2294  00198C  EC3E  F012         	call	___ftadd	;wreg free
  2295  001990  C049  F083         	movff	?___ftadd,sprintf@fval
  2296  001994  C04A  F084         	movff	?___ftadd+1,sprintf@fval+1
  2297  001998  C04B  F085         	movff	?___ftadd+2,sprintf@fval+2
  2298  00199C                     l292:
  2299  00199C                     l3023:
  2300                           
  2301                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2302  00199C  0100               	movlb	0	; () banked
  2303  00199E  BF80               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2304  0019A0  D006               	goto	u3100
  2305  0019A2  5180               	movf	(sprintf@exp+1)& (0+255),w,b
  2306  0019A4  E120               	bnz	l3031
  2307  0019A6  0E0A               	movlw	10
  2308  0019A8  5D7F               	subwf	sprintf@exp& (0+255),w,b
  2309  0019AA  B0D8               	btfsc	status,0,c
  2310  0019AC  D01C               	goto	u3130
  2311  0019AE                     u3100:
  2312                           
  2313                           ; BSR set to: 0
  2314  0019AE  5183               	movf	sprintf@fval& (0+255),w,b
  2315  0019B0  1184               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2316  0019B2  1185               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2317  0019B4  B4D8               	btfsc	status,2,c
  2318  0019B6  D056               	goto	l293
  2319                           
  2320                           ; BSR set to: 0
  2321  0019B8  C083  F015         	movff	sprintf@fval,___fttol@f1
  2322  0019BC  C084  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2323  0019C0  C085  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2324  0019C4  ECBB  F014         	call	___fttol	;wreg free
  2325  0019C8  5015               	movf	?___fttol,w,c
  2326  0019CA  1016               	iorwf	?___fttol+1,w,c
  2327  0019CC  1017               	iorwf	?___fttol+2,w,c
  2328  0019CE  1018               	iorwf	?___fttol+3,w,c
  2329  0019D0  A4D8               	btfss	status,2,c
  2330  0019D2  D048               	goto	l293
  2331  0019D4  0100               	movlb	0	; () banked
  2332  0019D6  BF80               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2333  0019D8  D045               	goto	l293
  2334  0019DA  5180               	movf	(sprintf@exp+1)& (0+255),w,b
  2335  0019DC  E104               	bnz	l3031
  2336  0019DE  0E02               	movlw	2
  2337  0019E0  5D7F               	subwf	sprintf@exp& (0+255),w,b
  2338  0019E2  A0D8               	btfss	status,0,c
  2339  0019E4  D03F               	goto	l293
  2340  0019E6                     u3130:
  2341  0019E6                     l3031:
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2345  0019E6  C077  F055         	movff	sprintf@tmpval,___ftge@ff1
  2346  0019EA  C078  F056         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2347  0019EE  C079  F057         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2348  0019F2  0E70               	movlw	112
  2349  0019F4  6E58               	movwf	___ftge@ff2,c
  2350  0019F6  0E89               	movlw	137
  2351  0019F8  6E59               	movwf	___ftge@ff2+1,c
  2352  0019FA  0E40               	movlw	64
  2353  0019FC  6E5A               	movwf	___ftge@ff2+2,c
  2354  0019FE  EC6A  F016         	call	___ftge	;wreg free
  2355  001A02  B0D8               	btfsc	status,0,c
  2356  001A04  D003               	goto	l296
  2357                           
  2358                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2359  001A06  0100               	movlb	0	; () banked
  2360  001A08  0EF7               	movlw	247
  2361  001A0A  D002               	goto	L3
  2362  001A0C                     l296:
  2363                           
  2364                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2365                           
  2366                           ; BSR set to: 0
  2367  001A0C  0100               	movlb	0	; () banked
  2368  001A0E  0EF8               	movlw	248
  2369  001A10                     L3:
  2370  001A10  277F               	addwf	sprintf@exp& (0+255),f,b
  2371  001A12  0EFF               	movlw	255
  2372  001A14  2380               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;doprnt.c: 1124: }
  2376                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2377                           
  2378                           ; BSR set to: 0
  2379  001A16  517F               	movf	sprintf@exp& (0+255),w,b
  2380  001A18  EC11  F00F         	call	_scale
  2381  001A1C  C03F  F077         	movff	?_scale,sprintf@tmpval
  2382  001A20  C040  F078         	movff	?_scale+1,sprintf@tmpval+1
  2383  001A24  C041  F079         	movff	?_scale+2,sprintf@tmpval+2
  2384                           
  2385                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2386  001A28  C083  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2387  001A2C  C084  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2388  001A30  C085  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2389  001A34  C077  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2390  001A38  C078  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2391  001A3C  C079  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2392  001A40  EC14  F013         	call	__tdiv_to_l_	;wreg free
  2393  001A44  C001  F07B         	movff	?__tdiv_to_l_,sprintf@val
  2394  001A48  C002  F07C         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2395  001A4C  C003  F07D         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2396  001A50  C004  F07E         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2397                           
  2398                           ;doprnt.c: 1129: fval = 0.0;
  2399  001A54  0E00               	movlw	0
  2400  001A56  0100               	movlb	0	; () banked
  2401  001A58  6F83               	movwf	sprintf@fval& (0+255),b
  2402  001A5A  0E00               	movlw	0
  2403  001A5C  6F84               	movwf	(sprintf@fval+1)& (0+255),b
  2404  001A5E  0E00               	movlw	0
  2405  001A60  6F85               	movwf	(sprintf@fval+2)& (0+255),b
  2406                           
  2407                           ;doprnt.c: 1130: } else {
  2408  001A62  D033               	goto	l302
  2409  001A64                     l293:
  2410                           
  2411                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2412                           
  2413                           ; BSR set to: 0
  2414  001A64  C083  F015         	movff	sprintf@fval,___fttol@f1
  2415  001A68  C084  F016         	movff	sprintf@fval+1,___fttol@f1+1
  2416  001A6C  C085  F017         	movff	sprintf@fval+2,___fttol@f1+2
  2417  001A70  ECBB  F014         	call	___fttol	;wreg free
  2418  001A74  C015  F07B         	movff	?___fttol,sprintf@val
  2419  001A78  C016  F07C         	movff	?___fttol+1,sprintf@val+1
  2420  001A7C  C017  F07D         	movff	?___fttol+2,sprintf@val+2
  2421  001A80  C018  F07E         	movff	?___fttol+3,sprintf@val+3
  2422                           
  2423                           ;doprnt.c: 1132: fval -= (double)val;
  2424  001A84  C083  F055         	movff	sprintf@fval,___ftsub@f1
  2425  001A88  C084  F056         	movff	sprintf@fval+1,___ftsub@f1+1
  2426  001A8C  C085  F057         	movff	sprintf@fval+2,___ftsub@f1+2
  2427  001A90  C07B  F024         	movff	sprintf@val,___lltoft@c
  2428  001A94  C07C  F025         	movff	sprintf@val+1,___lltoft@c+1
  2429  001A98  C07D  F026         	movff	sprintf@val+2,___lltoft@c+2
  2430  001A9C  C07E  F027         	movff	sprintf@val+3,___lltoft@c+3
  2431  001AA0  ECE0  F017         	call	___lltoft	;wreg free
  2432  001AA4  C024  F058         	movff	?___lltoft,___ftsub@f2
  2433  001AA8  C025  F059         	movff	?___lltoft+1,___ftsub@f2+1
  2434  001AAC  C026  F05A         	movff	?___lltoft+2,___ftsub@f2+2
  2435  001AB0  EC30  F018         	call	___ftsub	;wreg free
  2436  001AB4  C055  F083         	movff	?___ftsub,sprintf@fval
  2437  001AB8  C056  F084         	movff	?___ftsub+1,sprintf@fval+1
  2438  001ABC  C057  F085         	movff	?___ftsub+2,sprintf@fval+2
  2439                           
  2440                           ;doprnt.c: 1133: exp = 0;
  2441  001AC0  0E00               	movlw	0
  2442  001AC2  0100               	movlb	0	; () banked
  2443  001AC4  6F80               	movwf	(sprintf@exp+1)& (0+255),b
  2444  001AC6  0E00               	movlw	0
  2445  001AC8  6F7F               	movwf	sprintf@exp& (0+255),b
  2446  001ACA                     l302:
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;doprnt.c: 1134: }
  2450                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2451                           
  2452                           ; BSR set to: 0
  2453  001ACA  0E01               	movlw	1
  2454  001ACC  6F86               	movwf	sprintf@c& (0+255),b
  2455  001ACE                     l3051:
  2456                           
  2457                           ; BSR set to: 0
  2458  001ACE  0E0A               	movlw	10
  2459  001AD0  1986               	xorwf	sprintf@c& (0+255),w,b
  2460  001AD2  B4D8               	btfsc	status,2,c
  2461  001AD4  D018               	goto	u3170
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;doprnt.c: 1137: if(val < dpowers[c])
  2465                           
  2466                           ; BSR set to: 0
  2467                           
  2468                           ; BSR set to: 0
  2469  001AD6  5186               	movf	sprintf@c& (0+255),w,b
  2470  001AD8  0D04               	mullw	4
  2471  001ADA  0E01               	movlw	low _dpowers
  2472  001ADC  24F3               	addwf	prodl,w,c
  2473  001ADE  6EF6               	movwf	tblptrl,c
  2474  001AE0  0E10               	movlw	high _dpowers
  2475  001AE2  20F4               	addwfc	prodh,w,c
  2476  001AE4  6EF7               	movwf	tblptrh,c
  2477  001AE6                     	if	0	;There are less than 3 active tblptr bytes
  2478  001AE6                     	endif
  2479  001AE6  0009               	tblrd		*+
  2480  001AE8  50F5               	movf	tablat,w,c
  2481  001AEA  5D7B               	subwf	sprintf@val& (0+255),w,b
  2482  001AEC  0009               	tblrd		*+
  2483  001AEE  50F5               	movf	tablat,w,c
  2484  001AF0  597C               	subwfb	(sprintf@val+1)& (0+255),w,b
  2485  001AF2  0009               	tblrd		*+
  2486  001AF4  50F5               	movf	tablat,w,c
  2487  001AF6  597D               	subwfb	(sprintf@val+2)& (0+255),w,b
  2488  001AF8  0009               	tblrd		*+
  2489  001AFA  50F5               	movf	tablat,w,c
  2490  001AFC  597E               	subwfb	(sprintf@val+3)& (0+255),w,b
  2491  001AFE  A0D8               	btfss	status,0,c
  2492  001B00  D002               	goto	u3170
  2493                           
  2494                           ; BSR set to: 0
  2495                           
  2496                           ; BSR set to: 0
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;doprnt.c: 1138: break;
  2500  001B02  2B86               	incf	sprintf@c& (0+255),f,b
  2501  001B04  D7E4               	goto	l3051
  2502  001B06                     u3170:
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;doprnt.c: 1175: {
  2506                           ;doprnt.c: 1188: if(flag & 0x03)
  2507                           
  2508                           ; BSR set to: 0
  2509  001B06  0E03               	movlw	3
  2510  001B08  1575               	andwf	sprintf@flag& (0+255),w,b
  2511  001B0A  6F67               	movwf	??_sprintf& (0+255),b
  2512  001B0C  0E00               	movlw	0
  2513  001B0E  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  2514  001B10  6F68               	movwf	(??_sprintf+1)& (0+255),b
  2515  001B12  5167               	movf	??_sprintf& (0+255),w,b
  2516  001B14  1168               	iorwf	(??_sprintf+1)& (0+255),w,b
  2517  001B16  B4D8               	btfsc	status,2,c
  2518  001B18  D050               	goto	l307
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2522  001B1A  C060  FFD9         	movff	sprintf@sp,fsr2l
  2523  001B1E  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2524  001B22  0E2D               	movlw	45
  2525  001B24  D047               	goto	L4
  2526  001B26                     
  2527                           ; BSR set to: 0
  2528                           ;doprnt.c: 1200: {
  2529                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2530                           
  2531                           ; BSR set to: 0
  2532  001B26  C07B  F001         	movff	sprintf@val,___lldiv@dividend
  2533  001B2A  C07C  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2534  001B2E  C07D  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2535  001B32  C07E  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2536  001B36  5186               	movf	sprintf@c& (0+255),w,b
  2537  001B38  0D04               	mullw	4
  2538  001B3A  0E01               	movlw	low _dpowers
  2539  001B3C  24F3               	addwf	prodl,w,c
  2540  001B3E  6EF6               	movwf	tblptrl,c
  2541  001B40  0E10               	movlw	high _dpowers
  2542  001B42  20F4               	addwfc	prodh,w,c
  2543  001B44  6EF7               	movwf	tblptrh,c
  2544  001B46                     	if	0	;There are less than 3 active tblptr bytes
  2545  001B46                     	endif
  2546  001B46  0009               	tblrd		*+
  2547  001B48  CFF5 F005          	movff	tablat,___lldiv@divisor
  2548  001B4C  0009               	tblrd		*+
  2549  001B4E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2550  001B52  0009               	tblrd		*+
  2551  001B54  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2552  001B58  000A               	tblrd		*-
  2553  001B5A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2554  001B5E  ECF4  F016         	call	___lldiv	;wreg free
  2555  001B62  C001  F077         	movff	?___lldiv,sprintf@tmpval
  2556  001B66  C002  F078         	movff	?___lldiv+1,sprintf@tmpval+1
  2557  001B6A  C003  F079         	movff	?___lldiv+2,sprintf@tmpval+2
  2558  001B6E  C004  F07A         	movff	?___lldiv+3,sprintf@tmpval+3
  2559                           
  2560                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2561  001B72  C077  F001         	movff	sprintf@tmpval,___llmod@dividend
  2562  001B76  C078  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2563  001B7A  C079  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2564  001B7E  C07A  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2565  001B82  0E0A               	movlw	10
  2566  001B84  6E05               	movwf	___llmod@divisor,c
  2567  001B86  0E00               	movlw	0
  2568  001B88  6E06               	movwf	___llmod@divisor+1,c
  2569  001B8A  0E00               	movlw	0
  2570  001B8C  6E07               	movwf	___llmod@divisor+2,c
  2571  001B8E  0E00               	movlw	0
  2572  001B90  6E08               	movwf	___llmod@divisor+3,c
  2573  001B92  ECAD  F017         	call	___llmod	;wreg free
  2574  001B96  C001  F077         	movff	?___llmod,sprintf@tmpval
  2575  001B9A  C002  F078         	movff	?___llmod+1,sprintf@tmpval+1
  2576  001B9E  C003  F079         	movff	?___llmod+2,sprintf@tmpval+2
  2577  001BA2  C004  F07A         	movff	?___llmod+3,sprintf@tmpval+3
  2578                           
  2579                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2580  001BA6  0100               	movlb	0	; () banked
  2581  001BA8  5177               	movf	sprintf@tmpval& (0+255),w,b
  2582  001BAA  0F30               	addlw	48
  2583  001BAC  C060  FFD9         	movff	sprintf@sp,fsr2l
  2584  001BB0  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2585  001BB4                     L4:
  2586  001BB4  6EDF               	movwf	indf2,c
  2587                           
  2588                           ; BSR set to: 0
  2589  001BB6  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2590  001BB8  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2591  001BBA                     l307:
  2592                           
  2593                           ; BSR set to: 0
  2594                           
  2595                           ; BSR set to: 0
  2596  001BBA  0786               	decf	sprintf@c& (0+255),f,b
  2597  001BBC  2986               	incf	sprintf@c& (0+255),w,b
  2598  001BBE  B4D8               	btfsc	status,2,c
  2599  001BC0  D00C               	goto	l310
  2600  001BC2  D7B1               	goto	l308
  2601  001BC4                     l3079:
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2605  001BC4  C060  FFD9         	movff	sprintf@sp,fsr2l
  2606  001BC8  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2607  001BCC  0E30               	movlw	48
  2608  001BCE  6EDF               	movwf	indf2,c
  2609                           
  2610                           ; BSR set to: 0
  2611  001BD0  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2612  001BD2  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;doprnt.c: 1209: exp--;
  2616  001BD4  077F               	decf	sprintf@exp& (0+255),f,b
  2617  001BD6  A0D8               	btfss	status,0,c
  2618  001BD8  0780               	decf	(sprintf@exp+1)& (0+255),f,b
  2619  001BDA                     l310:
  2620                           
  2621                           ; BSR set to: 0
  2622                           
  2623                           ; BSR set to: 0
  2624  001BDA  BF80               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2625  001BDC  D005               	goto	u3200
  2626  001BDE  5180               	movf	(sprintf@exp+1)& (0+255),w,b
  2627  001BE0  E1F1               	bnz	l3079
  2628  001BE2  057F               	decf	sprintf@exp& (0+255),w,b
  2629  001BE4  B0D8               	btfsc	status,0,c
  2630  001BE6  D7EE               	goto	l311
  2631  001BE8                     u3200:
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;doprnt.c: 1210: }
  2635                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2636                           
  2637                           ; BSR set to: 0
  2638  001BE8  BF82               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2639  001BEA  D009               	goto	l313
  2640  001BEC  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  2641  001BEE  E104               	bnz	u3210
  2642  001BF0  0E09               	movlw	9
  2643  001BF2  5D81               	subwf	sprintf@prec& (0+255),w,b
  2644  001BF4  A0D8               	btfss	status,0,c
  2645  001BF6  D003               	goto	l313
  2646  001BF8                     u3210:
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2650  001BF8  0E08               	movlw	8
  2651  001BFA  6F86               	movwf	sprintf@c& (0+255),b
  2652  001BFC  D002               	goto	l314
  2653  001BFE                     l313:
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;doprnt.c: 1213: else
  2657                           ;doprnt.c: 1214: c = prec;
  2658  001BFE  C081  F086         	movff	sprintf@prec,sprintf@c
  2659  001C02                     l314:
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;doprnt.c: 1215: prec -= c;
  2663                           
  2664                           ; BSR set to: 0
  2665  001C02  5186               	movf	sprintf@c& (0+255),w,b
  2666  001C04  5F81               	subwf	sprintf@prec& (0+255),f,b
  2667  001C06  0E00               	movlw	0
  2668  001C08  BF86               	btfsc	sprintf@c& (0+255),7,b
  2669  001C0A  0EFF               	movlw	255
  2670  001C0C  5B82               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;doprnt.c: 1219: if(c)
  2674  001C0E  5186               	movf	sprintf@c& (0+255),w,b
  2675  001C10  B4D8               	btfsc	status,2,c
  2676  001C12  D008               	goto	l315
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2680  001C14  C060  FFD9         	movff	sprintf@sp,fsr2l
  2681  001C18  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2682  001C1C  0E2E               	movlw	46
  2683  001C1E  6EDF               	movwf	indf2,c
  2684                           
  2685                           ; BSR set to: 0
  2686  001C20  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2687  001C22  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2688  001C24                     l315:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2692                           
  2693                           ; BSR set to: 0
  2694  001C24  5186               	movf	sprintf@c& (0+255),w,b
  2695  001C26  EC11  F00F         	call	_scale
  2696  001C2A  C03F  F06D         	movff	?_scale,_sprintf$1163
  2697  001C2E  C040  F06E         	movff	?_scale+1,_sprintf$1163+1
  2698  001C32  C041  F06F         	movff	?_scale+2,_sprintf$1163+2
  2699                           
  2700                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2701  001C36  C083  F033         	movff	sprintf@fval,___ftmul@f2
  2702  001C3A  C084  F034         	movff	sprintf@fval+1,___ftmul@f2+1
  2703  001C3E  C085  F035         	movff	sprintf@fval+2,___ftmul@f2+2
  2704  001C42  C06D  F030         	movff	_sprintf$1163,___ftmul@f1
  2705  001C46  C06E  F031         	movff	_sprintf$1163+1,___ftmul@f1+1
  2706  001C4A  C06F  F032         	movff	_sprintf$1163+2,___ftmul@f1+2
  2707  001C4E  EC41  F014         	call	___ftmul	;wreg free
  2708  001C52  C030  F015         	movff	?___ftmul,___fttol@f1
  2709  001C56  C031  F016         	movff	?___ftmul+1,___fttol@f1+1
  2710  001C5A  C032  F017         	movff	?___ftmul+2,___fttol@f1+2
  2711  001C5E  ECBB  F014         	call	___fttol	;wreg free
  2712  001C62  C015  F07B         	movff	?___fttol,sprintf@val
  2713  001C66  C016  F07C         	movff	?___fttol+1,sprintf@val+1
  2714  001C6A  C017  F07D         	movff	?___fttol+2,sprintf@val+2
  2715  001C6E  C018  F07E         	movff	?___fttol+3,sprintf@val+3
  2716                           
  2717                           ;doprnt.c: 1228: while(c--) {
  2718  001C72  D071               	goto	l316
  2719  001C74                     
  2720                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2721  001C74  C07B  F001         	movff	sprintf@val,___lldiv@dividend
  2722  001C78  C07C  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2723  001C7C  C07D  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2724  001C80  C07E  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2725  001C84  0100               	movlb	0	; () banked
  2726  001C86  5186               	movf	sprintf@c& (0+255),w,b
  2727  001C88  0D04               	mullw	4
  2728  001C8A  0E01               	movlw	low _dpowers
  2729  001C8C  24F3               	addwf	prodl,w,c
  2730  001C8E  6EF6               	movwf	tblptrl,c
  2731  001C90  0E10               	movlw	high _dpowers
  2732  001C92  20F4               	addwfc	prodh,w,c
  2733  001C94  6EF7               	movwf	tblptrh,c
  2734  001C96                     	if	0	;There are less than 3 active tblptr bytes
  2735  001C96                     	endif
  2736  001C96  0009               	tblrd		*+
  2737  001C98  CFF5 F005          	movff	tablat,___lldiv@divisor
  2738  001C9C  0009               	tblrd		*+
  2739  001C9E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2740  001CA2  0009               	tblrd		*+
  2741  001CA4  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2742  001CA8  000A               	tblrd		*-
  2743  001CAA  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2744  001CAE  ECF4  F016         	call	___lldiv	;wreg free
  2745  001CB2  C001  F077         	movff	?___lldiv,sprintf@tmpval
  2746  001CB6  C002  F078         	movff	?___lldiv+1,sprintf@tmpval+1
  2747  001CBA  C003  F079         	movff	?___lldiv+2,sprintf@tmpval+2
  2748  001CBE  C004  F07A         	movff	?___lldiv+3,sprintf@tmpval+3
  2749                           
  2750                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2751  001CC2  C077  F001         	movff	sprintf@tmpval,___llmod@dividend
  2752  001CC6  C078  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2753  001CCA  C079  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2754  001CCE  C07A  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2755  001CD2  0E0A               	movlw	10
  2756  001CD4  6E05               	movwf	___llmod@divisor,c
  2757  001CD6  0E00               	movlw	0
  2758  001CD8  6E06               	movwf	___llmod@divisor+1,c
  2759  001CDA  0E00               	movlw	0
  2760  001CDC  6E07               	movwf	___llmod@divisor+2,c
  2761  001CDE  0E00               	movlw	0
  2762  001CE0  6E08               	movwf	___llmod@divisor+3,c
  2763  001CE2  ECAD  F017         	call	___llmod	;wreg free
  2764  001CE6  C001  F077         	movff	?___llmod,sprintf@tmpval
  2765  001CEA  C002  F078         	movff	?___llmod+1,sprintf@tmpval+1
  2766  001CEE  C003  F079         	movff	?___llmod+2,sprintf@tmpval+2
  2767  001CF2  C004  F07A         	movff	?___llmod+3,sprintf@tmpval+3
  2768                           
  2769                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2770  001CF6  0100               	movlb	0	; () banked
  2771  001CF8  5177               	movf	sprintf@tmpval& (0+255),w,b
  2772  001CFA  0F30               	addlw	48
  2773  001CFC  C060  FFD9         	movff	sprintf@sp,fsr2l
  2774  001D00  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2775  001D04  6EDF               	movwf	indf2,c
  2776                           
  2777                           ; BSR set to: 0
  2778  001D06  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2779  001D08  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;doprnt.c: 1232: val %= dpowers[c];
  2783  001D0A  C07B  F001         	movff	sprintf@val,___llmod@dividend
  2784  001D0E  C07C  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2785  001D12  C07D  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2786  001D16  C07E  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2787  001D1A  5186               	movf	sprintf@c& (0+255),w,b
  2788  001D1C  0D04               	mullw	4
  2789  001D1E  0E01               	movlw	low _dpowers
  2790  001D20  24F3               	addwf	prodl,w,c
  2791  001D22  6EF6               	movwf	tblptrl,c
  2792  001D24  0E10               	movlw	high _dpowers
  2793  001D26  20F4               	addwfc	prodh,w,c
  2794  001D28  6EF7               	movwf	tblptrh,c
  2795  001D2A                     	if	0	;There are less than 3 active tblptr bytes
  2796  001D2A                     	endif
  2797  001D2A  0009               	tblrd		*+
  2798  001D2C  CFF5 F005          	movff	tablat,___llmod@divisor
  2799  001D30  0009               	tblrd		*+
  2800  001D32  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2801  001D36  0009               	tblrd		*+
  2802  001D38  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2803  001D3C  000A               	tblrd		*-
  2804  001D3E  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2805  001D42  ECAD  F017         	call	___llmod	;wreg free
  2806  001D46  C001  F07B         	movff	?___llmod,sprintf@val
  2807  001D4A  C002  F07C         	movff	?___llmod+1,sprintf@val+1
  2808  001D4E  C003  F07D         	movff	?___llmod+2,sprintf@val+2
  2809  001D52  C004  F07E         	movff	?___llmod+3,sprintf@val+3
  2810  001D56                     l316:
  2811  001D56  0100               	movlb	0	; () banked
  2812  001D58  0786               	decf	sprintf@c& (0+255),f,b
  2813  001D5A  2986               	incf	sprintf@c& (0+255),w,b
  2814  001D5C  B4D8               	btfsc	status,2,c
  2815  001D5E  D00C               	goto	l319
  2816  001D60  D789               	goto	l317
  2817  001D62                     
  2818                           ; BSR set to: 0
  2819                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2820                           
  2821                           ; BSR set to: 0
  2822  001D62  C060  FFD9         	movff	sprintf@sp,fsr2l
  2823  001D66  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2824  001D6A  0E30               	movlw	48
  2825  001D6C  6EDF               	movwf	indf2,c
  2826                           
  2827                           ; BSR set to: 0
  2828  001D6E  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2829  001D70  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;doprnt.c: 1237: prec--;
  2833  001D72  0781               	decf	sprintf@prec& (0+255),f,b
  2834  001D74  A0D8               	btfss	status,0,c
  2835  001D76  0782               	decf	(sprintf@prec+1)& (0+255),f,b
  2836  001D78                     l319:
  2837                           
  2838                           ; BSR set to: 0
  2839                           
  2840                           ; BSR set to: 0
  2841  001D78  5181               	movf	sprintf@prec& (0+255),w,b
  2842  001D7A  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2843  001D7C  B4D8               	btfsc	status,2,c
  2844  001D7E  D03D               	goto	l326
  2845  001D80  D7F0               	goto	l320
  2846  001D82                     l248:
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;doprnt.c: 1246: }
  2850                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2851                           
  2852                           ; BSR set to: 0
  2853  001D82  5181               	movf	sprintf@prec& (0+255),w,b
  2854  001D84  1182               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2855  001D86  A4D8               	btfss	status,2,c
  2856  001D88  D008               	goto	l322
  2857                           
  2858                           ; BSR set to: 0
  2859  001D8A  517B               	movf	sprintf@val& (0+255),w,b
  2860  001D8C  117C               	iorwf	(sprintf@val+1)& (0+255),w,b
  2861  001D8E  117D               	iorwf	(sprintf@val+2)& (0+255),w,b
  2862  001D90  117E               	iorwf	(sprintf@val+3)& (0+255),w,b
  2863  001D92  A4D8               	btfss	status,2,c
  2864  001D94  D002               	goto	l322
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;doprnt.c: 1291: prec++;
  2868  001D96  4B81               	infsnz	sprintf@prec& (0+255),f,b
  2869  001D98  2B82               	incf	(sprintf@prec+1)& (0+255),f,b
  2870  001D9A                     l322:
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;doprnt.c: 1339: if(c < prec)
  2874                           
  2875                           ; BSR set to: 0
  2876  001D9A  0E80               	movlw	128
  2877  001D9C  BF86               	btfsc	sprintf@c& (0+255),7,b
  2878  001D9E  0E7F               	movlw	127
  2879  001DA0  6F67               	movwf	??_sprintf& (0+255),b
  2880  001DA2  5181               	movf	sprintf@prec& (0+255),w,b
  2881  001DA4  5D86               	subwf	sprintf@c& (0+255),w,b
  2882  001DA6  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  2883  001DA8  0A80               	xorlw	128
  2884  001DAA  5967               	subwfb	??_sprintf& (0+255),w,b
  2885  001DAC  B0D8               	btfsc	status,0,c
  2886  001DAE  D003               	goto	l323
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;doprnt.c: 1340: c = prec;
  2890  001DB0  C081  F086         	movff	sprintf@prec,sprintf@c
  2891  001DB4  D010               	goto	l325
  2892  001DB6                     l323:
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;doprnt.c: 1341: else if(prec < c)
  2896                           
  2897                           ; BSR set to: 0
  2898  001DB6  5182               	movf	(sprintf@prec+1)& (0+255),w,b
  2899  001DB8  0A80               	xorlw	128
  2900  001DBA  6F67               	movwf	??_sprintf& (0+255),b
  2901  001DBC  5186               	movf	sprintf@c& (0+255),w,b
  2902  001DBE  5D81               	subwf	sprintf@prec& (0+255),w,b
  2903  001DC0  0E80               	movlw	128
  2904  001DC2  BF86               	btfsc	sprintf@c& (0+255),7,b
  2905  001DC4  0E7F               	movlw	127
  2906  001DC6  5967               	subwfb	??_sprintf& (0+255),w,b
  2907  001DC8  B0D8               	btfsc	status,0,c
  2908  001DCA  D005               	goto	l325
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;doprnt.c: 1342: prec = c;
  2912  001DCC  5186               	movf	sprintf@c& (0+255),w,b
  2913  001DCE  6F81               	movwf	sprintf@prec& (0+255),b
  2914  001DD0  6B82               	clrf	(sprintf@prec+1)& (0+255),b
  2915  001DD2  BF81               	btfsc	sprintf@prec& (0+255),7,b
  2916  001DD4  0782               	decf	(sprintf@prec+1)& (0+255),f,b
  2917  001DD6                     l325:
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;doprnt.c: 1422: {
  2921                           ;doprnt.c: 1438: if(flag & 0x03)
  2922                           
  2923                           ; BSR set to: 0
  2924                           
  2925                           ; BSR set to: 0
  2926  001DD6  0E03               	movlw	3
  2927  001DD8  1575               	andwf	sprintf@flag& (0+255),w,b
  2928  001DDA  6F67               	movwf	??_sprintf& (0+255),b
  2929  001DDC  0E00               	movlw	0
  2930  001DDE  1576               	andwf	(sprintf@flag+1)& (0+255),w,b
  2931  001DE0  6F68               	movwf	(??_sprintf+1)& (0+255),b
  2932  001DE2  5167               	movf	??_sprintf& (0+255),w,b
  2933  001DE4  1168               	iorwf	(??_sprintf+1)& (0+255),w,b
  2934  001DE6  B4D8               	btfsc	status,2,c
  2935  001DE8  D008               	goto	l326
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2939  001DEA  C060  FFD9         	movff	sprintf@sp,fsr2l
  2940  001DEE  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2941  001DF2  0E2D               	movlw	45
  2942  001DF4  6EDF               	movwf	indf2,c
  2943  001DF6                     l3141:
  2944                           
  2945                           ; BSR set to: 0
  2946  001DF6  4B60               	infsnz	sprintf@sp& (0+255),f,b
  2947  001DF8  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  2948  001DFA                     l326:
  2949                           
  2950                           ; BSR set to: 0
  2951                           
  2952                           ; BSR set to: 0
  2953                           
  2954                           ; BSR set to: 0
  2955  001DFA  C062  FFF6         	movff	sprintf@f,tblptrl
  2956  001DFE  C063  FFF7         	movff	sprintf@f+1,tblptrh
  2957  001E02  4B62               	infsnz	sprintf@f& (0+255),f,b
  2958  001E04  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  2959  001E06                     	if	0	;tblptru may be non-zero
  2960  001E06                     	endif
  2961  001E06                     	if	0	;tblptru may be non-zero
  2962  001E06                     	endif
  2963  001E06  0008               	tblrd		*
  2964  001E08  CFF5 F086          	movff	tablat,sprintf@c
  2965  001E0C  5186               	movf	sprintf@c& (0+255),w,b
  2966  001E0E  A4D8               	btfss	status,2,c
  2967  001E10  EF4C  F008         	goto	l235
  2968  001E14                     u3300:
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;doprnt.c: 1538: *sp = 0;
  2972                           
  2973                           ; BSR set to: 0
  2974                           
  2975                           ;doprnt.c: 1469: }
  2976                           ;doprnt.c: 1533: }
  2977                           ;doprnt.c: 1535: alldone:
  2978                           
  2979                           ; BSR set to: 0
  2980  001E14  C060  FFD9         	movff	sprintf@sp,fsr2l
  2981  001E18  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  2982  001E1C  0E00               	movlw	0
  2983  001E1E  6EDF               	movwf	indf2,c
  2984  001E20  0012               	return	
  2985  001E22                     __end_of_sprintf:
  2986                           	opt stack 0
  2987                           tblptru	equ	0xFF8
  2988                           tblptrh	equ	0xFF7
  2989                           tblptrl	equ	0xFF6
  2990                           tablat	equ	0xFF5
  2991                           prodh	equ	0xFF4
  2992                           prodl	equ	0xFF3
  2993                           postinc0	equ	0xFEE
  2994                           wreg	equ	0xFE8
  2995                           indf2	equ	0xFDF
  2996                           postinc2	equ	0xFDE
  2997                           postdec2	equ	0xFDD
  2998                           fsr2h	equ	0xFDA
  2999                           fsr2l	equ	0xFD9
  3000                           status	equ	0xFD8
  3001                           
  3002 ;; *************** function _scale *****************
  3003 ;; Defined at:
  3004 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3005 ;; Parameters:    Size  Location     Type
  3006 ;;  scl             1    wreg     char 
  3007 ;; Auto vars:     Size  Location     Type
  3008 ;;  scl             1   68[COMRAM] char 
  3009 ;; Return value:  Size  Location     Type
  3010 ;;                  3   62[COMRAM] char 
  3011 ;; Registers used:
  3012 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3013 ;; Tracked objects:
  3014 ;;		On entry : 0/0
  3015 ;;		On exit  : 0/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3018 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3019 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3021 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3022 ;;Total ram usage:        7 bytes
  3023 ;; Hardware stack levels used:    1
  3024 ;; Hardware stack levels required when called:    2
  3025 ;; This function calls:
  3026 ;;		___awdiv
  3027 ;;		___awmod
  3028 ;;		___ftmul
  3029 ;;		___wmul
  3030 ;; This function is called by:
  3031 ;;		_sprintf
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           	psect	text2
  3036  001E22                     __ptext2:
  3037                           	opt stack 0
  3038  001E22                     _scale:
  3039                           	opt stack 27
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;incstack = 0
  3043                           ;scale@scl stored from wreg
  3044  001E22  6E45               	movwf	scale@scl,c
  3045                           
  3046                           ;doprnt.c: 428: if(scl < 0) {
  3047  001E24  AE45               	btfss	scale@scl,7,c
  3048  001E26  D101               	goto	l224
  3049                           
  3050                           ;doprnt.c: 429: scl = -scl;
  3051  001E28  6C45               	negf	scale@scl,c
  3052                           
  3053                           ;doprnt.c: 430: if(scl>=110)
  3054  001E2A  5045               	movf	scale@scl,w,c
  3055  001E2C  0A80               	xorlw	128
  3056  001E2E  0F12               	addlw	-238
  3057  001E30  A0D8               	btfss	status,0,c
  3058  001E32  D091               	goto	l225
  3059                           
  3060                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3061  001E34  0E00               	movlw	0
  3062  001E36  6E12               	movwf	___wmul@multiplicand+1,c
  3063  001E38  0E03               	movlw	3
  3064  001E3A  6E11               	movwf	___wmul@multiplicand,c
  3065  001E3C  0E00               	movlw	0
  3066  001E3E  6E0A               	movwf	___awdiv@divisor+1,c
  3067  001E40  0E0A               	movlw	10
  3068  001E42  6E09               	movwf	___awdiv@divisor,c
  3069  001E44  0E00               	movlw	0
  3070  001E46  6E04               	movwf	___awmod@divisor+1,c
  3071  001E48  0E64               	movlw	100
  3072  001E4A  6E03               	movwf	___awmod@divisor,c
  3073  001E4C  5045               	movf	scale@scl,w,c
  3074  001E4E  6E01               	movwf	___awmod@dividend,c
  3075  001E50  6A02               	clrf	___awmod@dividend+1,c
  3076  001E52  BE01               	btfsc	___awmod@dividend,7,c
  3077  001E54  0602               	decf	___awmod@dividend+1,f,c
  3078  001E56  EC75  F017         	call	___awmod	;wreg free
  3079  001E5A  C001  F007         	movff	?___awmod,___awdiv@dividend
  3080  001E5E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3081  001E62  ECB2  F016         	call	___awdiv	;wreg free
  3082  001E66  0E09               	movlw	9
  3083  001E68  2407               	addwf	?___awdiv,w,c
  3084  001E6A  6E0F               	movwf	___wmul@multiplier,c
  3085  001E6C  0E00               	movlw	0
  3086  001E6E  2008               	addwfc	?___awdiv+1,w,c
  3087  001E70  6E10               	movwf	___wmul@multiplier+1,c
  3088  001E72  ECE8  F018         	call	___wmul	;wreg free
  3089  001E76  0E50               	movlw	low __npowers_
  3090  001E78  240F               	addwf	?___wmul,w,c
  3091  001E7A  6EF6               	movwf	tblptrl,c
  3092  001E7C  0E10               	movlw	high __npowers_
  3093  001E7E  2010               	addwfc	?___wmul+1,w,c
  3094  001E80  6EF7               	movwf	tblptrh,c
  3095  001E82                     	if	0	;There are less than 3 active tblptr bytes
  3096  001E82                     	endif
  3097  001E82  0009               	tblrd		*+
  3098  001E84  CFF5 F033          	movff	tablat,___ftmul@f2
  3099  001E88  0009               	tblrd		*+
  3100  001E8A  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3101  001E8E  000A               	tblrd		*-
  3102  001E90  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3103  001E94  0E00               	movlw	0
  3104  001E96  6E0A               	movwf	___awdiv@divisor+1,c
  3105  001E98  0E64               	movlw	100
  3106  001E9A  6E09               	movwf	___awdiv@divisor,c
  3107  001E9C  5045               	movf	scale@scl,w,c
  3108  001E9E  6E07               	movwf	___awdiv@dividend,c
  3109  001EA0  6A08               	clrf	___awdiv@dividend+1,c
  3110  001EA2  BE07               	btfsc	___awdiv@dividend,7,c
  3111  001EA4  0608               	decf	___awdiv@dividend+1,f,c
  3112  001EA6  ECB2  F016         	call	___awdiv	;wreg free
  3113  001EAA  0E12               	movlw	18
  3114  001EAC  2407               	addwf	?___awdiv,w,c
  3115  001EAE  6E0F               	movwf	___wmul@multiplier,c
  3116  001EB0  0E00               	movlw	0
  3117  001EB2  2008               	addwfc	?___awdiv+1,w,c
  3118  001EB4  6E10               	movwf	___wmul@multiplier+1,c
  3119  001EB6  0E00               	movlw	0
  3120  001EB8  6E12               	movwf	___wmul@multiplicand+1,c
  3121  001EBA  0E03               	movlw	3
  3122  001EBC  6E11               	movwf	___wmul@multiplicand,c
  3123  001EBE  ECE8  F018         	call	___wmul	;wreg free
  3124  001EC2  0E50               	movlw	low __npowers_
  3125  001EC4  240F               	addwf	?___wmul,w,c
  3126  001EC6  6EF6               	movwf	tblptrl,c
  3127  001EC8  0E10               	movlw	high __npowers_
  3128  001ECA  2010               	addwfc	?___wmul+1,w,c
  3129  001ECC  6EF7               	movwf	tblptrh,c
  3130  001ECE                     	if	0	;There are less than 3 active tblptr bytes
  3131  001ECE                     	endif
  3132  001ECE  0009               	tblrd		*+
  3133  001ED0  CFF5 F030          	movff	tablat,___ftmul@f1
  3134  001ED4  0009               	tblrd		*+
  3135  001ED6  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3136  001EDA  000A               	tblrd		*-
  3137  001EDC  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3138  001EE0  EC41  F014         	call	___ftmul	;wreg free
  3139  001EE4  C030  F042         	movff	?___ftmul,_scale$1162
  3140  001EE8  C031  F043         	movff	?___ftmul+1,_scale$1162+1
  3141  001EEC  C032  F044         	movff	?___ftmul+2,_scale$1162+2
  3142                           
  3143                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3144  001EF0  C042  F030         	movff	_scale$1162,___ftmul@f1
  3145  001EF4  C043  F031         	movff	_scale$1162+1,___ftmul@f1+1
  3146  001EF8  C044  F032         	movff	_scale$1162+2,___ftmul@f1+2
  3147  001EFC  0E00               	movlw	0
  3148  001EFE  6E12               	movwf	___wmul@multiplicand+1,c
  3149  001F00  0E03               	movlw	3
  3150  001F02  6E11               	movwf	___wmul@multiplicand,c
  3151  001F04  0E00               	movlw	0
  3152  001F06  6E04               	movwf	___awmod@divisor+1,c
  3153  001F08  0E0A               	movlw	10
  3154  001F0A  6E03               	movwf	___awmod@divisor,c
  3155  001F0C  5045               	movf	scale@scl,w,c
  3156  001F0E  6E01               	movwf	___awmod@dividend,c
  3157  001F10  6A02               	clrf	___awmod@dividend+1,c
  3158  001F12  BE01               	btfsc	___awmod@dividend,7,c
  3159  001F14  0602               	decf	___awmod@dividend+1,f,c
  3160  001F16  EC75  F017         	call	___awmod	;wreg free
  3161  001F1A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3162  001F1E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3163  001F22  ECE8  F018         	call	___wmul	;wreg free
  3164  001F26  0E50               	movlw	low __npowers_
  3165  001F28  240F               	addwf	?___wmul,w,c
  3166  001F2A  6EF6               	movwf	tblptrl,c
  3167  001F2C  0E10               	movlw	high __npowers_
  3168  001F2E  2010               	addwfc	?___wmul+1,w,c
  3169  001F30  6EF7               	movwf	tblptrh,c
  3170  001F32                     	if	0	;There are less than 3 active tblptr bytes
  3171  001F32                     	endif
  3172  001F32  0009               	tblrd		*+
  3173  001F34  CFF5 F033          	movff	tablat,___ftmul@f2
  3174  001F38  0009               	tblrd		*+
  3175  001F3A  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3176  001F3E  000A               	tblrd		*-
  3177  001F40  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3178  001F44  EC41  F014         	call	___ftmul	;wreg free
  3179  001F48  C030  F03F         	movff	?___ftmul,?_scale
  3180  001F4C  C031  F040         	movff	?___ftmul+1,?_scale+1
  3181  001F50  C032  F041         	movff	?___ftmul+2,?_scale+2
  3182  001F54  0012               	return	
  3183  001F56                     l225:
  3184                           
  3185                           ;doprnt.c: 432: else if(scl > 10)
  3186  001F56  5045               	movf	scale@scl,w,c
  3187  001F58  0A80               	xorlw	128
  3188  001F5A  0F75               	addlw	-139
  3189  001F5C  A0D8               	btfss	status,0,c
  3190  001F5E  D053               	goto	l228
  3191                           
  3192                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3193  001F60  0E00               	movlw	0
  3194  001F62  6E0A               	movwf	___awdiv@divisor+1,c
  3195  001F64  0E0A               	movlw	10
  3196  001F66  6E09               	movwf	___awdiv@divisor,c
  3197  001F68  5045               	movf	scale@scl,w,c
  3198  001F6A  6E07               	movwf	___awdiv@dividend,c
  3199  001F6C  6A08               	clrf	___awdiv@dividend+1,c
  3200  001F6E  BE07               	btfsc	___awdiv@dividend,7,c
  3201  001F70  0608               	decf	___awdiv@dividend+1,f,c
  3202  001F72  ECB2  F016         	call	___awdiv	;wreg free
  3203  001F76  0E09               	movlw	9
  3204  001F78  2407               	addwf	?___awdiv,w,c
  3205  001F7A  6E0F               	movwf	___wmul@multiplier,c
  3206  001F7C  0E00               	movlw	0
  3207  001F7E  2008               	addwfc	?___awdiv+1,w,c
  3208  001F80  6E10               	movwf	___wmul@multiplier+1,c
  3209  001F82  0E00               	movlw	0
  3210  001F84  6E12               	movwf	___wmul@multiplicand+1,c
  3211  001F86  0E03               	movlw	3
  3212  001F88  6E11               	movwf	___wmul@multiplicand,c
  3213  001F8A  ECE8  F018         	call	___wmul	;wreg free
  3214  001F8E  0E50               	movlw	low __npowers_
  3215  001F90  240F               	addwf	?___wmul,w,c
  3216  001F92  6EF6               	movwf	tblptrl,c
  3217  001F94  0E10               	movlw	high __npowers_
  3218  001F96  2010               	addwfc	?___wmul+1,w,c
  3219  001F98  6EF7               	movwf	tblptrh,c
  3220  001F9A                     	if	0	;There are less than 3 active tblptr bytes
  3221  001F9A                     	endif
  3222  001F9A  0009               	tblrd		*+
  3223  001F9C  CFF5 F030          	movff	tablat,___ftmul@f1
  3224  001FA0  0009               	tblrd		*+
  3225  001FA2  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3226  001FA6  000A               	tblrd		*-
  3227  001FA8  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3228  001FAC  0E00               	movlw	0
  3229  001FAE  6E12               	movwf	___wmul@multiplicand+1,c
  3230  001FB0  0E03               	movlw	3
  3231  001FB2  6E11               	movwf	___wmul@multiplicand,c
  3232  001FB4  0E00               	movlw	0
  3233  001FB6  6E04               	movwf	___awmod@divisor+1,c
  3234  001FB8  0E0A               	movlw	10
  3235  001FBA  6E03               	movwf	___awmod@divisor,c
  3236  001FBC  5045               	movf	scale@scl,w,c
  3237  001FBE  6E01               	movwf	___awmod@dividend,c
  3238  001FC0  6A02               	clrf	___awmod@dividend+1,c
  3239  001FC2  BE01               	btfsc	___awmod@dividend,7,c
  3240  001FC4  0602               	decf	___awmod@dividend+1,f,c
  3241  001FC6  EC75  F017         	call	___awmod	;wreg free
  3242  001FCA  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3243  001FCE  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3244  001FD2  ECE8  F018         	call	___wmul	;wreg free
  3245  001FD6  0E50               	movlw	low __npowers_
  3246  001FD8  240F               	addwf	?___wmul,w,c
  3247  001FDA  6EF6               	movwf	tblptrl,c
  3248  001FDC  0E10               	movlw	high __npowers_
  3249  001FDE  2010               	addwfc	?___wmul+1,w,c
  3250  001FE0  6EF7               	movwf	tblptrh,c
  3251  001FE2                     	if	0	;There are less than 3 active tblptr bytes
  3252  001FE2                     	endif
  3253  001FE2  0009               	tblrd		*+
  3254  001FE4  CFF5 F033          	movff	tablat,___ftmul@f2
  3255  001FE8  0009               	tblrd		*+
  3256  001FEA  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3257  001FEE  000A               	tblrd		*-
  3258  001FF0  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3259  001FF4  EC41  F014         	call	___ftmul	;wreg free
  3260  001FF8  C030  F03F         	movff	?___ftmul,?_scale
  3261  001FFC  C031  F040         	movff	?___ftmul+1,?_scale+1
  3262  002000  C032  F041         	movff	?___ftmul+2,?_scale+2
  3263  002004  0012               	return	
  3264  002006                     l228:
  3265                           
  3266                           ;doprnt.c: 434: return _npowers_[scl];
  3267  002006  5045               	movf	scale@scl,w,c
  3268  002008  0D03               	mullw	3
  3269  00200A  0E50               	movlw	low __npowers_
  3270  00200C  24F3               	addwf	prodl,w,c
  3271  00200E  6EF6               	movwf	tblptrl,c
  3272  002010  0E10               	movlw	high __npowers_
  3273  002012  20F4               	addwfc	prodh,w,c
  3274  002014  6EF7               	movwf	tblptrh,c
  3275  002016                     	if	0	;There are less than 3 active tblptr bytes
  3276  002016                     	endif
  3277  002016  0009               	tblrd		*+
  3278  002018  CFF5 F03F          	movff	tablat,?_scale
  3279  00201C  0009               	tblrd		*+
  3280  00201E  CFF5 F040          	movff	tablat,?_scale+1
  3281  002022  000A               	tblrd		*-
  3282  002024  CFF5 F041          	movff	tablat,?_scale+2
  3283  002028  0012               	return	
  3284  00202A                     l224:
  3285                           
  3286                           ;doprnt.c: 435: }
  3287                           ;doprnt.c: 436: if(scl>=110)
  3288  00202A  5045               	movf	scale@scl,w,c
  3289  00202C  0A80               	xorlw	128
  3290  00202E  0F12               	addlw	-238
  3291  002030  A0D8               	btfss	status,0,c
  3292  002032  D091               	goto	l229
  3293                           
  3294                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3295  002034  0E00               	movlw	0
  3296  002036  6E12               	movwf	___wmul@multiplicand+1,c
  3297  002038  0E03               	movlw	3
  3298  00203A  6E11               	movwf	___wmul@multiplicand,c
  3299  00203C  0E00               	movlw	0
  3300  00203E  6E0A               	movwf	___awdiv@divisor+1,c
  3301  002040  0E0A               	movlw	10
  3302  002042  6E09               	movwf	___awdiv@divisor,c
  3303  002044  0E00               	movlw	0
  3304  002046  6E04               	movwf	___awmod@divisor+1,c
  3305  002048  0E64               	movlw	100
  3306  00204A  6E03               	movwf	___awmod@divisor,c
  3307  00204C  5045               	movf	scale@scl,w,c
  3308  00204E  6E01               	movwf	___awmod@dividend,c
  3309  002050  6A02               	clrf	___awmod@dividend+1,c
  3310  002052  BE01               	btfsc	___awmod@dividend,7,c
  3311  002054  0602               	decf	___awmod@dividend+1,f,c
  3312  002056  EC75  F017         	call	___awmod	;wreg free
  3313  00205A  C001  F007         	movff	?___awmod,___awdiv@dividend
  3314  00205E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3315  002062  ECB2  F016         	call	___awdiv	;wreg free
  3316  002066  0E09               	movlw	9
  3317  002068  2407               	addwf	?___awdiv,w,c
  3318  00206A  6E0F               	movwf	___wmul@multiplier,c
  3319  00206C  0E00               	movlw	0
  3320  00206E  2008               	addwfc	?___awdiv+1,w,c
  3321  002070  6E10               	movwf	___wmul@multiplier+1,c
  3322  002072  ECE8  F018         	call	___wmul	;wreg free
  3323  002076  0E29               	movlw	low __powers_
  3324  002078  240F               	addwf	?___wmul,w,c
  3325  00207A  6EF6               	movwf	tblptrl,c
  3326  00207C  0E10               	movlw	high __powers_
  3327  00207E  2010               	addwfc	?___wmul+1,w,c
  3328  002080  6EF7               	movwf	tblptrh,c
  3329  002082                     	if	0	;There are less than 3 active tblptr bytes
  3330  002082                     	endif
  3331  002082  0009               	tblrd		*+
  3332  002084  CFF5 F033          	movff	tablat,___ftmul@f2
  3333  002088  0009               	tblrd		*+
  3334  00208A  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3335  00208E  000A               	tblrd		*-
  3336  002090  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3337  002094  0E00               	movlw	0
  3338  002096  6E0A               	movwf	___awdiv@divisor+1,c
  3339  002098  0E64               	movlw	100
  3340  00209A  6E09               	movwf	___awdiv@divisor,c
  3341  00209C  5045               	movf	scale@scl,w,c
  3342  00209E  6E07               	movwf	___awdiv@dividend,c
  3343  0020A0  6A08               	clrf	___awdiv@dividend+1,c
  3344  0020A2  BE07               	btfsc	___awdiv@dividend,7,c
  3345  0020A4  0608               	decf	___awdiv@dividend+1,f,c
  3346  0020A6  ECB2  F016         	call	___awdiv	;wreg free
  3347  0020AA  0E12               	movlw	18
  3348  0020AC  2407               	addwf	?___awdiv,w,c
  3349  0020AE  6E0F               	movwf	___wmul@multiplier,c
  3350  0020B0  0E00               	movlw	0
  3351  0020B2  2008               	addwfc	?___awdiv+1,w,c
  3352  0020B4  6E10               	movwf	___wmul@multiplier+1,c
  3353  0020B6  0E00               	movlw	0
  3354  0020B8  6E12               	movwf	___wmul@multiplicand+1,c
  3355  0020BA  0E03               	movlw	3
  3356  0020BC  6E11               	movwf	___wmul@multiplicand,c
  3357  0020BE  ECE8  F018         	call	___wmul	;wreg free
  3358  0020C2  0E29               	movlw	low __powers_
  3359  0020C4  240F               	addwf	?___wmul,w,c
  3360  0020C6  6EF6               	movwf	tblptrl,c
  3361  0020C8  0E10               	movlw	high __powers_
  3362  0020CA  2010               	addwfc	?___wmul+1,w,c
  3363  0020CC  6EF7               	movwf	tblptrh,c
  3364  0020CE                     	if	0	;There are less than 3 active tblptr bytes
  3365  0020CE                     	endif
  3366  0020CE  0009               	tblrd		*+
  3367  0020D0  CFF5 F030          	movff	tablat,___ftmul@f1
  3368  0020D4  0009               	tblrd		*+
  3369  0020D6  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3370  0020DA  000A               	tblrd		*-
  3371  0020DC  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3372  0020E0  EC41  F014         	call	___ftmul	;wreg free
  3373  0020E4  C030  F042         	movff	?___ftmul,_scale$1162
  3374  0020E8  C031  F043         	movff	?___ftmul+1,_scale$1162+1
  3375  0020EC  C032  F044         	movff	?___ftmul+2,_scale$1162+2
  3376                           
  3377                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3378  0020F0  C042  F030         	movff	_scale$1162,___ftmul@f1
  3379  0020F4  C043  F031         	movff	_scale$1162+1,___ftmul@f1+1
  3380  0020F8  C044  F032         	movff	_scale$1162+2,___ftmul@f1+2
  3381  0020FC  0E00               	movlw	0
  3382  0020FE  6E12               	movwf	___wmul@multiplicand+1,c
  3383  002100  0E03               	movlw	3
  3384  002102  6E11               	movwf	___wmul@multiplicand,c
  3385  002104  0E00               	movlw	0
  3386  002106  6E04               	movwf	___awmod@divisor+1,c
  3387  002108  0E0A               	movlw	10
  3388  00210A  6E03               	movwf	___awmod@divisor,c
  3389  00210C  5045               	movf	scale@scl,w,c
  3390  00210E  6E01               	movwf	___awmod@dividend,c
  3391  002110  6A02               	clrf	___awmod@dividend+1,c
  3392  002112  BE01               	btfsc	___awmod@dividend,7,c
  3393  002114  0602               	decf	___awmod@dividend+1,f,c
  3394  002116  EC75  F017         	call	___awmod	;wreg free
  3395  00211A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3396  00211E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3397  002122  ECE8  F018         	call	___wmul	;wreg free
  3398  002126  0E29               	movlw	low __powers_
  3399  002128  240F               	addwf	?___wmul,w,c
  3400  00212A  6EF6               	movwf	tblptrl,c
  3401  00212C  0E10               	movlw	high __powers_
  3402  00212E  2010               	addwfc	?___wmul+1,w,c
  3403  002130  6EF7               	movwf	tblptrh,c
  3404  002132                     	if	0	;There are less than 3 active tblptr bytes
  3405  002132                     	endif
  3406  002132  0009               	tblrd		*+
  3407  002134  CFF5 F033          	movff	tablat,___ftmul@f2
  3408  002138  0009               	tblrd		*+
  3409  00213A  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3410  00213E  000A               	tblrd		*-
  3411  002140  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3412  002144  EC41  F014         	call	___ftmul	;wreg free
  3413  002148  C030  F03F         	movff	?___ftmul,?_scale
  3414  00214C  C031  F040         	movff	?___ftmul+1,?_scale+1
  3415  002150  C032  F041         	movff	?___ftmul+2,?_scale+2
  3416  002154  0012               	return	
  3417  002156                     l229:
  3418                           
  3419                           ;doprnt.c: 438: else if(scl > 10)
  3420  002156  5045               	movf	scale@scl,w,c
  3421  002158  0A80               	xorlw	128
  3422  00215A  0F75               	addlw	-139
  3423  00215C  A0D8               	btfss	status,0,c
  3424  00215E  D053               	goto	l231
  3425                           
  3426                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3427  002160  0E00               	movlw	0
  3428  002162  6E0A               	movwf	___awdiv@divisor+1,c
  3429  002164  0E0A               	movlw	10
  3430  002166  6E09               	movwf	___awdiv@divisor,c
  3431  002168  5045               	movf	scale@scl,w,c
  3432  00216A  6E07               	movwf	___awdiv@dividend,c
  3433  00216C  6A08               	clrf	___awdiv@dividend+1,c
  3434  00216E  BE07               	btfsc	___awdiv@dividend,7,c
  3435  002170  0608               	decf	___awdiv@dividend+1,f,c
  3436  002172  ECB2  F016         	call	___awdiv	;wreg free
  3437  002176  0E09               	movlw	9
  3438  002178  2407               	addwf	?___awdiv,w,c
  3439  00217A  6E0F               	movwf	___wmul@multiplier,c
  3440  00217C  0E00               	movlw	0
  3441  00217E  2008               	addwfc	?___awdiv+1,w,c
  3442  002180  6E10               	movwf	___wmul@multiplier+1,c
  3443  002182  0E00               	movlw	0
  3444  002184  6E12               	movwf	___wmul@multiplicand+1,c
  3445  002186  0E03               	movlw	3
  3446  002188  6E11               	movwf	___wmul@multiplicand,c
  3447  00218A  ECE8  F018         	call	___wmul	;wreg free
  3448  00218E  0E29               	movlw	low __powers_
  3449  002190  240F               	addwf	?___wmul,w,c
  3450  002192  6EF6               	movwf	tblptrl,c
  3451  002194  0E10               	movlw	high __powers_
  3452  002196  2010               	addwfc	?___wmul+1,w,c
  3453  002198  6EF7               	movwf	tblptrh,c
  3454  00219A                     	if	0	;There are less than 3 active tblptr bytes
  3455  00219A                     	endif
  3456  00219A  0009               	tblrd		*+
  3457  00219C  CFF5 F030          	movff	tablat,___ftmul@f1
  3458  0021A0  0009               	tblrd		*+
  3459  0021A2  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3460  0021A6  000A               	tblrd		*-
  3461  0021A8  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3462  0021AC  0E00               	movlw	0
  3463  0021AE  6E12               	movwf	___wmul@multiplicand+1,c
  3464  0021B0  0E03               	movlw	3
  3465  0021B2  6E11               	movwf	___wmul@multiplicand,c
  3466  0021B4  0E00               	movlw	0
  3467  0021B6  6E04               	movwf	___awmod@divisor+1,c
  3468  0021B8  0E0A               	movlw	10
  3469  0021BA  6E03               	movwf	___awmod@divisor,c
  3470  0021BC  5045               	movf	scale@scl,w,c
  3471  0021BE  6E01               	movwf	___awmod@dividend,c
  3472  0021C0  6A02               	clrf	___awmod@dividend+1,c
  3473  0021C2  BE01               	btfsc	___awmod@dividend,7,c
  3474  0021C4  0602               	decf	___awmod@dividend+1,f,c
  3475  0021C6  EC75  F017         	call	___awmod	;wreg free
  3476  0021CA  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3477  0021CE  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3478  0021D2  ECE8  F018         	call	___wmul	;wreg free
  3479  0021D6  0E29               	movlw	low __powers_
  3480  0021D8  240F               	addwf	?___wmul,w,c
  3481  0021DA  6EF6               	movwf	tblptrl,c
  3482  0021DC  0E10               	movlw	high __powers_
  3483  0021DE  2010               	addwfc	?___wmul+1,w,c
  3484  0021E0  6EF7               	movwf	tblptrh,c
  3485  0021E2                     	if	0	;There are less than 3 active tblptr bytes
  3486  0021E2                     	endif
  3487  0021E2  0009               	tblrd		*+
  3488  0021E4  CFF5 F033          	movff	tablat,___ftmul@f2
  3489  0021E8  0009               	tblrd		*+
  3490  0021EA  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3491  0021EE  000A               	tblrd		*-
  3492  0021F0  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3493  0021F4  EC41  F014         	call	___ftmul	;wreg free
  3494  0021F8  C030  F03F         	movff	?___ftmul,?_scale
  3495  0021FC  C031  F040         	movff	?___ftmul+1,?_scale+1
  3496  002200  C032  F041         	movff	?___ftmul+2,?_scale+2
  3497  002204  0012               	return	
  3498  002206                     l231:
  3499                           
  3500                           ;doprnt.c: 440: return _powers_[scl];
  3501  002206  5045               	movf	scale@scl,w,c
  3502  002208  0D03               	mullw	3
  3503  00220A  0E29               	movlw	low __powers_
  3504  00220C  24F3               	addwf	prodl,w,c
  3505  00220E  6EF6               	movwf	tblptrl,c
  3506  002210  0E10               	movlw	high __powers_
  3507  002212  20F4               	addwfc	prodh,w,c
  3508  002214  6EF7               	movwf	tblptrh,c
  3509  002216                     	if	0	;There are less than 3 active tblptr bytes
  3510  002216                     	endif
  3511  002216  0009               	tblrd		*+
  3512  002218  CFF5 F03F          	movff	tablat,?_scale
  3513  00221C  0009               	tblrd		*+
  3514  00221E  CFF5 F040          	movff	tablat,?_scale+1
  3515  002222  000A               	tblrd		*-
  3516  002224  CFF5 F041          	movff	tablat,?_scale+2
  3517  002228  0012               	return	
  3518  00222A                     __end_of_scale:
  3519                           	opt stack 0
  3520                           tblptru	equ	0xFF8
  3521                           tblptrh	equ	0xFF7
  3522                           tblptrl	equ	0xFF6
  3523                           tablat	equ	0xFF5
  3524                           prodh	equ	0xFF4
  3525                           prodl	equ	0xFF3
  3526                           postinc0	equ	0xFEE
  3527                           wreg	equ	0xFE8
  3528                           indf2	equ	0xFDF
  3529                           postinc2	equ	0xFDE
  3530                           postdec2	equ	0xFDD
  3531                           fsr2h	equ	0xFDA
  3532                           fsr2l	equ	0xFD9
  3533                           status	equ	0xFD8
  3534                           
  3535 ;; *************** function _isdigit *****************
  3536 ;; Defined at:
  3537 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;  c               1    wreg     unsigned char 
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;  c               1    2[COMRAM] unsigned char 
  3542 ;; Return value:  Size  Location     Type
  3543 ;;		None               void
  3544 ;; Registers used:
  3545 ;;		wreg, status,2, status,0
  3546 ;; Tracked objects:
  3547 ;;		On entry : 0/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3554 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3555 ;;Total ram usage:        3 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; This function calls:
  3558 ;;		Nothing
  3559 ;; This function is called by:
  3560 ;;		_sprintf
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text3
  3565  00323E                     __ptext3:
  3566                           	opt stack 0
  3567  00323E                     _isdigit:
  3568                           	opt stack 29
  3569                           
  3570                           ;incstack = 0
  3571                           ;isdigit@c stored from wreg
  3572  00323E  6E03               	movwf	isdigit@c,c
  3573  003240  0E00               	movlw	0
  3574  003242  6E02               	movwf	_isdigit$800,c
  3575  003244  0E3A               	movlw	58
  3576  003246  6003               	cpfslt	isdigit@c,c
  3577  003248  D005               	goto	l692
  3578  00324A  0E2F               	movlw	47
  3579  00324C  6403               	cpfsgt	isdigit@c,c
  3580  00324E  D002               	goto	l692
  3581  003250  0E01               	movlw	1
  3582  003252  6E02               	movwf	_isdigit$800,c
  3583  003254                     l692:
  3584  003254  C002  F001         	movff	_isdigit$800,??_isdigit
  3585  003258  3001               	rrcf	??_isdigit,w,c
  3586  00325A  0012               	return	
  3587  00325C                     __end_of_isdigit:
  3588                           	opt stack 0
  3589                           tblptru	equ	0xFF8
  3590                           tblptrh	equ	0xFF7
  3591                           tblptrl	equ	0xFF6
  3592                           tablat	equ	0xFF5
  3593                           prodh	equ	0xFF4
  3594                           prodl	equ	0xFF3
  3595                           postinc0	equ	0xFEE
  3596                           wreg	equ	0xFE8
  3597                           indf2	equ	0xFDF
  3598                           postinc2	equ	0xFDE
  3599                           postdec2	equ	0xFDD
  3600                           fsr2h	equ	0xFDA
  3601                           fsr2l	equ	0xFD9
  3602                           status	equ	0xFD8
  3603                           
  3604 ;; *************** function _fround *****************
  3605 ;; Defined at:
  3606 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;  prec            1    wreg     unsigned char 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  prec            1   71[COMRAM] unsigned char 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  3   62[COMRAM] unsigned char 
  3613 ;; Registers used:
  3614 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3620 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3621 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3623 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3624 ;;Total ram usage:       10 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    2
  3627 ;; This function calls:
  3628 ;;		___awdiv
  3629 ;;		___awmod
  3630 ;;		___ftmul
  3631 ;;		___wmul
  3632 ;; This function is called by:
  3633 ;;		_sprintf
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           	psect	text4
  3638  00222A                     __ptext4:
  3639                           	opt stack 0
  3640  00222A                     _fround:
  3641                           	opt stack 27
  3642                           
  3643                           ;incstack = 0
  3644                           ;fround@prec stored from wreg
  3645  00222A  6E48               	movwf	fround@prec,c
  3646                           
  3647                           ;doprnt.c: 413: if(prec>=110)
  3648  00222C  0E6D               	movlw	109
  3649  00222E  6448               	cpfsgt	fround@prec,c
  3650  002230  D09F               	goto	l218
  3651                           
  3652                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3653  002232  0E00               	movlw	0
  3654  002234  6E12               	movwf	___wmul@multiplicand+1,c
  3655  002236  0E03               	movlw	3
  3656  002238  6E11               	movwf	___wmul@multiplicand,c
  3657  00223A  0E00               	movlw	0
  3658  00223C  6E0A               	movwf	___awdiv@divisor+1,c
  3659  00223E  0E0A               	movlw	10
  3660  002240  6E09               	movwf	___awdiv@divisor,c
  3661  002242  0E00               	movlw	0
  3662  002244  6E04               	movwf	___awmod@divisor+1,c
  3663  002246  0E64               	movlw	100
  3664  002248  6E03               	movwf	___awmod@divisor,c
  3665  00224A  C048  F001         	movff	fround@prec,___awmod@dividend
  3666  00224E  6A02               	clrf	___awmod@dividend+1,c
  3667  002250  EC75  F017         	call	___awmod	;wreg free
  3668  002254  C001  F007         	movff	?___awmod,___awdiv@dividend
  3669  002258  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3670  00225C  ECB2  F016         	call	___awdiv	;wreg free
  3671  002260  0E09               	movlw	9
  3672  002262  2407               	addwf	?___awdiv,w,c
  3673  002264  6E0F               	movwf	___wmul@multiplier,c
  3674  002266  0E00               	movlw	0
  3675  002268  2008               	addwfc	?___awdiv+1,w,c
  3676  00226A  6E10               	movwf	___wmul@multiplier+1,c
  3677  00226C  ECE8  F018         	call	___wmul	;wreg free
  3678  002270  0E50               	movlw	low __npowers_
  3679  002272  240F               	addwf	?___wmul,w,c
  3680  002274  6EF6               	movwf	tblptrl,c
  3681  002276  0E10               	movlw	high __npowers_
  3682  002278  2010               	addwfc	?___wmul+1,w,c
  3683  00227A  6EF7               	movwf	tblptrh,c
  3684  00227C                     	if	0	;There are less than 3 active tblptr bytes
  3685  00227C                     	endif
  3686  00227C  0009               	tblrd		*+
  3687  00227E  CFF5 F033          	movff	tablat,___ftmul@f2
  3688  002282  0009               	tblrd		*+
  3689  002284  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3690  002288  000A               	tblrd		*-
  3691  00228A  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3692  00228E  0E00               	movlw	0
  3693  002290  6E0A               	movwf	___awdiv@divisor+1,c
  3694  002292  0E64               	movlw	100
  3695  002294  6E09               	movwf	___awdiv@divisor,c
  3696  002296  C048  F007         	movff	fround@prec,___awdiv@dividend
  3697  00229A  6A08               	clrf	___awdiv@dividend+1,c
  3698  00229C  ECB2  F016         	call	___awdiv	;wreg free
  3699  0022A0  0E12               	movlw	18
  3700  0022A2  2407               	addwf	?___awdiv,w,c
  3701  0022A4  6E0F               	movwf	___wmul@multiplier,c
  3702  0022A6  0E00               	movlw	0
  3703  0022A8  2008               	addwfc	?___awdiv+1,w,c
  3704  0022AA  6E10               	movwf	___wmul@multiplier+1,c
  3705  0022AC  0E00               	movlw	0
  3706  0022AE  6E12               	movwf	___wmul@multiplicand+1,c
  3707  0022B0  0E03               	movlw	3
  3708  0022B2  6E11               	movwf	___wmul@multiplicand,c
  3709  0022B4  ECE8  F018         	call	___wmul	;wreg free
  3710  0022B8  0E50               	movlw	low __npowers_
  3711  0022BA  240F               	addwf	?___wmul,w,c
  3712  0022BC  6EF6               	movwf	tblptrl,c
  3713  0022BE  0E10               	movlw	high __npowers_
  3714  0022C0  2010               	addwfc	?___wmul+1,w,c
  3715  0022C2  6EF7               	movwf	tblptrh,c
  3716  0022C4                     	if	0	;There are less than 3 active tblptr bytes
  3717  0022C4                     	endif
  3718  0022C4  0009               	tblrd		*+
  3719  0022C6  CFF5 F030          	movff	tablat,___ftmul@f1
  3720  0022CA  0009               	tblrd		*+
  3721  0022CC  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3722  0022D0  000A               	tblrd		*-
  3723  0022D2  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3724  0022D6  EC41  F014         	call	___ftmul	;wreg free
  3725  0022DA  C030  F045         	movff	?___ftmul,_fround$1160
  3726  0022DE  C031  F046         	movff	?___ftmul+1,_fround$1160+1
  3727  0022E2  C032  F047         	movff	?___ftmul+2,_fround$1160+2
  3728                           
  3729                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3730  0022E6  0E00               	movlw	0
  3731  0022E8  6E12               	movwf	___wmul@multiplicand+1,c
  3732  0022EA  0E03               	movlw	3
  3733  0022EC  6E11               	movwf	___wmul@multiplicand,c
  3734  0022EE  0E00               	movlw	0
  3735  0022F0  6E04               	movwf	___awmod@divisor+1,c
  3736  0022F2  0E0A               	movlw	10
  3737  0022F4  6E03               	movwf	___awmod@divisor,c
  3738  0022F6  C048  F001         	movff	fround@prec,___awmod@dividend
  3739  0022FA  6A02               	clrf	___awmod@dividend+1,c
  3740  0022FC  EC75  F017         	call	___awmod	;wreg free
  3741  002300  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3742  002304  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3743  002308  ECE8  F018         	call	___wmul	;wreg free
  3744  00230C  0E50               	movlw	low __npowers_
  3745  00230E  240F               	addwf	?___wmul,w,c
  3746  002310  6EF6               	movwf	tblptrl,c
  3747  002312  0E10               	movlw	high __npowers_
  3748  002314  2010               	addwfc	?___wmul+1,w,c
  3749  002316  6EF7               	movwf	tblptrh,c
  3750  002318                     	if	0	;There are less than 3 active tblptr bytes
  3751  002318                     	endif
  3752  002318  0009               	tblrd		*+
  3753  00231A  CFF5 F033          	movff	tablat,___ftmul@f2
  3754  00231E  0009               	tblrd		*+
  3755  002320  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3756  002324  000A               	tblrd		*-
  3757  002326  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3758  00232A  C045  F030         	movff	_fround$1160,___ftmul@f1
  3759  00232E  C046  F031         	movff	_fround$1160+1,___ftmul@f1+1
  3760  002332  C047  F032         	movff	_fround$1160+2,___ftmul@f1+2
  3761  002336  EC41  F014         	call	___ftmul	;wreg free
  3762  00233A  C030  F042         	movff	?___ftmul,_fround$1161
  3763  00233E  C031  F043         	movff	?___ftmul+1,_fround$1161+1
  3764  002342  C032  F044         	movff	?___ftmul+2,_fround$1161+2
  3765                           
  3766                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3767  002346  C042  F030         	movff	_fround$1161,___ftmul@f1
  3768  00234A  C043  F031         	movff	_fround$1161+1,___ftmul@f1+1
  3769  00234E  C044  F032         	movff	_fround$1161+2,___ftmul@f1+2
  3770  002352  0E00               	movlw	0
  3771  002354  6E33               	movwf	___ftmul@f2,c
  3772  002356  0E00               	movlw	0
  3773  002358  6E34               	movwf	___ftmul@f2+1,c
  3774  00235A  0E3F               	movlw	63
  3775  00235C  6E35               	movwf	___ftmul@f2+2,c
  3776  00235E  EC41  F014         	call	___ftmul	;wreg free
  3777  002362  C030  F03F         	movff	?___ftmul,?_fround
  3778  002366  C031  F040         	movff	?___ftmul+1,?_fround+1
  3779  00236A  C032  F041         	movff	?___ftmul+2,?_fround+2
  3780  00236E  0012               	return	
  3781  002370                     l218:
  3782                           
  3783                           ;doprnt.c: 415: else if(prec > 10)
  3784  002370  0E0A               	movlw	10
  3785  002372  6448               	cpfsgt	fround@prec,c
  3786  002374  D063               	goto	l221
  3787                           
  3788                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3789  002376  0E00               	movlw	0
  3790  002378  6E12               	movwf	___wmul@multiplicand+1,c
  3791  00237A  0E03               	movlw	3
  3792  00237C  6E11               	movwf	___wmul@multiplicand,c
  3793  00237E  0E00               	movlw	0
  3794  002380  6E04               	movwf	___awmod@divisor+1,c
  3795  002382  0E0A               	movlw	10
  3796  002384  6E03               	movwf	___awmod@divisor,c
  3797  002386  C048  F001         	movff	fround@prec,___awmod@dividend
  3798  00238A  6A02               	clrf	___awmod@dividend+1,c
  3799  00238C  EC75  F017         	call	___awmod	;wreg free
  3800  002390  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3801  002394  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3802  002398  ECE8  F018         	call	___wmul	;wreg free
  3803  00239C  0E50               	movlw	low __npowers_
  3804  00239E  240F               	addwf	?___wmul,w,c
  3805  0023A0  6EF6               	movwf	tblptrl,c
  3806  0023A2  0E10               	movlw	high __npowers_
  3807  0023A4  2010               	addwfc	?___wmul+1,w,c
  3808  0023A6  6EF7               	movwf	tblptrh,c
  3809  0023A8                     	if	0	;There are less than 3 active tblptr bytes
  3810  0023A8                     	endif
  3811  0023A8  0009               	tblrd		*+
  3812  0023AA  CFF5 F033          	movff	tablat,___ftmul@f2
  3813  0023AE  0009               	tblrd		*+
  3814  0023B0  CFF5 F034          	movff	tablat,___ftmul@f2+1
  3815  0023B4  000A               	tblrd		*-
  3816  0023B6  CFF5 F035          	movff	tablat,___ftmul@f2+2
  3817  0023BA  0E00               	movlw	0
  3818  0023BC  6E0A               	movwf	___awdiv@divisor+1,c
  3819  0023BE  0E0A               	movlw	10
  3820  0023C0  6E09               	movwf	___awdiv@divisor,c
  3821  0023C2  C048  F007         	movff	fround@prec,___awdiv@dividend
  3822  0023C6  6A08               	clrf	___awdiv@dividend+1,c
  3823  0023C8  ECB2  F016         	call	___awdiv	;wreg free
  3824  0023CC  0E09               	movlw	9
  3825  0023CE  2407               	addwf	?___awdiv,w,c
  3826  0023D0  6E0F               	movwf	___wmul@multiplier,c
  3827  0023D2  0E00               	movlw	0
  3828  0023D4  2008               	addwfc	?___awdiv+1,w,c
  3829  0023D6  6E10               	movwf	___wmul@multiplier+1,c
  3830  0023D8  0E00               	movlw	0
  3831  0023DA  6E12               	movwf	___wmul@multiplicand+1,c
  3832  0023DC  0E03               	movlw	3
  3833  0023DE  6E11               	movwf	___wmul@multiplicand,c
  3834  0023E0  ECE8  F018         	call	___wmul	;wreg free
  3835  0023E4  0E50               	movlw	low __npowers_
  3836  0023E6  240F               	addwf	?___wmul,w,c
  3837  0023E8  6EF6               	movwf	tblptrl,c
  3838  0023EA  0E10               	movlw	high __npowers_
  3839  0023EC  2010               	addwfc	?___wmul+1,w,c
  3840  0023EE  6EF7               	movwf	tblptrh,c
  3841  0023F0                     	if	0	;There are less than 3 active tblptr bytes
  3842  0023F0                     	endif
  3843  0023F0  0009               	tblrd		*+
  3844  0023F2  CFF5 F030          	movff	tablat,___ftmul@f1
  3845  0023F6  0009               	tblrd		*+
  3846  0023F8  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3847  0023FC  000A               	tblrd		*-
  3848  0023FE  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3849  002402  EC41  F014         	call	___ftmul	;wreg free
  3850  002406  C030  F045         	movff	?___ftmul,_fround$1160
  3851  00240A  C031  F046         	movff	?___ftmul+1,_fround$1160+1
  3852  00240E  C032  F047         	movff	?___ftmul+2,_fround$1160+2
  3853                           
  3854                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3855  002412  C045  F030         	movff	_fround$1160,___ftmul@f1
  3856  002416  C046  F031         	movff	_fround$1160+1,___ftmul@f1+1
  3857  00241A  C047  F032         	movff	_fround$1160+2,___ftmul@f1+2
  3858  00241E  0E00               	movlw	0
  3859  002420  6E33               	movwf	___ftmul@f2,c
  3860  002422  0E00               	movlw	0
  3861  002424  6E34               	movwf	___ftmul@f2+1,c
  3862  002426  0E3F               	movlw	63
  3863  002428  6E35               	movwf	___ftmul@f2+2,c
  3864  00242A  EC41  F014         	call	___ftmul	;wreg free
  3865  00242E  C030  F03F         	movff	?___ftmul,?_fround
  3866  002432  C031  F040         	movff	?___ftmul+1,?_fround+1
  3867  002436  C032  F041         	movff	?___ftmul+2,?_fround+2
  3868  00243A  0012               	return	
  3869  00243C                     l221:
  3870                           
  3871                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3872  00243C  5048               	movf	fround@prec,w,c
  3873  00243E  0D03               	mullw	3
  3874  002440  0E50               	movlw	low __npowers_
  3875  002442  24F3               	addwf	prodl,w,c
  3876  002444  6EF6               	movwf	tblptrl,c
  3877  002446  0E10               	movlw	high __npowers_
  3878  002448  20F4               	addwfc	prodh,w,c
  3879  00244A  6EF7               	movwf	tblptrh,c
  3880  00244C                     	if	0	;There are less than 3 active tblptr bytes
  3881  00244C                     	endif
  3882  00244C  0009               	tblrd		*+
  3883  00244E  CFF5 F030          	movff	tablat,___ftmul@f1
  3884  002452  0009               	tblrd		*+
  3885  002454  CFF5 F031          	movff	tablat,___ftmul@f1+1
  3886  002458  000A               	tblrd		*-
  3887  00245A  CFF5 F032          	movff	tablat,___ftmul@f1+2
  3888  00245E  0E00               	movlw	0
  3889  002460  6E33               	movwf	___ftmul@f2,c
  3890  002462  0E00               	movlw	0
  3891  002464  6E34               	movwf	___ftmul@f2+1,c
  3892  002466  0E3F               	movlw	63
  3893  002468  6E35               	movwf	___ftmul@f2+2,c
  3894  00246A  EC41  F014         	call	___ftmul	;wreg free
  3895  00246E  C030  F03F         	movff	?___ftmul,?_fround
  3896  002472  C031  F040         	movff	?___ftmul+1,?_fround+1
  3897  002476  C032  F041         	movff	?___ftmul+2,?_fround+2
  3898  00247A  0012               	return	
  3899  00247C                     __end_of_fround:
  3900                           	opt stack 0
  3901                           tblptru	equ	0xFF8
  3902                           tblptrh	equ	0xFF7
  3903                           tblptrl	equ	0xFF6
  3904                           tablat	equ	0xFF5
  3905                           prodh	equ	0xFF4
  3906                           prodl	equ	0xFF3
  3907                           postinc0	equ	0xFEE
  3908                           wreg	equ	0xFE8
  3909                           indf2	equ	0xFDF
  3910                           postinc2	equ	0xFDE
  3911                           postdec2	equ	0xFDD
  3912                           fsr2h	equ	0xFDA
  3913                           fsr2l	equ	0xFD9
  3914                           status	equ	0xFD8
  3915                           
  3916 ;; *************** function ___wmul *****************
  3917 ;; Defined at:
  3918 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;  multiplier      2   14[COMRAM] unsigned int 
  3921 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;  product         2   18[COMRAM] unsigned int 
  3924 ;; Return value:  Size  Location     Type
  3925 ;;                  2   14[COMRAM] unsigned int 
  3926 ;; Registers used:
  3927 ;;		wreg, status,2, status,0, prodl, prodh
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3933 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3934 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3936 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;Total ram usage:        6 bytes
  3938 ;; Hardware stack levels used:    1
  3939 ;; This function calls:
  3940 ;;		Nothing
  3941 ;; This function is called by:
  3942 ;;		_fround
  3943 ;;		_scale
  3944 ;;		_sprintf
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           	psect	text5
  3949  0031D0                     __ptext5:
  3950                           	opt stack 0
  3951  0031D0                     ___wmul:
  3952                           	opt stack 28
  3953                           
  3954                           ;incstack = 0
  3955  0031D0  500F               	movf	___wmul@multiplier,w,c
  3956  0031D2  0211               	mulwf	___wmul@multiplicand,c
  3957  0031D4  CFF3 F013          	movff	prodl,___wmul@product
  3958  0031D8  CFF4 F014          	movff	prodh,___wmul@product+1
  3959  0031DC  500F               	movf	___wmul@multiplier,w,c
  3960  0031DE  0212               	mulwf	___wmul@multiplicand+1,c
  3961  0031E0  50F3               	movf	prodl,w,c
  3962  0031E2  2614               	addwf	___wmul@product+1,f,c
  3963  0031E4  5010               	movf	___wmul@multiplier+1,w,c
  3964  0031E6  0211               	mulwf	___wmul@multiplicand,c
  3965  0031E8  50F3               	movf	prodl,w,c
  3966  0031EA  2614               	addwf	___wmul@product+1,f,c
  3967  0031EC  C013  F00F         	movff	___wmul@product,?___wmul
  3968  0031F0  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3969  0031F4  0012               	return	
  3970  0031F6                     __end_of___wmul:
  3971                           	opt stack 0
  3972                           tblptru	equ	0xFF8
  3973                           tblptrh	equ	0xFF7
  3974                           tblptrl	equ	0xFF6
  3975                           tablat	equ	0xFF5
  3976                           prodh	equ	0xFF4
  3977                           prodl	equ	0xFF3
  3978                           postinc0	equ	0xFEE
  3979                           wreg	equ	0xFE8
  3980                           indf2	equ	0xFDF
  3981                           postinc2	equ	0xFDE
  3982                           postdec2	equ	0xFDD
  3983                           fsr2h	equ	0xFDA
  3984                           fsr2l	equ	0xFD9
  3985                           status	equ	0xFD8
  3986                           
  3987 ;; *************** function ___ftmul *****************
  3988 ;; Defined at:
  3989 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;  f1              3   47[COMRAM] float 
  3992 ;;  f2              3   50[COMRAM] float 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  f3_as_produc    3   57[COMRAM] unsigned um
  3995 ;;  sign            1   61[COMRAM] unsigned char 
  3996 ;;  cntr            1   60[COMRAM] unsigned char 
  3997 ;;  exp             1   56[COMRAM] unsigned char 
  3998 ;; Return value:  Size  Location     Type
  3999 ;;                  3   47[COMRAM] float 
  4000 ;; Registers used:
  4001 ;;		wreg, status,2, status,0, cstack
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4007 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4008 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4009 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4010 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4011 ;;Total ram usage:       15 bytes
  4012 ;; Hardware stack levels used:    1
  4013 ;; Hardware stack levels required when called:    1
  4014 ;; This function calls:
  4015 ;;		___ftpack
  4016 ;; This function is called by:
  4017 ;;		_main
  4018 ;;		_fround
  4019 ;;		_scale
  4020 ;;		_sprintf
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           	psect	text6
  4025  002882                     __ptext6:
  4026                           	opt stack 0
  4027  002882                     ___ftmul:
  4028                           	opt stack 27
  4029                           
  4030                           ;incstack = 0
  4031  002882  C032  F036         	movff	___ftmul@f1+2,??___ftmul
  4032  002886  6A37               	clrf	(??___ftmul+1)& (0+255),c
  4033  002888  6A38               	clrf	(??___ftmul+2)& (0+255),c
  4034  00288A  3431               	rlcf	___ftmul@f1+1,w,c
  4035  00288C  3636               	rlcf	??___ftmul& (0+255),f,c
  4036  00288E  E301               	bnc	u1991
  4037  002890  8037               	bsf	(??___ftmul+1)& (0+255),0,c
  4038  002892                     u1991:
  4039  002892  5036               	movf	??___ftmul,w,c
  4040  002894  6E39               	movwf	___ftmul@exp,c
  4041  002896  5039               	movf	___ftmul@exp,w,c
  4042  002898  A4D8               	btfss	status,2,c
  4043  00289A  D007               	goto	l656
  4044  00289C  0E00               	movlw	0
  4045  00289E  6E30               	movwf	?___ftmul,c
  4046  0028A0  0E00               	movlw	0
  4047  0028A2  6E31               	movwf	?___ftmul+1,c
  4048  0028A4  0E00               	movlw	0
  4049  0028A6  6E32               	movwf	?___ftmul+2,c
  4050  0028A8  0012               	return	
  4051  0028AA                     l656:
  4052  0028AA  C035  F036         	movff	___ftmul@f2+2,??___ftmul
  4053  0028AE  6A37               	clrf	(??___ftmul+1)& (0+255),c
  4054  0028B0  6A38               	clrf	(??___ftmul+2)& (0+255),c
  4055  0028B2  3434               	rlcf	___ftmul@f2+1,w,c
  4056  0028B4  3636               	rlcf	??___ftmul& (0+255),f,c
  4057  0028B6  E301               	bnc	u2011
  4058  0028B8  8037               	bsf	(??___ftmul+1)& (0+255),0,c
  4059  0028BA                     u2011:
  4060  0028BA  5036               	movf	??___ftmul,w,c
  4061  0028BC  6E3E               	movwf	___ftmul@sign,c
  4062  0028BE  503E               	movf	___ftmul@sign,w,c
  4063  0028C0  A4D8               	btfss	status,2,c
  4064  0028C2  D007               	goto	l658
  4065  0028C4  0E00               	movlw	0
  4066  0028C6  6E30               	movwf	?___ftmul,c
  4067  0028C8  0E00               	movlw	0
  4068  0028CA  6E31               	movwf	?___ftmul+1,c
  4069  0028CC  0E00               	movlw	0
  4070  0028CE  6E32               	movwf	?___ftmul+2,c
  4071  0028D0  0012               	return	
  4072  0028D2                     l658:
  4073  0028D2  503E               	movf	___ftmul@sign,w,c
  4074  0028D4  0F7B               	addlw	123
  4075  0028D6  2639               	addwf	___ftmul@exp,f,c
  4076  0028D8  C032  F03E         	movff	___ftmul@f1+2,___ftmul@sign
  4077  0028DC  5035               	movf	___ftmul@f2+2,w,c
  4078  0028DE  1A3E               	xorwf	___ftmul@sign,f,c
  4079  0028E0  0E80               	movlw	128
  4080  0028E2  163E               	andwf	___ftmul@sign,f,c
  4081  0028E4  8E31               	bsf	___ftmul@f1+1,7,c
  4082  0028E6  8E34               	bsf	___ftmul@f2+1,7,c
  4083  0028E8  0EFF               	movlw	255
  4084  0028EA  1633               	andwf	___ftmul@f2,f,c
  4085  0028EC  0EFF               	movlw	255
  4086  0028EE  1634               	andwf	___ftmul@f2+1,f,c
  4087  0028F0  0E00               	movlw	0
  4088  0028F2  1635               	andwf	___ftmul@f2+2,f,c
  4089  0028F4  0E00               	movlw	0
  4090  0028F6  6E3A               	movwf	___ftmul@f3_as_product,c
  4091  0028F8  0E00               	movlw	0
  4092  0028FA  6E3B               	movwf	___ftmul@f3_as_product+1,c
  4093  0028FC  0E00               	movlw	0
  4094  0028FE  6E3C               	movwf	___ftmul@f3_as_product+2,c
  4095  002900  0E07               	movlw	7
  4096  002902  6E3D               	movwf	___ftmul@cntr,c
  4097  002904  A030               	btfss	___ftmul@f1,0,c
  4098  002906  D006               	goto	l660
  4099  002908  5033               	movf	___ftmul@f2,w,c
  4100  00290A  263A               	addwf	___ftmul@f3_as_product,f,c
  4101  00290C  5034               	movf	___ftmul@f2+1,w,c
  4102  00290E  223B               	addwfc	___ftmul@f3_as_product+1,f,c
  4103  002910  5035               	movf	___ftmul@f2+2,w,c
  4104  002912  223C               	addwfc	___ftmul@f3_as_product+2,f,c
  4105  002914                     l660:
  4106  002914  90D8               	bcf	status,0,c
  4107  002916  3232               	rrcf	___ftmul@f1+2,f,c
  4108  002918  3231               	rrcf	___ftmul@f1+1,f,c
  4109  00291A  3230               	rrcf	___ftmul@f1,f,c
  4110  00291C  90D8               	bcf	status,0,c
  4111  00291E  3633               	rlcf	___ftmul@f2,f,c
  4112  002920  3634               	rlcf	___ftmul@f2+1,f,c
  4113  002922  3635               	rlcf	___ftmul@f2+2,f,c
  4114  002924  2E3D               	decfsz	___ftmul@cntr,f,c
  4115  002926  D7EE               	goto	l659
  4116  002928  0E09               	movlw	9
  4117  00292A  6E3D               	movwf	___ftmul@cntr,c
  4118  00292C  A030               	btfss	___ftmul@f1,0,c
  4119  00292E  D006               	goto	l663
  4120  002930  5033               	movf	___ftmul@f2,w,c
  4121  002932  263A               	addwf	___ftmul@f3_as_product,f,c
  4122  002934  5034               	movf	___ftmul@f2+1,w,c
  4123  002936  223B               	addwfc	___ftmul@f3_as_product+1,f,c
  4124  002938  5035               	movf	___ftmul@f2+2,w,c
  4125  00293A  223C               	addwfc	___ftmul@f3_as_product+2,f,c
  4126  00293C                     l663:
  4127  00293C  90D8               	bcf	status,0,c
  4128  00293E  3232               	rrcf	___ftmul@f1+2,f,c
  4129  002940  3231               	rrcf	___ftmul@f1+1,f,c
  4130  002942  3230               	rrcf	___ftmul@f1,f,c
  4131  002944  90D8               	bcf	status,0,c
  4132  002946  323C               	rrcf	___ftmul@f3_as_product+2,f,c
  4133  002948  323B               	rrcf	___ftmul@f3_as_product+1,f,c
  4134  00294A  323A               	rrcf	___ftmul@f3_as_product,f,c
  4135  00294C  2E3D               	decfsz	___ftmul@cntr,f,c
  4136  00294E  D7EE               	goto	l662
  4137  002950  C03A  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4138  002954  C03B  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4139  002958  C03C  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4140  00295C  C039  F004         	movff	___ftmul@exp,___ftpack@exp
  4141  002960  C03E  F005         	movff	___ftmul@sign,___ftpack@sign
  4142  002964  EC13  F016         	call	___ftpack	;wreg free
  4143  002968  C001  F030         	movff	?___ftpack,?___ftmul
  4144  00296C  C002  F031         	movff	?___ftpack+1,?___ftmul+1
  4145  002970  C003  F032         	movff	?___ftpack+2,?___ftmul+2
  4146  002974  0012               	return	
  4147  002976                     __end_of___ftmul:
  4148                           	opt stack 0
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           prodh	equ	0xFF4
  4154                           prodl	equ	0xFF3
  4155                           postinc0	equ	0xFEE
  4156                           wreg	equ	0xFE8
  4157                           indf2	equ	0xFDF
  4158                           postinc2	equ	0xFDE
  4159                           postdec2	equ	0xFDD
  4160                           fsr2h	equ	0xFDA
  4161                           fsr2l	equ	0xFD9
  4162                           status	equ	0xFD8
  4163                           
  4164 ;; *************** function ___awmod *****************
  4165 ;; Defined at:
  4166 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;  dividend        2    0[COMRAM] int 
  4169 ;;  divisor         2    2[COMRAM] int 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;  sign            1    5[COMRAM] unsigned char 
  4172 ;;  counter         1    4[COMRAM] unsigned char 
  4173 ;; Return value:  Size  Location     Type
  4174 ;;                  2    0[COMRAM] int 
  4175 ;; Registers used:
  4176 ;;		wreg, status,2, status,0
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4182 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4183 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4185 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;Total ram usage:        6 bytes
  4187 ;; Hardware stack levels used:    1
  4188 ;; This function calls:
  4189 ;;		Nothing
  4190 ;; This function is called by:
  4191 ;;		_fround
  4192 ;;		_scale
  4193 ;;		_sprintf
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           	psect	text7
  4198  002EEA                     __ptext7:
  4199                           	opt stack 0
  4200  002EEA                     ___awmod:
  4201                           	opt stack 28
  4202                           
  4203                           ;incstack = 0
  4204  002EEA  0E00               	movlw	0
  4205  002EEC  6E06               	movwf	___awmod@sign,c
  4206  002EEE  AE02               	btfss	___awmod@dividend+1,7,c
  4207  002EF0  D006               	goto	l509
  4208  002EF2  6C01               	negf	___awmod@dividend,c
  4209  002EF4  1E02               	comf	___awmod@dividend+1,f,c
  4210  002EF6  B0D8               	btfsc	status,0,c
  4211  002EF8  2A02               	incf	___awmod@dividend+1,f,c
  4212  002EFA  0E01               	movlw	1
  4213  002EFC  6E06               	movwf	___awmod@sign,c
  4214  002EFE                     l509:
  4215  002EFE  AE04               	btfss	___awmod@divisor+1,7,c
  4216  002F00  D004               	goto	l510
  4217  002F02  6C03               	negf	___awmod@divisor,c
  4218  002F04  1E04               	comf	___awmod@divisor+1,f,c
  4219  002F06  B0D8               	btfsc	status,0,c
  4220  002F08  2A04               	incf	___awmod@divisor+1,f,c
  4221  002F0A                     l510:
  4222  002F0A  5003               	movf	___awmod@divisor,w,c
  4223  002F0C  1004               	iorwf	___awmod@divisor+1,w,c
  4224  002F0E  B4D8               	btfsc	status,2,c
  4225  002F10  D018               	goto	l517
  4226  002F12  0E01               	movlw	1
  4227  002F14  6E05               	movwf	___awmod@counter,c
  4228  002F16  D004               	goto	l512
  4229  002F18  90D8               	bcf	status,0,c
  4230  002F1A  3603               	rlcf	___awmod@divisor,f,c
  4231  002F1C  3604               	rlcf	___awmod@divisor+1,f,c
  4232  002F1E  2A05               	incf	___awmod@counter,f,c
  4233  002F20                     l512:
  4234  002F20  AE04               	btfss	___awmod@divisor+1,7,c
  4235  002F22  D7FA               	goto	l513
  4236  002F24                     u2140:
  4237  002F24  5003               	movf	___awmod@divisor,w,c
  4238  002F26  5C01               	subwf	___awmod@dividend,w,c
  4239  002F28  5004               	movf	___awmod@divisor+1,w,c
  4240  002F2A  5802               	subwfb	___awmod@dividend+1,w,c
  4241  002F2C  A0D8               	btfss	status,0,c
  4242  002F2E  D004               	goto	l516
  4243  002F30  5003               	movf	___awmod@divisor,w,c
  4244  002F32  5E01               	subwf	___awmod@dividend,f,c
  4245  002F34  5004               	movf	___awmod@divisor+1,w,c
  4246  002F36  5A02               	subwfb	___awmod@dividend+1,f,c
  4247  002F38                     l516:
  4248  002F38  90D8               	bcf	status,0,c
  4249  002F3A  3204               	rrcf	___awmod@divisor+1,f,c
  4250  002F3C  3203               	rrcf	___awmod@divisor,f,c
  4251  002F3E  2E05               	decfsz	___awmod@counter,f,c
  4252  002F40  D7F1               	goto	u2140
  4253  002F42                     l517:
  4254  002F42  5006               	movf	___awmod@sign,w,c
  4255  002F44  B4D8               	btfsc	status,2,c
  4256  002F46  D004               	goto	l518
  4257  002F48  6C01               	negf	___awmod@dividend,c
  4258  002F4A  1E02               	comf	___awmod@dividend+1,f,c
  4259  002F4C  B0D8               	btfsc	status,0,c
  4260  002F4E  2A02               	incf	___awmod@dividend+1,f,c
  4261  002F50                     l518:
  4262  002F50  C001  F001         	movff	___awmod@dividend,?___awmod
  4263  002F54  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4264  002F58  0012               	return	
  4265  002F5A                     __end_of___awmod:
  4266                           	opt stack 0
  4267                           tblptru	equ	0xFF8
  4268                           tblptrh	equ	0xFF7
  4269                           tblptrl	equ	0xFF6
  4270                           tablat	equ	0xFF5
  4271                           prodh	equ	0xFF4
  4272                           prodl	equ	0xFF3
  4273                           postinc0	equ	0xFEE
  4274                           wreg	equ	0xFE8
  4275                           indf2	equ	0xFDF
  4276                           postinc2	equ	0xFDE
  4277                           postdec2	equ	0xFDD
  4278                           fsr2h	equ	0xFDA
  4279                           fsr2l	equ	0xFD9
  4280                           status	equ	0xFD8
  4281                           
  4282 ;; *************** function ___awdiv *****************
  4283 ;; Defined at:
  4284 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  dividend        2    6[COMRAM] int 
  4287 ;;  divisor         2    8[COMRAM] int 
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;  quotient        2   12[COMRAM] int 
  4290 ;;  sign            1   11[COMRAM] unsigned char 
  4291 ;;  counter         1   10[COMRAM] unsigned char 
  4292 ;; Return value:  Size  Location     Type
  4293 ;;                  2    6[COMRAM] int 
  4294 ;; Registers used:
  4295 ;;		wreg, status,2, status,0
  4296 ;; Tracked objects:
  4297 ;;		On entry : 0/0
  4298 ;;		On exit  : 0/0
  4299 ;;		Unchanged: 0/0
  4300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4301 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4304 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4305 ;;Total ram usage:        8 bytes
  4306 ;; Hardware stack levels used:    1
  4307 ;; This function calls:
  4308 ;;		Nothing
  4309 ;; This function is called by:
  4310 ;;		_fround
  4311 ;;		_scale
  4312 ;;		_sprintf
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316                           	psect	text8
  4317  002D64                     __ptext8:
  4318                           	opt stack 0
  4319  002D64                     ___awdiv:
  4320                           	opt stack 28
  4321                           
  4322                           ;incstack = 0
  4323  002D64  0E00               	movlw	0
  4324  002D66  6E0C               	movwf	___awdiv@sign,c
  4325  002D68  AE0A               	btfss	___awdiv@divisor+1,7,c
  4326  002D6A  D006               	goto	l496
  4327  002D6C  6C09               	negf	___awdiv@divisor,c
  4328  002D6E  1E0A               	comf	___awdiv@divisor+1,f,c
  4329  002D70  B0D8               	btfsc	status,0,c
  4330  002D72  2A0A               	incf	___awdiv@divisor+1,f,c
  4331  002D74  0E01               	movlw	1
  4332  002D76  6E0C               	movwf	___awdiv@sign,c
  4333  002D78                     l496:
  4334  002D78  AE08               	btfss	___awdiv@dividend+1,7,c
  4335  002D7A  D006               	goto	l497
  4336  002D7C  6C07               	negf	___awdiv@dividend,c
  4337  002D7E  1E08               	comf	___awdiv@dividend+1,f,c
  4338  002D80  B0D8               	btfsc	status,0,c
  4339  002D82  2A08               	incf	___awdiv@dividend+1,f,c
  4340  002D84  0E01               	movlw	1
  4341  002D86  1A0C               	xorwf	___awdiv@sign,f,c
  4342  002D88                     l497:
  4343  002D88  0E00               	movlw	0
  4344  002D8A  6E0E               	movwf	___awdiv@quotient+1,c
  4345  002D8C  0E00               	movlw	0
  4346  002D8E  6E0D               	movwf	___awdiv@quotient,c
  4347  002D90  5009               	movf	___awdiv@divisor,w,c
  4348  002D92  100A               	iorwf	___awdiv@divisor+1,w,c
  4349  002D94  B4D8               	btfsc	status,2,c
  4350  002D96  D01C               	goto	l504
  4351  002D98  0E01               	movlw	1
  4352  002D9A  6E0B               	movwf	___awdiv@counter,c
  4353  002D9C  D004               	goto	l499
  4354  002D9E  90D8               	bcf	status,0,c
  4355  002DA0  3609               	rlcf	___awdiv@divisor,f,c
  4356  002DA2  360A               	rlcf	___awdiv@divisor+1,f,c
  4357  002DA4  2A0B               	incf	___awdiv@counter,f,c
  4358  002DA6                     l499:
  4359  002DA6  AE0A               	btfss	___awdiv@divisor+1,7,c
  4360  002DA8  D7FA               	goto	l500
  4361  002DAA                     u2080:
  4362  002DAA  90D8               	bcf	status,0,c
  4363  002DAC  360D               	rlcf	___awdiv@quotient,f,c
  4364  002DAE  360E               	rlcf	___awdiv@quotient+1,f,c
  4365  002DB0  5009               	movf	___awdiv@divisor,w,c
  4366  002DB2  5C07               	subwf	___awdiv@dividend,w,c
  4367  002DB4  500A               	movf	___awdiv@divisor+1,w,c
  4368  002DB6  5808               	subwfb	___awdiv@dividend+1,w,c
  4369  002DB8  A0D8               	btfss	status,0,c
  4370  002DBA  D005               	goto	l503
  4371  002DBC  5009               	movf	___awdiv@divisor,w,c
  4372  002DBE  5E07               	subwf	___awdiv@dividend,f,c
  4373  002DC0  500A               	movf	___awdiv@divisor+1,w,c
  4374  002DC2  5A08               	subwfb	___awdiv@dividend+1,f,c
  4375  002DC4  800D               	bsf	___awdiv@quotient,0,c
  4376  002DC6                     l503:
  4377  002DC6  90D8               	bcf	status,0,c
  4378  002DC8  320A               	rrcf	___awdiv@divisor+1,f,c
  4379  002DCA  3209               	rrcf	___awdiv@divisor,f,c
  4380  002DCC  2E0B               	decfsz	___awdiv@counter,f,c
  4381  002DCE  D7ED               	goto	u2080
  4382  002DD0                     l504:
  4383  002DD0  500C               	movf	___awdiv@sign,w,c
  4384  002DD2  B4D8               	btfsc	status,2,c
  4385  002DD4  D004               	goto	l505
  4386  002DD6  6C0D               	negf	___awdiv@quotient,c
  4387  002DD8  1E0E               	comf	___awdiv@quotient+1,f,c
  4388  002DDA  B0D8               	btfsc	status,0,c
  4389  002DDC  2A0E               	incf	___awdiv@quotient+1,f,c
  4390  002DDE                     l505:
  4391  002DDE  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4392  002DE2  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4393  002DE6  0012               	return	
  4394  002DE8                     __end_of___awdiv:
  4395                           	opt stack 0
  4396                           tblptru	equ	0xFF8
  4397                           tblptrh	equ	0xFF7
  4398                           tblptrl	equ	0xFF6
  4399                           tablat	equ	0xFF5
  4400                           prodh	equ	0xFF4
  4401                           prodl	equ	0xFF3
  4402                           postinc0	equ	0xFEE
  4403                           wreg	equ	0xFE8
  4404                           indf2	equ	0xFDF
  4405                           postinc2	equ	0xFDE
  4406                           postdec2	equ	0xFDD
  4407                           fsr2h	equ	0xFDA
  4408                           fsr2l	equ	0xFD9
  4409                           status	equ	0xFD8
  4410                           
  4411 ;; *************** function __tdiv_to_l_ *****************
  4412 ;; Defined at:
  4413 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  4414 ;; Parameters:    Size  Location     Type
  4415 ;;  f1              3    0[COMRAM] float 
  4416 ;;  f2              3    3[COMRAM] float 
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;  quot            4    9[COMRAM] unsigned long 
  4419 ;;  exp1            1   14[COMRAM] unsigned char 
  4420 ;;  cntr            1   13[COMRAM] unsigned char 
  4421 ;; Return value:  Size  Location     Type
  4422 ;;                  4    0[COMRAM] unsigned long 
  4423 ;; Registers used:
  4424 ;;		wreg, status,2, status,0
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4430 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4431 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4432 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4433 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4434 ;;Total ram usage:       15 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; This function calls:
  4437 ;;		Nothing
  4438 ;; This function is called by:
  4439 ;;		_sprintf
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           	psect	text9
  4444  002628                     __ptext9:
  4445                           	opt stack 0
  4446  002628                     __tdiv_to_l_:
  4447                           	opt stack 29
  4448                           
  4449                           ;incstack = 0
  4450  002628  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4451  00262C  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4452  00262E  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4453  002630  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4454  002632  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4455  002634  E301               	bnc	u2261
  4456  002636  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4457  002638                     u2261:
  4458  002638  5007               	movf	??__tdiv_to_l_,w,c
  4459  00263A  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4460  00263C  500F               	movf	__tdiv_to_l_@exp1,w,c
  4461  00263E  A4D8               	btfss	status,2,c
  4462  002640  D009               	goto	l632
  4463  002642  0E00               	movlw	0
  4464  002644  6E01               	movwf	?__tdiv_to_l_,c
  4465  002646  0E00               	movlw	0
  4466  002648  6E02               	movwf	?__tdiv_to_l_+1,c
  4467  00264A  0E00               	movlw	0
  4468  00264C  6E03               	movwf	?__tdiv_to_l_+2,c
  4469  00264E  0E00               	movlw	0
  4470  002650  6E04               	movwf	?__tdiv_to_l_+3,c
  4471  002652  0012               	return	
  4472  002654                     l632:
  4473  002654  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4474  002658  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4475  00265A  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4476  00265C  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4477  00265E  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4478  002660  E301               	bnc	u2281
  4479  002662  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4480  002664                     u2281:
  4481  002664  5007               	movf	??__tdiv_to_l_,w,c
  4482  002666  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4483  002668  500E               	movf	__tdiv_to_l_@cntr,w,c
  4484  00266A  A4D8               	btfss	status,2,c
  4485  00266C  D009               	goto	l634
  4486  00266E  0E00               	movlw	0
  4487  002670  6E01               	movwf	?__tdiv_to_l_,c
  4488  002672  0E00               	movlw	0
  4489  002674  6E02               	movwf	?__tdiv_to_l_+1,c
  4490  002676  0E00               	movlw	0
  4491  002678  6E03               	movwf	?__tdiv_to_l_+2,c
  4492  00267A  0E00               	movlw	0
  4493  00267C  6E04               	movwf	?__tdiv_to_l_+3,c
  4494  00267E  0012               	return	
  4495  002680                     l634:
  4496  002680  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4497  002682  0EFF               	movlw	255
  4498  002684  1601               	andwf	__tdiv_to_l_@f1,f,c
  4499  002686  0EFF               	movlw	255
  4500  002688  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4501  00268A  0E00               	movlw	0
  4502  00268C  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4503  00268E  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4504  002690  0EFF               	movlw	255
  4505  002692  1604               	andwf	__tdiv_to_l_@f2,f,c
  4506  002694  0EFF               	movlw	255
  4507  002696  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4508  002698  0E00               	movlw	0
  4509  00269A  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4510  00269C  0E00               	movlw	0
  4511  00269E  6E0A               	movwf	__tdiv_to_l_@quot,c
  4512  0026A0  0E00               	movlw	0
  4513  0026A2  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4514  0026A4  0E00               	movlw	0
  4515  0026A6  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4516  0026A8  0E00               	movlw	0
  4517  0026AA  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4518  0026AC  0E7F               	movlw	127
  4519  0026AE  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4520  0026B0  500E               	movf	__tdiv_to_l_@cntr,w,c
  4521  0026B2  0F98               	addlw	152
  4522  0026B4  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4523  0026B6  0E18               	movlw	24
  4524  0026B8  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4525  0026BA                     l635:
  4526  0026BA  90D8               	bcf	status,0,c
  4527  0026BC  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4528  0026BE  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4529  0026C0  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4530  0026C2  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4531  0026C4  5004               	movf	__tdiv_to_l_@f2,w,c
  4532  0026C6  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4533  0026C8  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4534  0026CA  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4535  0026CC  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4536  0026CE  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4537  0026D0  A0D8               	btfss	status,0,c
  4538  0026D2  D007               	goto	l636
  4539  0026D4  5004               	movf	__tdiv_to_l_@f2,w,c
  4540  0026D6  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4541  0026D8  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4542  0026DA  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4543  0026DC  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4544  0026DE  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4545  0026E0  800A               	bsf	__tdiv_to_l_@quot,0,c
  4546  0026E2                     l636:
  4547  0026E2  90D8               	bcf	status,0,c
  4548  0026E4  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4549  0026E6  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4550  0026E8  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4551  0026EA  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4552  0026EC  D7E6               	goto	l635
  4553  0026EE  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4554  0026F0  D016               	goto	l638
  4555  0026F2  500F               	movf	__tdiv_to_l_@exp1,w,c
  4556  0026F4  0A80               	xorlw	128
  4557  0026F6  0F97               	addlw	151
  4558  0026F8  B0D8               	btfsc	status,0,c
  4559  0026FA  D009               	goto	l639
  4560  0026FC  0E00               	movlw	0
  4561  0026FE  6E01               	movwf	?__tdiv_to_l_,c
  4562  002700  0E00               	movlw	0
  4563  002702  6E02               	movwf	?__tdiv_to_l_+1,c
  4564  002704  0E00               	movlw	0
  4565  002706  6E03               	movwf	?__tdiv_to_l_+2,c
  4566  002708  0E00               	movlw	0
  4567  00270A  6E04               	movwf	?__tdiv_to_l_+3,c
  4568  00270C  0012               	return	
  4569  00270E                     l639:
  4570  00270E  90D8               	bcf	status,0,c
  4571  002710  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4572  002712  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4573  002714  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4574  002716  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4575  002718  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4576  00271A  D7F9               	goto	l639
  4577  00271C  D015               	goto	u2340
  4578  00271E                     l638:
  4579  00271E  0E17               	movlw	23
  4580  002720  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4581  002722  D00F               	goto	l644
  4582  002724  0E00               	movlw	0
  4583  002726  6E01               	movwf	?__tdiv_to_l_,c
  4584  002728  0E00               	movlw	0
  4585  00272A  6E02               	movwf	?__tdiv_to_l_+1,c
  4586  00272C  0E00               	movlw	0
  4587  00272E  6E03               	movwf	?__tdiv_to_l_+2,c
  4588  002730  0E00               	movlw	0
  4589  002732  6E04               	movwf	?__tdiv_to_l_+3,c
  4590  002734  0012               	return	
  4591  002736  90D8               	bcf	status,0,c
  4592  002738  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4593  00273A  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4594  00273C  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4595  00273E  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4596  002740  060F               	decf	__tdiv_to_l_@exp1,f,c
  4597  002742                     l644:
  4598  002742  500F               	movf	__tdiv_to_l_@exp1,w,c
  4599  002744  A4D8               	btfss	status,2,c
  4600  002746  D7F7               	goto	l645
  4601  002748                     u2340:
  4602  002748  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4603  00274C  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4604  002750  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4605  002754  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4606  002758  0012               	return		;funcret
  4607  00275A                     __end_of__tdiv_to_l_:
  4608                           	opt stack 0
  4609                           tblptru	equ	0xFF8
  4610                           tblptrh	equ	0xFF7
  4611                           tblptrl	equ	0xFF6
  4612                           tablat	equ	0xFF5
  4613                           prodh	equ	0xFF4
  4614                           prodl	equ	0xFF3
  4615                           postinc0	equ	0xFEE
  4616                           wreg	equ	0xFE8
  4617                           indf2	equ	0xFDF
  4618                           postinc2	equ	0xFDE
  4619                           postdec2	equ	0xFDD
  4620                           fsr2h	equ	0xFDA
  4621                           fsr2l	equ	0xFD9
  4622                           status	equ	0xFD8
  4623                           
  4624 ;; *************** function __div_to_l_ *****************
  4625 ;; Defined at:
  4626 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;  f1              3    0[COMRAM] unsigned long 
  4629 ;;  f2              3    3[COMRAM] unsigned long 
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  quot            4    6[COMRAM] unsigned long 
  4632 ;;  exp1            1   11[COMRAM] unsigned char 
  4633 ;;  cntr            1   10[COMRAM] unsigned char 
  4634 ;; Return value:  Size  Location     Type
  4635 ;;                  4    0[COMRAM] unsigned long 
  4636 ;; Registers used:
  4637 ;;		wreg, status,2, status,0
  4638 ;; Tracked objects:
  4639 ;;		On entry : 0/0
  4640 ;;		On exit  : 0/0
  4641 ;;		Unchanged: 0/0
  4642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4643 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4647 ;;Total ram usage:       12 bytes
  4648 ;; Hardware stack levels used:    1
  4649 ;; This function calls:
  4650 ;;		Nothing
  4651 ;; This function is called by:
  4652 ;;		_sprintf
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           	psect	text10
  4657  00275A                     __ptext10:
  4658                           	opt stack 0
  4659  00275A                     __div_to_l_:
  4660                           	opt stack 29
  4661                           
  4662                           ;incstack = 0
  4663  00275A  3403               	rlcf	__div_to_l_@f1+2,w,c
  4664  00275C  3404               	rlcf	__div_to_l_@f1+3,w,c
  4665  00275E  6E0C               	movwf	__div_to_l_@exp1,c
  4666  002760  500C               	movf	__div_to_l_@exp1,w,c
  4667  002762  A4D8               	btfss	status,2,c
  4668  002764  D009               	goto	l528
  4669  002766  0E00               	movlw	0
  4670  002768  6E01               	movwf	?__div_to_l_,c
  4671  00276A  0E00               	movlw	0
  4672  00276C  6E02               	movwf	?__div_to_l_+1,c
  4673  00276E  0E00               	movlw	0
  4674  002770  6E03               	movwf	?__div_to_l_+2,c
  4675  002772  0E00               	movlw	0
  4676  002774  6E04               	movwf	?__div_to_l_+3,c
  4677  002776  0012               	return	
  4678  002778                     l528:
  4679  002778  3406               	rlcf	__div_to_l_@f2+2,w,c
  4680  00277A  3407               	rlcf	__div_to_l_@f2+3,w,c
  4681  00277C  6E0B               	movwf	__div_to_l_@cntr,c
  4682  00277E  500B               	movf	__div_to_l_@cntr,w,c
  4683  002780  A4D8               	btfss	status,2,c
  4684  002782  D009               	goto	l530
  4685  002784  0E00               	movlw	0
  4686  002786  6E01               	movwf	?__div_to_l_,c
  4687  002788  0E00               	movlw	0
  4688  00278A  6E02               	movwf	?__div_to_l_+1,c
  4689  00278C  0E00               	movlw	0
  4690  00278E  6E03               	movwf	?__div_to_l_+2,c
  4691  002790  0E00               	movlw	0
  4692  002792  6E04               	movwf	?__div_to_l_+3,c
  4693  002794  0012               	return	
  4694  002796                     l530:
  4695  002796  8E03               	bsf	__div_to_l_@f1+2,7,c
  4696  002798  0EFF               	movlw	255
  4697  00279A  1601               	andwf	__div_to_l_@f1,f,c
  4698  00279C  0EFF               	movlw	255
  4699  00279E  1602               	andwf	__div_to_l_@f1+1,f,c
  4700  0027A0  0EFF               	movlw	255
  4701  0027A2  1603               	andwf	__div_to_l_@f1+2,f,c
  4702  0027A4  0E00               	movlw	0
  4703  0027A6  1604               	andwf	__div_to_l_@f1+3,f,c
  4704  0027A8  8E06               	bsf	__div_to_l_@f2+2,7,c
  4705  0027AA  0EFF               	movlw	255
  4706  0027AC  1604               	andwf	__div_to_l_@f2,f,c
  4707  0027AE  0EFF               	movlw	255
  4708  0027B0  1605               	andwf	__div_to_l_@f2+1,f,c
  4709  0027B2  0EFF               	movlw	255
  4710  0027B4  1606               	andwf	__div_to_l_@f2+2,f,c
  4711  0027B6  0E00               	movlw	0
  4712  0027B8  1607               	andwf	__div_to_l_@f2+3,f,c
  4713  0027BA  0E00               	movlw	0
  4714  0027BC  6E07               	movwf	__div_to_l_@quot,c
  4715  0027BE  0E00               	movlw	0
  4716  0027C0  6E08               	movwf	__div_to_l_@quot+1,c
  4717  0027C2  0E00               	movlw	0
  4718  0027C4  6E09               	movwf	__div_to_l_@quot+2,c
  4719  0027C6  0E00               	movlw	0
  4720  0027C8  6E0A               	movwf	__div_to_l_@quot+3,c
  4721  0027CA  0E7F               	movlw	127
  4722  0027CC  5E0C               	subwf	__div_to_l_@exp1,f,c
  4723  0027CE  500B               	movf	__div_to_l_@cntr,w,c
  4724  0027D0  0FA0               	addlw	160
  4725  0027D2  5E0C               	subwf	__div_to_l_@exp1,f,c
  4726  0027D4  0E20               	movlw	32
  4727  0027D6  6E0B               	movwf	__div_to_l_@cntr,c
  4728  0027D8  90D8               	bcf	status,0,c
  4729  0027DA  3607               	rlcf	__div_to_l_@quot,f,c
  4730  0027DC  3608               	rlcf	__div_to_l_@quot+1,f,c
  4731  0027DE  3609               	rlcf	__div_to_l_@quot+2,f,c
  4732  0027E0  360A               	rlcf	__div_to_l_@quot+3,f,c
  4733  0027E2  5004               	movf	__div_to_l_@f2,w,c
  4734  0027E4  5C01               	subwf	__div_to_l_@f1,w,c
  4735  0027E6  5005               	movf	__div_to_l_@f2+1,w,c
  4736  0027E8  5802               	subwfb	__div_to_l_@f1+1,w,c
  4737  0027EA  5006               	movf	__div_to_l_@f2+2,w,c
  4738  0027EC  5803               	subwfb	__div_to_l_@f1+2,w,c
  4739  0027EE  5007               	movf	__div_to_l_@f2+3,w,c
  4740  0027F0  5804               	subwfb	__div_to_l_@f1+3,w,c
  4741  0027F2  A0D8               	btfss	status,0,c
  4742  0027F4  D009               	goto	l532
  4743  0027F6  5004               	movf	__div_to_l_@f2,w,c
  4744  0027F8  5E01               	subwf	__div_to_l_@f1,f,c
  4745  0027FA  5005               	movf	__div_to_l_@f2+1,w,c
  4746  0027FC  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4747  0027FE  5006               	movf	__div_to_l_@f2+2,w,c
  4748  002800  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4749  002802  5007               	movf	__div_to_l_@f2+3,w,c
  4750  002804  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4751  002806  8007               	bsf	__div_to_l_@quot,0,c
  4752  002808                     l532:
  4753  002808  90D8               	bcf	status,0,c
  4754  00280A  3601               	rlcf	__div_to_l_@f1,f,c
  4755  00280C  3602               	rlcf	__div_to_l_@f1+1,f,c
  4756  00280E  3603               	rlcf	__div_to_l_@f1+2,f,c
  4757  002810  3604               	rlcf	__div_to_l_@f1+3,f,c
  4758  002812  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4759  002814  D7E1               	goto	l531
  4760  002816  AE0C               	btfss	__div_to_l_@exp1,7,c
  4761  002818  D016               	goto	l534
  4762  00281A  500C               	movf	__div_to_l_@exp1,w,c
  4763  00281C  0A80               	xorlw	128
  4764  00281E  0F9F               	addlw	159
  4765  002820  B0D8               	btfsc	status,0,c
  4766  002822  D009               	goto	l535
  4767  002824  0E00               	movlw	0
  4768  002826  6E01               	movwf	?__div_to_l_,c
  4769  002828  0E00               	movlw	0
  4770  00282A  6E02               	movwf	?__div_to_l_+1,c
  4771  00282C  0E00               	movlw	0
  4772  00282E  6E03               	movwf	?__div_to_l_+2,c
  4773  002830  0E00               	movlw	0
  4774  002832  6E04               	movwf	?__div_to_l_+3,c
  4775  002834  0012               	return	
  4776  002836                     l535:
  4777  002836  90D8               	bcf	status,0,c
  4778  002838  320A               	rrcf	__div_to_l_@quot+3,f,c
  4779  00283A  3209               	rrcf	__div_to_l_@quot+2,f,c
  4780  00283C  3208               	rrcf	__div_to_l_@quot+1,f,c
  4781  00283E  3207               	rrcf	__div_to_l_@quot,f,c
  4782  002840  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4783  002842  D7F9               	goto	l535
  4784  002844  D015               	goto	u2410
  4785  002846                     l534:
  4786  002846  0E1F               	movlw	31
  4787  002848  640C               	cpfsgt	__div_to_l_@exp1,c
  4788  00284A  D00F               	goto	l540
  4789  00284C  0E00               	movlw	0
  4790  00284E  6E01               	movwf	?__div_to_l_,c
  4791  002850  0E00               	movlw	0
  4792  002852  6E02               	movwf	?__div_to_l_+1,c
  4793  002854  0E00               	movlw	0
  4794  002856  6E03               	movwf	?__div_to_l_+2,c
  4795  002858  0E00               	movlw	0
  4796  00285A  6E04               	movwf	?__div_to_l_+3,c
  4797  00285C  0012               	return	
  4798  00285E  90D8               	bcf	status,0,c
  4799  002860  3607               	rlcf	__div_to_l_@quot,f,c
  4800  002862  3608               	rlcf	__div_to_l_@quot+1,f,c
  4801  002864  3609               	rlcf	__div_to_l_@quot+2,f,c
  4802  002866  360A               	rlcf	__div_to_l_@quot+3,f,c
  4803  002868  060C               	decf	__div_to_l_@exp1,f,c
  4804  00286A                     l540:
  4805  00286A  500C               	movf	__div_to_l_@exp1,w,c
  4806  00286C  A4D8               	btfss	status,2,c
  4807  00286E  D7F7               	goto	l541
  4808  002870                     u2410:
  4809  002870  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4810  002874  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4811  002878  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4812  00287C  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4813  002880  0012               	return		;funcret
  4814  002882                     __end_of__div_to_l_:
  4815                           	opt stack 0
  4816                           tblptru	equ	0xFF8
  4817                           tblptrh	equ	0xFF7
  4818                           tblptrl	equ	0xFF6
  4819                           tablat	equ	0xFF5
  4820                           prodh	equ	0xFF4
  4821                           prodl	equ	0xFF3
  4822                           postinc0	equ	0xFEE
  4823                           wreg	equ	0xFE8
  4824                           indf2	equ	0xFDF
  4825                           postinc2	equ	0xFDE
  4826                           postdec2	equ	0xFDD
  4827                           fsr2h	equ	0xFDA
  4828                           fsr2l	equ	0xFD9
  4829                           status	equ	0xFD8
  4830                           
  4831 ;; *************** function ___lltoft *****************
  4832 ;; Defined at:
  4833 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;  c               4   35[COMRAM] unsigned long 
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;  exp             1   43[COMRAM] unsigned char 
  4838 ;; Return value:  Size  Location     Type
  4839 ;;                  3   35[COMRAM] float 
  4840 ;; Registers used:
  4841 ;;		wreg, status,2, status,0, cstack
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4847 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;Total ram usage:        9 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; Hardware stack levels required when called:    1
  4854 ;; This function calls:
  4855 ;;		___ftpack
  4856 ;; This function is called by:
  4857 ;;		_sprintf
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text11
  4862  002FC0                     __ptext11:
  4863                           	opt stack 0
  4864  002FC0                     ___lltoft:
  4865                           	opt stack 28
  4866                           
  4867                           ;incstack = 0
  4868  002FC0  0E8E               	movlw	142
  4869  002FC2  6E2C               	movwf	___lltoft@exp,c
  4870  002FC4  D006               	goto	l739
  4871  002FC6  90D8               	bcf	status,0,c
  4872  002FC8  3227               	rrcf	___lltoft@c+3,f,c
  4873  002FCA  3226               	rrcf	___lltoft@c+2,f,c
  4874  002FCC  3225               	rrcf	___lltoft@c+1,f,c
  4875  002FCE  3224               	rrcf	___lltoft@c,f,c
  4876  002FD0  2A2C               	incf	___lltoft@exp,f,c
  4877  002FD2                     l739:
  4878  002FD2  0E00               	movlw	0
  4879  002FD4  1424               	andwf	___lltoft@c,w,c
  4880  002FD6  6E28               	movwf	??___lltoft& (0+255),c
  4881  002FD8  0E00               	movlw	0
  4882  002FDA  1425               	andwf	___lltoft@c+1,w,c
  4883  002FDC  6E29               	movwf	(??___lltoft+1)& (0+255),c
  4884  002FDE  0E00               	movlw	0
  4885  002FE0  1426               	andwf	___lltoft@c+2,w,c
  4886  002FE2  6E2A               	movwf	(??___lltoft+2)& (0+255),c
  4887  002FE4  0EFF               	movlw	255
  4888  002FE6  1427               	andwf	___lltoft@c+3,w,c
  4889  002FE8  6E2B               	movwf	(??___lltoft+3)& (0+255),c
  4890  002FEA  5028               	movf	??___lltoft,w,c
  4891  002FEC  1029               	iorwf	??___lltoft+1,w,c
  4892  002FEE  102A               	iorwf	??___lltoft+2,w,c
  4893  002FF0  102B               	iorwf	??___lltoft+3,w,c
  4894  002FF2  A4D8               	btfss	status,2,c
  4895  002FF4  D7E8               	goto	l740
  4896  002FF6  C024  F001         	movff	___lltoft@c,___ftpack@arg
  4897  002FFA  C025  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4898  002FFE  C026  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4899  003002  C02C  F004         	movff	___lltoft@exp,___ftpack@exp
  4900  003006  0E00               	movlw	0
  4901  003008  6E05               	movwf	___ftpack@sign,c
  4902  00300A  EC13  F016         	call	___ftpack	;wreg free
  4903  00300E  C001  F024         	movff	?___ftpack,?___lltoft
  4904  003012  C002  F025         	movff	?___ftpack+1,?___lltoft+1
  4905  003016  C003  F026         	movff	?___ftpack+2,?___lltoft+2
  4906  00301A  0012               	return	
  4907  00301C                     __end_of___lltoft:
  4908                           	opt stack 0
  4909                           tblptru	equ	0xFF8
  4910                           tblptrh	equ	0xFF7
  4911                           tblptrl	equ	0xFF6
  4912                           tablat	equ	0xFF5
  4913                           prodh	equ	0xFF4
  4914                           prodl	equ	0xFF3
  4915                           postinc0	equ	0xFEE
  4916                           wreg	equ	0xFE8
  4917                           indf2	equ	0xFDF
  4918                           postinc2	equ	0xFDE
  4919                           postdec2	equ	0xFDD
  4920                           fsr2h	equ	0xFDA
  4921                           fsr2l	equ	0xFD9
  4922                           status	equ	0xFD8
  4923                           
  4924 ;; *************** function ___llmod *****************
  4925 ;; Defined at:
  4926 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;  dividend        4    0[COMRAM] unsigned long 
  4929 ;;  divisor         4    4[COMRAM] unsigned long 
  4930 ;; Auto vars:     Size  Location     Type
  4931 ;;  counter         1    8[COMRAM] unsigned char 
  4932 ;; Return value:  Size  Location     Type
  4933 ;;                  4    0[COMRAM] unsigned long 
  4934 ;; Registers used:
  4935 ;;		wreg, status,2, status,0
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4941 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4945 ;;Total ram usage:        9 bytes
  4946 ;; Hardware stack levels used:    1
  4947 ;; This function calls:
  4948 ;;		Nothing
  4949 ;; This function is called by:
  4950 ;;		_sprintf
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           	psect	text12
  4955  002F5A                     __ptext12:
  4956                           	opt stack 0
  4957  002F5A                     ___llmod:
  4958                           	opt stack 29
  4959                           
  4960                           ;incstack = 0
  4961  002F5A  5005               	movf	___llmod@divisor,w,c
  4962  002F5C  1006               	iorwf	___llmod@divisor+1,w,c
  4963  002F5E  1007               	iorwf	___llmod@divisor+2,w,c
  4964  002F60  1008               	iorwf	___llmod@divisor+3,w,c
  4965  002F62  B4D8               	btfsc	status,2,c
  4966  002F64  D024               	goto	l733
  4967  002F66  0E01               	movlw	1
  4968  002F68  6E09               	movwf	___llmod@counter,c
  4969  002F6A  D006               	goto	l728
  4970  002F6C  90D8               	bcf	status,0,c
  4971  002F6E  3605               	rlcf	___llmod@divisor,f,c
  4972  002F70  3606               	rlcf	___llmod@divisor+1,f,c
  4973  002F72  3607               	rlcf	___llmod@divisor+2,f,c
  4974  002F74  3608               	rlcf	___llmod@divisor+3,f,c
  4975  002F76  2A09               	incf	___llmod@counter,f,c
  4976  002F78                     l728:
  4977  002F78  AE08               	btfss	___llmod@divisor+3,7,c
  4978  002F7A  D7F8               	goto	l729
  4979  002F7C                     u2640:
  4980  002F7C  5005               	movf	___llmod@divisor,w,c
  4981  002F7E  5C01               	subwf	___llmod@dividend,w,c
  4982  002F80  5006               	movf	___llmod@divisor+1,w,c
  4983  002F82  5802               	subwfb	___llmod@dividend+1,w,c
  4984  002F84  5007               	movf	___llmod@divisor+2,w,c
  4985  002F86  5803               	subwfb	___llmod@dividend+2,w,c
  4986  002F88  5008               	movf	___llmod@divisor+3,w,c
  4987  002F8A  5804               	subwfb	___llmod@dividend+3,w,c
  4988  002F8C  A0D8               	btfss	status,0,c
  4989  002F8E  D008               	goto	l732
  4990  002F90  5005               	movf	___llmod@divisor,w,c
  4991  002F92  5E01               	subwf	___llmod@dividend,f,c
  4992  002F94  5006               	movf	___llmod@divisor+1,w,c
  4993  002F96  5A02               	subwfb	___llmod@dividend+1,f,c
  4994  002F98  5007               	movf	___llmod@divisor+2,w,c
  4995  002F9A  5A03               	subwfb	___llmod@dividend+2,f,c
  4996  002F9C  5008               	movf	___llmod@divisor+3,w,c
  4997  002F9E  5A04               	subwfb	___llmod@dividend+3,f,c
  4998  002FA0                     l732:
  4999  002FA0  90D8               	bcf	status,0,c
  5000  002FA2  3208               	rrcf	___llmod@divisor+3,f,c
  5001  002FA4  3207               	rrcf	___llmod@divisor+2,f,c
  5002  002FA6  3206               	rrcf	___llmod@divisor+1,f,c
  5003  002FA8  3205               	rrcf	___llmod@divisor,f,c
  5004  002FAA  2E09               	decfsz	___llmod@counter,f,c
  5005  002FAC  D7E7               	goto	u2640
  5006  002FAE                     l733:
  5007  002FAE  C001  F001         	movff	___llmod@dividend,?___llmod
  5008  002FB2  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  5009  002FB6  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  5010  002FBA  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  5011  002FBE  0012               	return		;funcret
  5012  002FC0                     __end_of___llmod:
  5013                           	opt stack 0
  5014                           tblptru	equ	0xFF8
  5015                           tblptrh	equ	0xFF7
  5016                           tblptrl	equ	0xFF6
  5017                           tablat	equ	0xFF5
  5018                           prodh	equ	0xFF4
  5019                           prodl	equ	0xFF3
  5020                           postinc0	equ	0xFEE
  5021                           wreg	equ	0xFE8
  5022                           indf2	equ	0xFDF
  5023                           postinc2	equ	0xFDE
  5024                           postdec2	equ	0xFDD
  5025                           fsr2h	equ	0xFDA
  5026                           fsr2l	equ	0xFD9
  5027                           status	equ	0xFD8
  5028                           
  5029 ;; *************** function ___lldiv *****************
  5030 ;; Defined at:
  5031 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;  dividend        4    0[COMRAM] unsigned long 
  5034 ;;  divisor         4    4[COMRAM] unsigned long 
  5035 ;; Auto vars:     Size  Location     Type
  5036 ;;  quotient        4    8[COMRAM] unsigned long 
  5037 ;;  counter         1   12[COMRAM] unsigned char 
  5038 ;; Return value:  Size  Location     Type
  5039 ;;                  4    0[COMRAM] unsigned long 
  5040 ;; Registers used:
  5041 ;;		wreg, status,2, status,0
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5047 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5048 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5051 ;;Total ram usage:       13 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; This function calls:
  5054 ;;		Nothing
  5055 ;; This function is called by:
  5056 ;;		_sprintf
  5057 ;; This function uses a non-reentrant model
  5058 ;;
  5059                           
  5060                           	psect	text13
  5061  002DE8                     __ptext13:
  5062                           	opt stack 0
  5063  002DE8                     ___lldiv:
  5064                           	opt stack 29
  5065                           
  5066                           ;incstack = 0
  5067  002DE8  0E00               	movlw	0
  5068  002DEA  6E09               	movwf	___lldiv@quotient,c
  5069  002DEC  0E00               	movlw	0
  5070  002DEE  6E0A               	movwf	___lldiv@quotient+1,c
  5071  002DF0  0E00               	movlw	0
  5072  002DF2  6E0B               	movwf	___lldiv@quotient+2,c
  5073  002DF4  0E00               	movlw	0
  5074  002DF6  6E0C               	movwf	___lldiv@quotient+3,c
  5075  002DF8  5005               	movf	___lldiv@divisor,w,c
  5076  002DFA  1006               	iorwf	___lldiv@divisor+1,w,c
  5077  002DFC  1007               	iorwf	___lldiv@divisor+2,w,c
  5078  002DFE  1008               	iorwf	___lldiv@divisor+3,w,c
  5079  002E00  B4D8               	btfsc	status,2,c
  5080  002E02  D02A               	goto	l723
  5081  002E04  0E01               	movlw	1
  5082  002E06  6E0D               	movwf	___lldiv@counter,c
  5083  002E08  D006               	goto	l718
  5084  002E0A  90D8               	bcf	status,0,c
  5085  002E0C  3605               	rlcf	___lldiv@divisor,f,c
  5086  002E0E  3606               	rlcf	___lldiv@divisor+1,f,c
  5087  002E10  3607               	rlcf	___lldiv@divisor+2,f,c
  5088  002E12  3608               	rlcf	___lldiv@divisor+3,f,c
  5089  002E14  2A0D               	incf	___lldiv@counter,f,c
  5090  002E16                     l718:
  5091  002E16  AE08               	btfss	___lldiv@divisor+3,7,c
  5092  002E18  D7F8               	goto	l719
  5093  002E1A                     u2610:
  5094  002E1A  90D8               	bcf	status,0,c
  5095  002E1C  3609               	rlcf	___lldiv@quotient,f,c
  5096  002E1E  360A               	rlcf	___lldiv@quotient+1,f,c
  5097  002E20  360B               	rlcf	___lldiv@quotient+2,f,c
  5098  002E22  360C               	rlcf	___lldiv@quotient+3,f,c
  5099  002E24  5005               	movf	___lldiv@divisor,w,c
  5100  002E26  5C01               	subwf	___lldiv@dividend,w,c
  5101  002E28  5006               	movf	___lldiv@divisor+1,w,c
  5102  002E2A  5802               	subwfb	___lldiv@dividend+1,w,c
  5103  002E2C  5007               	movf	___lldiv@divisor+2,w,c
  5104  002E2E  5803               	subwfb	___lldiv@dividend+2,w,c
  5105  002E30  5008               	movf	___lldiv@divisor+3,w,c
  5106  002E32  5804               	subwfb	___lldiv@dividend+3,w,c
  5107  002E34  A0D8               	btfss	status,0,c
  5108  002E36  D009               	goto	l722
  5109  002E38  5005               	movf	___lldiv@divisor,w,c
  5110  002E3A  5E01               	subwf	___lldiv@dividend,f,c
  5111  002E3C  5006               	movf	___lldiv@divisor+1,w,c
  5112  002E3E  5A02               	subwfb	___lldiv@dividend+1,f,c
  5113  002E40  5007               	movf	___lldiv@divisor+2,w,c
  5114  002E42  5A03               	subwfb	___lldiv@dividend+2,f,c
  5115  002E44  5008               	movf	___lldiv@divisor+3,w,c
  5116  002E46  5A04               	subwfb	___lldiv@dividend+3,f,c
  5117  002E48  8009               	bsf	___lldiv@quotient,0,c
  5118  002E4A                     l722:
  5119  002E4A  90D8               	bcf	status,0,c
  5120  002E4C  3208               	rrcf	___lldiv@divisor+3,f,c
  5121  002E4E  3207               	rrcf	___lldiv@divisor+2,f,c
  5122  002E50  3206               	rrcf	___lldiv@divisor+1,f,c
  5123  002E52  3205               	rrcf	___lldiv@divisor,f,c
  5124  002E54  2E0D               	decfsz	___lldiv@counter,f,c
  5125  002E56  D7E1               	goto	u2610
  5126  002E58                     l723:
  5127  002E58  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5128  002E5C  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5129  002E60  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5130  002E64  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5131  002E68  0012               	return		;funcret
  5132  002E6A                     __end_of___lldiv:
  5133                           	opt stack 0
  5134                           tblptru	equ	0xFF8
  5135                           tblptrh	equ	0xFF7
  5136                           tblptrl	equ	0xFF6
  5137                           tablat	equ	0xFF5
  5138                           prodh	equ	0xFF4
  5139                           prodl	equ	0xFF3
  5140                           postinc0	equ	0xFEE
  5141                           wreg	equ	0xFE8
  5142                           indf2	equ	0xFDF
  5143                           postinc2	equ	0xFDE
  5144                           postdec2	equ	0xFDD
  5145                           fsr2h	equ	0xFDA
  5146                           fsr2l	equ	0xFD9
  5147                           status	equ	0xFD8
  5148                           
  5149 ;; *************** function ___fttol *****************
  5150 ;; Defined at:
  5151 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  5152 ;; Parameters:    Size  Location     Type
  5153 ;;  f1              3   20[COMRAM] float 
  5154 ;; Auto vars:     Size  Location     Type
  5155 ;;  lval            4   30[COMRAM] unsigned long 
  5156 ;;  exp1            1   34[COMRAM] unsigned char 
  5157 ;;  sign1           1   29[COMRAM] unsigned char 
  5158 ;; Return value:  Size  Location     Type
  5159 ;;                  4   20[COMRAM] long 
  5160 ;; Registers used:
  5161 ;;		wreg, status,2, status,0
  5162 ;; Tracked objects:
  5163 ;;		On entry : 0/0
  5164 ;;		On exit  : 0/0
  5165 ;;		Unchanged: 0/0
  5166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5167 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5168 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5169 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5170 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5171 ;;Total ram usage:       15 bytes
  5172 ;; Hardware stack levels used:    1
  5173 ;; This function calls:
  5174 ;;		Nothing
  5175 ;; This function is called by:
  5176 ;;		_sprintf
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           	psect	text14
  5181  002976                     __ptext14:
  5182                           	opt stack 0
  5183  002976                     ___fttol:
  5184                           	opt stack 29
  5185                           
  5186                           ;incstack = 0
  5187  002976  C017  F019         	movff	___fttol@f1+2,??___fttol
  5188  00297A  6A1A               	clrf	(??___fttol+1)& (0+255),c
  5189  00297C  6A1B               	clrf	(??___fttol+2)& (0+255),c
  5190  00297E  3416               	rlcf	___fttol@f1+1,w,c
  5191  002980  3619               	rlcf	??___fttol& (0+255),f,c
  5192  002982  E301               	bnc	u2521
  5193  002984  801A               	bsf	(??___fttol+1)& (0+255),0,c
  5194  002986                     u2521:
  5195  002986  5019               	movf	??___fttol,w,c
  5196  002988  6E23               	movwf	___fttol@exp1,c
  5197  00298A  5023               	movf	___fttol@exp1,w,c
  5198  00298C  A4D8               	btfss	status,2,c
  5199  00298E  D009               	goto	l677
  5200  002990  0E00               	movlw	0
  5201  002992  6E15               	movwf	?___fttol,c
  5202  002994  0E00               	movlw	0
  5203  002996  6E16               	movwf	?___fttol+1,c
  5204  002998  0E00               	movlw	0
  5205  00299A  6E17               	movwf	?___fttol+2,c
  5206  00299C  0E00               	movlw	0
  5207  00299E  6E18               	movwf	?___fttol+3,c
  5208  0029A0  0012               	return	
  5209  0029A2                     l677:
  5210  0029A2  0E17               	movlw	23
  5211  0029A4  6E19               	movwf	??___fttol& (0+255),c
  5212  0029A6  C015  F01A         	movff	___fttol@f1,??___fttol+1
  5213  0029AA  C016  F01B         	movff	___fttol@f1+1,??___fttol+2
  5214  0029AE  C017  F01C         	movff	___fttol@f1+2,??___fttol+3
  5215  0029B2  2819               	incf	??___fttol,w,c
  5216  0029B4  6E1D               	movwf	(??___fttol+4)& (0+255),c
  5217  0029B6  D004               	goto	u2540
  5218  0029B8                     u2545:
  5219  0029B8  90D8               	bcf	status,0,c
  5220  0029BA  321C               	rrcf	??___fttol+3,f,c
  5221  0029BC  321B               	rrcf	??___fttol+2,f,c
  5222  0029BE  321A               	rrcf	??___fttol+1,f,c
  5223  0029C0                     u2540:
  5224  0029C0  2E1D               	decfsz	(??___fttol+4)& (0+255),f,c
  5225  0029C2  D7FA               	goto	u2545
  5226  0029C4  501A               	movf	??___fttol+1,w,c
  5227  0029C6  6E1E               	movwf	___fttol@sign1,c
  5228  0029C8  8E16               	bsf	___fttol@f1+1,7,c
  5229  0029CA  0EFF               	movlw	255
  5230  0029CC  1615               	andwf	___fttol@f1,f,c
  5231  0029CE  0EFF               	movlw	255
  5232  0029D0  1616               	andwf	___fttol@f1+1,f,c
  5233  0029D2  0E00               	movlw	0
  5234  0029D4  1617               	andwf	___fttol@f1+2,f,c
  5235  0029D6  5015               	movf	___fttol@f1,w,c
  5236  0029D8  6E1F               	movwf	___fttol@lval,c
  5237  0029DA  5016               	movf	___fttol@f1+1,w,c
  5238  0029DC  6E20               	movwf	___fttol@lval+1,c
  5239  0029DE  5017               	movf	___fttol@f1+2,w,c
  5240  0029E0  6E21               	movwf	___fttol@lval+2,c
  5241  0029E2  6A22               	clrf	___fttol@lval+3,c
  5242  0029E4  0E8E               	movlw	142
  5243  0029E6  5E23               	subwf	___fttol@exp1,f,c
  5244  0029E8  AE23               	btfss	___fttol@exp1,7,c
  5245  0029EA  D016               	goto	l679
  5246  0029EC  5023               	movf	___fttol@exp1,w,c
  5247  0029EE  0A80               	xorlw	128
  5248  0029F0  0F8F               	addlw	143
  5249  0029F2  B0D8               	btfsc	status,0,c
  5250  0029F4  D009               	goto	l680
  5251  0029F6  0E00               	movlw	0
  5252  0029F8  6E15               	movwf	?___fttol,c
  5253  0029FA  0E00               	movlw	0
  5254  0029FC  6E16               	movwf	?___fttol+1,c
  5255  0029FE  0E00               	movlw	0
  5256  002A00  6E17               	movwf	?___fttol+2,c
  5257  002A02  0E00               	movlw	0
  5258  002A04  6E18               	movwf	?___fttol+3,c
  5259  002A06  0012               	return	
  5260  002A08                     l680:
  5261  002A08  90D8               	bcf	status,0,c
  5262  002A0A  3222               	rrcf	___fttol@lval+3,f,c
  5263  002A0C  3221               	rrcf	___fttol@lval+2,f,c
  5264  002A0E  3220               	rrcf	___fttol@lval+1,f,c
  5265  002A10  321F               	rrcf	___fttol@lval,f,c
  5266  002A12  3E23               	incfsz	___fttol@exp1,f,c
  5267  002A14  D7F9               	goto	l680
  5268  002A16  D015               	goto	u2580
  5269  002A18                     l679:
  5270  002A18  0E17               	movlw	23
  5271  002A1A  6423               	cpfsgt	___fttol@exp1,c
  5272  002A1C  D00F               	goto	l685
  5273  002A1E  0E00               	movlw	0
  5274  002A20  6E15               	movwf	?___fttol,c
  5275  002A22  0E00               	movlw	0
  5276  002A24  6E16               	movwf	?___fttol+1,c
  5277  002A26  0E00               	movlw	0
  5278  002A28  6E17               	movwf	?___fttol+2,c
  5279  002A2A  0E00               	movlw	0
  5280  002A2C  6E18               	movwf	?___fttol+3,c
  5281  002A2E  0012               	return	
  5282  002A30  90D8               	bcf	status,0,c
  5283  002A32  361F               	rlcf	___fttol@lval,f,c
  5284  002A34  3620               	rlcf	___fttol@lval+1,f,c
  5285  002A36  3621               	rlcf	___fttol@lval+2,f,c
  5286  002A38  3622               	rlcf	___fttol@lval+3,f,c
  5287  002A3A  0623               	decf	___fttol@exp1,f,c
  5288  002A3C                     l685:
  5289  002A3C  5023               	movf	___fttol@exp1,w,c
  5290  002A3E  A4D8               	btfss	status,2,c
  5291  002A40  D7F7               	goto	l686
  5292  002A42                     u2580:
  5293  002A42  501E               	movf	___fttol@sign1,w,c
  5294  002A44  B4D8               	btfsc	status,2,c
  5295  002A46  D008               	goto	l688
  5296  002A48  1E22               	comf	___fttol@lval+3,f,c
  5297  002A4A  1E21               	comf	___fttol@lval+2,f,c
  5298  002A4C  1E20               	comf	___fttol@lval+1,f,c
  5299  002A4E  6C1F               	negf	___fttol@lval,c
  5300  002A50  0E00               	movlw	0
  5301  002A52  2220               	addwfc	___fttol@lval+1,f,c
  5302  002A54  2221               	addwfc	___fttol@lval+2,f,c
  5303  002A56  2222               	addwfc	___fttol@lval+3,f,c
  5304  002A58                     l688:
  5305  002A58  C01F  F015         	movff	___fttol@lval,?___fttol
  5306  002A5C  C020  F016         	movff	___fttol@lval+1,?___fttol+1
  5307  002A60  C021  F017         	movff	___fttol@lval+2,?___fttol+2
  5308  002A64  C022  F018         	movff	___fttol@lval+3,?___fttol+3
  5309  002A68  0012               	return	
  5310  002A6A                     __end_of___fttol:
  5311                           	opt stack 0
  5312                           tblptru	equ	0xFF8
  5313                           tblptrh	equ	0xFF7
  5314                           tblptrl	equ	0xFF6
  5315                           tablat	equ	0xFF5
  5316                           prodh	equ	0xFF4
  5317                           prodl	equ	0xFF3
  5318                           postinc0	equ	0xFEE
  5319                           wreg	equ	0xFE8
  5320                           indf2	equ	0xFDF
  5321                           postinc2	equ	0xFDE
  5322                           postdec2	equ	0xFDD
  5323                           fsr2h	equ	0xFDA
  5324                           fsr2l	equ	0xFD9
  5325                           status	equ	0xFD8
  5326                           
  5327 ;; *************** function ___ftsub *****************
  5328 ;; Defined at:
  5329 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;  f1              3   84[COMRAM] float 
  5332 ;;  f2              3   87[COMRAM] float 
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;		None
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  3   84[COMRAM] float 
  5337 ;; Registers used:
  5338 ;;		wreg, status,2, status,0, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5344 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5347 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5348 ;;Total ram usage:        6 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    2
  5351 ;; This function calls:
  5352 ;;		___ftadd
  5353 ;; This function is called by:
  5354 ;;		_sprintf
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text15
  5359  003060                     __ptext15:
  5360                           	opt stack 0
  5361  003060                     ___ftsub:
  5362                           	opt stack 27
  5363                           
  5364                           ;incstack = 0
  5365  003060  5058               	movf	___ftsub@f2,w,c
  5366  003062  1059               	iorwf	___ftsub@f2+1,w,c
  5367  003064  105A               	iorwf	___ftsub@f2+2,w,c
  5368  003066  B4D8               	btfsc	status,2,c
  5369  003068  D006               	goto	l673
  5370  00306A  0E00               	movlw	0
  5371  00306C  1A58               	xorwf	___ftsub@f2,f,c
  5372  00306E  0E00               	movlw	0
  5373  003070  1A59               	xorwf	___ftsub@f2+1,f,c
  5374  003072  0E80               	movlw	128
  5375  003074  1A5A               	xorwf	___ftsub@f2+2,f,c
  5376  003076                     l673:
  5377  003076  C055  F049         	movff	___ftsub@f1,___ftadd@f1
  5378  00307A  C056  F04A         	movff	___ftsub@f1+1,___ftadd@f1+1
  5379  00307E  C057  F04B         	movff	___ftsub@f1+2,___ftadd@f1+2
  5380  003082  C058  F04C         	movff	___ftsub@f2,___ftadd@f2
  5381  003086  C059  F04D         	movff	___ftsub@f2+1,___ftadd@f2+1
  5382  00308A  C05A  F04E         	movff	___ftsub@f2+2,___ftadd@f2+2
  5383  00308E  EC3E  F012         	call	___ftadd	;wreg free
  5384  003092  C049  F055         	movff	?___ftadd,?___ftsub
  5385  003096  C04A  F056         	movff	?___ftadd+1,?___ftsub+1
  5386  00309A  C04B  F057         	movff	?___ftadd+2,?___ftsub+2
  5387  00309E  0012               	return	
  5388  0030A0                     __end_of___ftsub:
  5389                           	opt stack 0
  5390                           tblptru	equ	0xFF8
  5391                           tblptrh	equ	0xFF7
  5392                           tblptrl	equ	0xFF6
  5393                           tablat	equ	0xFF5
  5394                           prodh	equ	0xFF4
  5395                           prodl	equ	0xFF3
  5396                           postinc0	equ	0xFEE
  5397                           wreg	equ	0xFE8
  5398                           indf2	equ	0xFDF
  5399                           postinc2	equ	0xFDE
  5400                           postdec2	equ	0xFDD
  5401                           fsr2h	equ	0xFDA
  5402                           fsr2l	equ	0xFD9
  5403                           status	equ	0xFD8
  5404                           
  5405 ;; *************** function ___ftadd *****************
  5406 ;; Defined at:
  5407 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  f1              3   72[COMRAM] float 
  5410 ;;  f2              3   75[COMRAM] float 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  exp1            1   83[COMRAM] unsigned char 
  5413 ;;  exp2            1   82[COMRAM] unsigned char 
  5414 ;;  sign            1   81[COMRAM] unsigned char 
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  3   72[COMRAM] float 
  5417 ;; Registers used:
  5418 ;;		wreg, status,2, status,0, cstack
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5424 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5425 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5426 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5427 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5428 ;;Total ram usage:       12 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; Hardware stack levels required when called:    1
  5431 ;; This function calls:
  5432 ;;		___ftpack
  5433 ;; This function is called by:
  5434 ;;		_sprintf
  5435 ;;		___ftsub
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439                           	psect	text16
  5440  00247C                     __ptext16:
  5441                           	opt stack 0
  5442  00247C                     ___ftadd:
  5443                           	opt stack 27
  5444                           
  5445                           ;incstack = 0
  5446  00247C  C04B  F04F         	movff	___ftadd@f1+2,??___ftadd
  5447  002480  6A50               	clrf	(??___ftadd+1)& (0+255),c
  5448  002482  6A51               	clrf	(??___ftadd+2)& (0+255),c
  5449  002484  344A               	rlcf	___ftadd@f1+1,w,c
  5450  002486  364F               	rlcf	??___ftadd& (0+255),f,c
  5451  002488  E301               	bnc	u1781
  5452  00248A  8050               	bsf	(??___ftadd+1)& (0+255),0,c
  5453  00248C                     u1781:
  5454  00248C  504F               	movf	??___ftadd,w,c
  5455  00248E  6E54               	movwf	___ftadd@exp1,c
  5456  002490  C04E  F04F         	movff	___ftadd@f2+2,??___ftadd
  5457  002494  6A50               	clrf	(??___ftadd+1)& (0+255),c
  5458  002496  6A51               	clrf	(??___ftadd+2)& (0+255),c
  5459  002498  344D               	rlcf	___ftadd@f2+1,w,c
  5460  00249A  364F               	rlcf	??___ftadd& (0+255),f,c
  5461  00249C  E301               	bnc	u1791
  5462  00249E  8050               	bsf	(??___ftadd+1)& (0+255),0,c
  5463  0024A0                     u1791:
  5464  0024A0  504F               	movf	??___ftadd,w,c
  5465  0024A2  6E53               	movwf	___ftadd@exp2,c
  5466  0024A4  5054               	movf	___ftadd@exp1,w,c
  5467  0024A6  B4D8               	btfsc	status,2,c
  5468  0024A8  D00B               	goto	u1820
  5469  0024AA  5053               	movf	___ftadd@exp2,w,c
  5470  0024AC  5C54               	subwf	___ftadd@exp1,w,c
  5471  0024AE  B0D8               	btfsc	status,0,c
  5472  0024B0  D00E               	goto	l591
  5473  0024B2  5054               	movf	___ftadd@exp1,w,c
  5474  0024B4  0800               	sublw	0
  5475  0024B6  2453               	addwf	___ftadd@exp2,w,c
  5476  0024B8  6E4F               	movwf	??___ftadd& (0+255),c
  5477  0024BA  0E18               	movlw	24
  5478  0024BC  644F               	cpfsgt	??___ftadd,c
  5479  0024BE  D007               	goto	l591
  5480  0024C0                     u1820:
  5481  0024C0  C04C  F049         	movff	___ftadd@f2,?___ftadd
  5482  0024C4  C04D  F04A         	movff	___ftadd@f2+1,?___ftadd+1
  5483  0024C8  C04E  F04B         	movff	___ftadd@f2+2,?___ftadd+2
  5484  0024CC  0012               	return	
  5485  0024CE                     l591:
  5486  0024CE  5053               	movf	___ftadd@exp2,w,c
  5487  0024D0  B4D8               	btfsc	status,2,c
  5488  0024D2  D00B               	goto	u1850
  5489  0024D4  5054               	movf	___ftadd@exp1,w,c
  5490  0024D6  5C53               	subwf	___ftadd@exp2,w,c
  5491  0024D8  B0D8               	btfsc	status,0,c
  5492  0024DA  D00E               	goto	l595
  5493  0024DC  5053               	movf	___ftadd@exp2,w,c
  5494  0024DE  0800               	sublw	0
  5495  0024E0  2454               	addwf	___ftadd@exp1,w,c
  5496  0024E2  6E4F               	movwf	??___ftadd& (0+255),c
  5497  0024E4  0E18               	movlw	24
  5498  0024E6  644F               	cpfsgt	??___ftadd,c
  5499  0024E8  D007               	goto	l595
  5500  0024EA                     u1850:
  5501  0024EA  C049  F049         	movff	___ftadd@f1,?___ftadd
  5502  0024EE  C04A  F04A         	movff	___ftadd@f1+1,?___ftadd+1
  5503  0024F2  C04B  F04B         	movff	___ftadd@f1+2,?___ftadd+2
  5504  0024F6  0012               	return	
  5505  0024F8                     l595:
  5506  0024F8  0E06               	movlw	6
  5507  0024FA  6E52               	movwf	___ftadd@sign,c
  5508  0024FC  BE4B               	btfsc	___ftadd@f1+2,7,c
  5509  0024FE  8E52               	bsf	___ftadd@sign,7,c
  5510  002500  BE4E               	btfsc	___ftadd@f2+2,7,c
  5511  002502  8C52               	bsf	___ftadd@sign,6,c
  5512  002504  8E4A               	bsf	___ftadd@f1+1,7,c
  5513  002506  0EFF               	movlw	255
  5514  002508  1649               	andwf	___ftadd@f1,f,c
  5515  00250A  0EFF               	movlw	255
  5516  00250C  164A               	andwf	___ftadd@f1+1,f,c
  5517  00250E  0E00               	movlw	0
  5518  002510  164B               	andwf	___ftadd@f1+2,f,c
  5519  002512  8E4D               	bsf	___ftadd@f2+1,7,c
  5520  002514  0EFF               	movlw	255
  5521  002516  164C               	andwf	___ftadd@f2,f,c
  5522  002518  0EFF               	movlw	255
  5523  00251A  164D               	andwf	___ftadd@f2+1,f,c
  5524  00251C  0E00               	movlw	0
  5525  00251E  164E               	andwf	___ftadd@f2+2,f,c
  5526  002520  5053               	movf	___ftadd@exp2,w,c
  5527  002522  5C54               	subwf	___ftadd@exp1,w,c
  5528  002524  B0D8               	btfsc	status,0,c
  5529  002526  D01B               	goto	l600
  5530  002528                     u1880:
  5531  002528  90D8               	bcf	status,0,c
  5532  00252A  364C               	rlcf	___ftadd@f2,f,c
  5533  00252C  364D               	rlcf	___ftadd@f2+1,f,c
  5534  00252E  364E               	rlcf	___ftadd@f2+2,f,c
  5535  002530  0653               	decf	___ftadd@exp2,f,c
  5536  002532  5054               	movf	___ftadd@exp1,w,c
  5537  002534  1853               	xorwf	___ftadd@exp2,w,c
  5538  002536  B4D8               	btfsc	status,2,c
  5539  002538  D00D               	goto	l605
  5540  00253A  0652               	decf	___ftadd@sign,f,c
  5541  00253C  C052  F04F         	movff	___ftadd@sign,??___ftadd
  5542  002540  0E07               	movlw	7
  5543  002542  164F               	andwf	??___ftadd,f,c
  5544  002544  B4D8               	btfsc	status,2,c
  5545  002546  D006               	goto	l605
  5546  002548  D7EF               	goto	u1880
  5547  00254A  90D8               	bcf	status,0,c
  5548  00254C  324B               	rrcf	___ftadd@f1+2,f,c
  5549  00254E  324A               	rrcf	___ftadd@f1+1,f,c
  5550  002550  3249               	rrcf	___ftadd@f1,f,c
  5551  002552  2A54               	incf	___ftadd@exp1,f,c
  5552  002554                     l605:
  5553  002554  5053               	movf	___ftadd@exp2,w,c
  5554  002556  1854               	xorwf	___ftadd@exp1,w,c
  5555  002558  B4D8               	btfsc	status,2,c
  5556  00255A  D01F               	goto	u1950
  5557  00255C  D7F6               	goto	l606
  5558  00255E                     l600:
  5559  00255E  5054               	movf	___ftadd@exp1,w,c
  5560  002560  5C53               	subwf	___ftadd@exp2,w,c
  5561  002562  B0D8               	btfsc	status,0,c
  5562  002564  D01A               	goto	u1950
  5563  002566                     u1920:
  5564  002566  90D8               	bcf	status,0,c
  5565  002568  3649               	rlcf	___ftadd@f1,f,c
  5566  00256A  364A               	rlcf	___ftadd@f1+1,f,c
  5567  00256C  364B               	rlcf	___ftadd@f1+2,f,c
  5568  00256E  0654               	decf	___ftadd@exp1,f,c
  5569  002570  5054               	movf	___ftadd@exp1,w,c
  5570  002572  1853               	xorwf	___ftadd@exp2,w,c
  5571  002574  B4D8               	btfsc	status,2,c
  5572  002576  D00D               	goto	l614
  5573  002578  0652               	decf	___ftadd@sign,f,c
  5574  00257A  C052  F04F         	movff	___ftadd@sign,??___ftadd
  5575  00257E  0E07               	movlw	7
  5576  002580  164F               	andwf	??___ftadd,f,c
  5577  002582  B4D8               	btfsc	status,2,c
  5578  002584  D006               	goto	l614
  5579  002586  D7EF               	goto	u1920
  5580  002588  90D8               	bcf	status,0,c
  5581  00258A  324E               	rrcf	___ftadd@f2+2,f,c
  5582  00258C  324D               	rrcf	___ftadd@f2+1,f,c
  5583  00258E  324C               	rrcf	___ftadd@f2,f,c
  5584  002590  2A53               	incf	___ftadd@exp2,f,c
  5585  002592                     l614:
  5586  002592  5053               	movf	___ftadd@exp2,w,c
  5587  002594  1854               	xorwf	___ftadd@exp1,w,c
  5588  002596  A4D8               	btfss	status,2,c
  5589  002598  D7F7               	goto	l615
  5590  00259A                     u1950:
  5591  00259A  AE52               	btfss	___ftadd@sign,7,c
  5592  00259C  D00C               	goto	l617
  5593  00259E  0EFF               	movlw	255
  5594  0025A0  1A49               	xorwf	___ftadd@f1,f,c
  5595  0025A2  0EFF               	movlw	255
  5596  0025A4  1A4A               	xorwf	___ftadd@f1+1,f,c
  5597  0025A6  0EFF               	movlw	255
  5598  0025A8  1A4B               	xorwf	___ftadd@f1+2,f,c
  5599  0025AA  0E01               	movlw	1
  5600  0025AC  2649               	addwf	___ftadd@f1,f,c
  5601  0025AE  0E00               	movlw	0
  5602  0025B0  224A               	addwfc	___ftadd@f1+1,f,c
  5603  0025B2  0E00               	movlw	0
  5604  0025B4  224B               	addwfc	___ftadd@f1+2,f,c
  5605  0025B6                     l617:
  5606  0025B6  AC52               	btfss	___ftadd@sign,6,c
  5607  0025B8  D00C               	goto	l618
  5608  0025BA  0EFF               	movlw	255
  5609  0025BC  1A4C               	xorwf	___ftadd@f2,f,c
  5610  0025BE  0EFF               	movlw	255
  5611  0025C0  1A4D               	xorwf	___ftadd@f2+1,f,c
  5612  0025C2  0EFF               	movlw	255
  5613  0025C4  1A4E               	xorwf	___ftadd@f2+2,f,c
  5614  0025C6  0E01               	movlw	1
  5615  0025C8  264C               	addwf	___ftadd@f2,f,c
  5616  0025CA  0E00               	movlw	0
  5617  0025CC  224D               	addwfc	___ftadd@f2+1,f,c
  5618  0025CE  0E00               	movlw	0
  5619  0025D0  224E               	addwfc	___ftadd@f2+2,f,c
  5620  0025D2                     l618:
  5621  0025D2  0E00               	movlw	0
  5622  0025D4  6E52               	movwf	___ftadd@sign,c
  5623  0025D6  5049               	movf	___ftadd@f1,w,c
  5624  0025D8  264C               	addwf	___ftadd@f2,f,c
  5625  0025DA  504A               	movf	___ftadd@f1+1,w,c
  5626  0025DC  224D               	addwfc	___ftadd@f2+1,f,c
  5627  0025DE  504B               	movf	___ftadd@f1+2,w,c
  5628  0025E0  224E               	addwfc	___ftadd@f2+2,f,c
  5629  0025E2  AE4E               	btfss	___ftadd@f2+2,7,c
  5630  0025E4  D00E               	goto	l619
  5631  0025E6  0EFF               	movlw	255
  5632  0025E8  1A4C               	xorwf	___ftadd@f2,f,c
  5633  0025EA  0EFF               	movlw	255
  5634  0025EC  1A4D               	xorwf	___ftadd@f2+1,f,c
  5635  0025EE  0EFF               	movlw	255
  5636  0025F0  1A4E               	xorwf	___ftadd@f2+2,f,c
  5637  0025F2  0E01               	movlw	1
  5638  0025F4  264C               	addwf	___ftadd@f2,f,c
  5639  0025F6  0E00               	movlw	0
  5640  0025F8  224D               	addwfc	___ftadd@f2+1,f,c
  5641  0025FA  0E00               	movlw	0
  5642  0025FC  224E               	addwfc	___ftadd@f2+2,f,c
  5643  0025FE  0E01               	movlw	1
  5644  002600  6E52               	movwf	___ftadd@sign,c
  5645  002602                     l619:
  5646  002602  C04C  F001         	movff	___ftadd@f2,___ftpack@arg
  5647  002606  C04D  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5648  00260A  C04E  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5649  00260E  C054  F004         	movff	___ftadd@exp1,___ftpack@exp
  5650  002612  C052  F005         	movff	___ftadd@sign,___ftpack@sign
  5651  002616  EC13  F016         	call	___ftpack	;wreg free
  5652  00261A  C001  F049         	movff	?___ftpack,?___ftadd
  5653  00261E  C002  F04A         	movff	?___ftpack+1,?___ftadd+1
  5654  002622  C003  F04B         	movff	?___ftpack+2,?___ftadd+2
  5655  002626  0012               	return	
  5656  002628                     __end_of___ftadd:
  5657                           	opt stack 0
  5658                           tblptru	equ	0xFF8
  5659                           tblptrh	equ	0xFF7
  5660                           tblptrl	equ	0xFF6
  5661                           tablat	equ	0xFF5
  5662                           prodh	equ	0xFF4
  5663                           prodl	equ	0xFF3
  5664                           postinc0	equ	0xFEE
  5665                           wreg	equ	0xFE8
  5666                           indf2	equ	0xFDF
  5667                           postinc2	equ	0xFDE
  5668                           postdec2	equ	0xFDD
  5669                           fsr2h	equ	0xFDA
  5670                           fsr2l	equ	0xFD9
  5671                           status	equ	0xFD8
  5672                           
  5673 ;; *************** function ___ftneg *****************
  5674 ;; Defined at:
  5675 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;  f1              3   44[COMRAM] float 
  5678 ;; Auto vars:     Size  Location     Type
  5679 ;;		None
  5680 ;; Return value:  Size  Location     Type
  5681 ;;                  3   44[COMRAM] float 
  5682 ;; Registers used:
  5683 ;;		wreg, status,2, status,0
  5684 ;; Tracked objects:
  5685 ;;		On entry : 0/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5689 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5692 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5693 ;;Total ram usage:        3 bytes
  5694 ;; Hardware stack levels used:    1
  5695 ;; This function calls:
  5696 ;;		Nothing
  5697 ;; This function is called by:
  5698 ;;		_sprintf
  5699 ;; This function uses a non-reentrant model
  5700 ;;
  5701                           
  5702                           	psect	text17
  5703  0031F6                     __ptext17:
  5704                           	opt stack 0
  5705  0031F6                     ___ftneg:
  5706                           	opt stack 29
  5707                           
  5708                           ;incstack = 0
  5709  0031F6  502D               	movf	___ftneg@f1,w,c
  5710  0031F8  102E               	iorwf	___ftneg@f1+1,w,c
  5711  0031FA  102F               	iorwf	___ftneg@f1+2,w,c
  5712  0031FC  B4D8               	btfsc	status,2,c
  5713  0031FE  D006               	goto	l667
  5714  003200  0E00               	movlw	0
  5715  003202  1A2D               	xorwf	___ftneg@f1,f,c
  5716  003204  0E00               	movlw	0
  5717  003206  1A2E               	xorwf	___ftneg@f1+1,f,c
  5718  003208  0E80               	movlw	128
  5719  00320A  1A2F               	xorwf	___ftneg@f1+2,f,c
  5720  00320C                     l667:
  5721  00320C  C02D  F02D         	movff	___ftneg@f1,?___ftneg
  5722  003210  C02E  F02E         	movff	___ftneg@f1+1,?___ftneg+1
  5723  003214  C02F  F02F         	movff	___ftneg@f1+2,?___ftneg+2
  5724  003218  0012               	return		;funcret
  5725  00321A                     __end_of___ftneg:
  5726                           	opt stack 0
  5727                           tblptru	equ	0xFF8
  5728                           tblptrh	equ	0xFF7
  5729                           tblptrl	equ	0xFF6
  5730                           tablat	equ	0xFF5
  5731                           prodh	equ	0xFF4
  5732                           prodl	equ	0xFF3
  5733                           postinc0	equ	0xFEE
  5734                           wreg	equ	0xFE8
  5735                           indf2	equ	0xFDF
  5736                           postinc2	equ	0xFDE
  5737                           postdec2	equ	0xFDD
  5738                           fsr2h	equ	0xFDA
  5739                           fsr2l	equ	0xFD9
  5740                           status	equ	0xFD8
  5741                           
  5742 ;; *************** function ___ftge *****************
  5743 ;; Defined at:
  5744 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;  ff1             3   84[COMRAM] float 
  5747 ;;  ff2             3   87[COMRAM] float 
  5748 ;; Auto vars:     Size  Location     Type
  5749 ;;		None
  5750 ;; Return value:  Size  Location     Type
  5751 ;;		None               void
  5752 ;; Registers used:
  5753 ;;		wreg, status,2, status,0
  5754 ;; Tracked objects:
  5755 ;;		On entry : 0/0
  5756 ;;		On exit  : 0/0
  5757 ;;		Unchanged: 0/0
  5758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5759 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5761 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5762 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5763 ;;Total ram usage:        9 bytes
  5764 ;; Hardware stack levels used:    1
  5765 ;; This function calls:
  5766 ;;		Nothing
  5767 ;; This function is called by:
  5768 ;;		_sprintf
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           	psect	text18
  5773  002CD4                     __ptext18:
  5774                           	opt stack 0
  5775  002CD4                     ___ftge:
  5776                           	opt stack 29
  5777                           
  5778                           ;incstack = 0
  5779  002CD4  AE57               	btfss	___ftge@ff1+2,7,c
  5780  002CD6  D016               	goto	l649
  5781  002CD8  C055  F05B         	movff	___ftge@ff1,??___ftge
  5782  002CDC  C056  F05C         	movff	___ftge@ff1+1,??___ftge+1
  5783  002CE0  C057  F05D         	movff	___ftge@ff1+2,??___ftge+2
  5784  002CE4  1E5B               	comf	??___ftge,f,c
  5785  002CE6  1E5C               	comf	??___ftge+1,f,c
  5786  002CE8  1E5D               	comf	??___ftge+2,f,c
  5787  002CEA  2A5B               	incf	??___ftge,f,c
  5788  002CEC  0E00               	movlw	0
  5789  002CEE  225C               	addwfc	??___ftge+1,f,c
  5790  002CF0  225D               	addwfc	??___ftge+2,f,c
  5791  002CF2  0E00               	movlw	0
  5792  002CF4  245B               	addwf	??___ftge,w,c
  5793  002CF6  6E55               	movwf	___ftge@ff1,c
  5794  002CF8  0E00               	movlw	0
  5795  002CFA  205C               	addwfc	??___ftge+1,w,c
  5796  002CFC  6E56               	movwf	___ftge@ff1+1,c
  5797  002CFE  0E80               	movlw	128
  5798  002D00  205D               	addwfc	??___ftge+2,w,c
  5799  002D02  6E57               	movwf	___ftge@ff1+2,c
  5800  002D04                     l649:
  5801  002D04  AE5A               	btfss	___ftge@ff2+2,7,c
  5802  002D06  D016               	goto	l650
  5803  002D08  C058  F05B         	movff	___ftge@ff2,??___ftge
  5804  002D0C  C059  F05C         	movff	___ftge@ff2+1,??___ftge+1
  5805  002D10  C05A  F05D         	movff	___ftge@ff2+2,??___ftge+2
  5806  002D14  1E5B               	comf	??___ftge,f,c
  5807  002D16  1E5C               	comf	??___ftge+1,f,c
  5808  002D18  1E5D               	comf	??___ftge+2,f,c
  5809  002D1A  2A5B               	incf	??___ftge,f,c
  5810  002D1C  0E00               	movlw	0
  5811  002D1E  225C               	addwfc	??___ftge+1,f,c
  5812  002D20  225D               	addwfc	??___ftge+2,f,c
  5813  002D22  0E00               	movlw	0
  5814  002D24  245B               	addwf	??___ftge,w,c
  5815  002D26  6E58               	movwf	___ftge@ff2,c
  5816  002D28  0E00               	movlw	0
  5817  002D2A  205C               	addwfc	??___ftge+1,w,c
  5818  002D2C  6E59               	movwf	___ftge@ff2+1,c
  5819  002D2E  0E80               	movlw	128
  5820  002D30  205D               	addwfc	??___ftge+2,w,c
  5821  002D32  6E5A               	movwf	___ftge@ff2+2,c
  5822  002D34                     l650:
  5823  002D34  0E00               	movlw	0
  5824  002D36  1A55               	xorwf	___ftge@ff1,f,c
  5825  002D38  0E00               	movlw	0
  5826  002D3A  1A56               	xorwf	___ftge@ff1+1,f,c
  5827  002D3C  0E80               	movlw	128
  5828  002D3E  1A57               	xorwf	___ftge@ff1+2,f,c
  5829  002D40  0E00               	movlw	0
  5830  002D42  1A58               	xorwf	___ftge@ff2,f,c
  5831  002D44  0E00               	movlw	0
  5832  002D46  1A59               	xorwf	___ftge@ff2+1,f,c
  5833  002D48  0E80               	movlw	128
  5834  002D4A  1A5A               	xorwf	___ftge@ff2+2,f,c
  5835  002D4C  5058               	movf	___ftge@ff2,w,c
  5836  002D4E  5C55               	subwf	___ftge@ff1,w,c
  5837  002D50  5059               	movf	___ftge@ff2+1,w,c
  5838  002D52  5856               	subwfb	___ftge@ff1+1,w,c
  5839  002D54  505A               	movf	___ftge@ff2+2,w,c
  5840  002D56  5857               	subwfb	___ftge@ff1+2,w,c
  5841  002D58  B0D8               	btfsc	status,0,c
  5842  002D5A  D002               	goto	l2109
  5843  002D5C  90D8               	bcf	status,0,c
  5844  002D5E  0012               	return	
  5845  002D60                     l2109:
  5846  002D60  80D8               	bsf	status,0,c
  5847  002D62  0012               	return	
  5848  002D64                     __end_of___ftge:
  5849                           	opt stack 0
  5850                           tblptru	equ	0xFF8
  5851                           tblptrh	equ	0xFF7
  5852                           tblptrl	equ	0xFF6
  5853                           tablat	equ	0xFF5
  5854                           prodh	equ	0xFF4
  5855                           prodl	equ	0xFF3
  5856                           postinc0	equ	0xFEE
  5857                           wreg	equ	0xFE8
  5858                           indf2	equ	0xFDF
  5859                           postinc2	equ	0xFDE
  5860                           postdec2	equ	0xFDD
  5861                           fsr2h	equ	0xFDA
  5862                           fsr2l	equ	0xFD9
  5863                           status	equ	0xFD8
  5864                           
  5865 ;; *************** function ___ftdiv *****************
  5866 ;; Defined at:
  5867 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;  f1              3   69[COMRAM] float 
  5870 ;;  f2              3   72[COMRAM] float 
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;  f3              3   79[COMRAM] float 
  5873 ;;  sign            1   83[COMRAM] unsigned char 
  5874 ;;  exp             1   82[COMRAM] unsigned char 
  5875 ;;  cntr            1   78[COMRAM] unsigned char 
  5876 ;; Return value:  Size  Location     Type
  5877 ;;                  3   69[COMRAM] float 
  5878 ;; Registers used:
  5879 ;;		wreg, status,2, status,0, cstack
  5880 ;; Tracked objects:
  5881 ;;		On entry : 0/0
  5882 ;;		On exit  : 0/0
  5883 ;;		Unchanged: 0/0
  5884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5885 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5886 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5887 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5888 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5889 ;;Total ram usage:       15 bytes
  5890 ;; Hardware stack levels used:    1
  5891 ;; Hardware stack levels required when called:    1
  5892 ;; This function calls:
  5893 ;;		___ftpack
  5894 ;; This function is called by:
  5895 ;;		_main
  5896 ;;		_sprintf
  5897 ;; This function uses a non-reentrant model
  5898 ;;
  5899                           
  5900                           	psect	text19
  5901  002A6A                     __ptext19:
  5902                           	opt stack 0
  5903  002A6A                     ___ftdiv:
  5904                           	opt stack 28
  5905                           
  5906                           ;incstack = 0
  5907  002A6A  C048  F04C         	movff	___ftdiv@f1+2,??___ftdiv
  5908  002A6E  6A4D               	clrf	(??___ftdiv+1)& (0+255),c
  5909  002A70  6A4E               	clrf	(??___ftdiv+2)& (0+255),c
  5910  002A72  3447               	rlcf	___ftdiv@f1+1,w,c
  5911  002A74  364C               	rlcf	??___ftdiv& (0+255),f,c
  5912  002A76  E301               	bnc	u2421
  5913  002A78  804D               	bsf	(??___ftdiv+1)& (0+255),0,c
  5914  002A7A                     u2421:
  5915  002A7A  504C               	movf	??___ftdiv,w,c
  5916  002A7C  6E53               	movwf	___ftdiv@exp,c
  5917  002A7E  5053               	movf	___ftdiv@exp,w,c
  5918  002A80  A4D8               	btfss	status,2,c
  5919  002A82  D007               	goto	l624
  5920  002A84  0E00               	movlw	0
  5921  002A86  6E46               	movwf	?___ftdiv,c
  5922  002A88  0E00               	movlw	0
  5923  002A8A  6E47               	movwf	?___ftdiv+1,c
  5924  002A8C  0E00               	movlw	0
  5925  002A8E  6E48               	movwf	?___ftdiv+2,c
  5926  002A90  0012               	return	
  5927  002A92                     l624:
  5928  002A92  C04B  F04C         	movff	___ftdiv@f2+2,??___ftdiv
  5929  002A96  6A4D               	clrf	(??___ftdiv+1)& (0+255),c
  5930  002A98  6A4E               	clrf	(??___ftdiv+2)& (0+255),c
  5931  002A9A  344A               	rlcf	___ftdiv@f2+1,w,c
  5932  002A9C  364C               	rlcf	??___ftdiv& (0+255),f,c
  5933  002A9E  E301               	bnc	u2441
  5934  002AA0  804D               	bsf	(??___ftdiv+1)& (0+255),0,c
  5935  002AA2                     u2441:
  5936  002AA2  504C               	movf	??___ftdiv,w,c
  5937  002AA4  6E54               	movwf	___ftdiv@sign,c
  5938  002AA6  5054               	movf	___ftdiv@sign,w,c
  5939  002AA8  A4D8               	btfss	status,2,c
  5940  002AAA  D007               	goto	l626
  5941  002AAC  0E00               	movlw	0
  5942  002AAE  6E46               	movwf	?___ftdiv,c
  5943  002AB0  0E00               	movlw	0
  5944  002AB2  6E47               	movwf	?___ftdiv+1,c
  5945  002AB4  0E00               	movlw	0
  5946  002AB6  6E48               	movwf	?___ftdiv+2,c
  5947  002AB8  0012               	return	
  5948  002ABA                     l626:
  5949  002ABA  0E00               	movlw	0
  5950  002ABC  6E50               	movwf	___ftdiv@f3,c
  5951  002ABE  0E00               	movlw	0
  5952  002AC0  6E51               	movwf	___ftdiv@f3+1,c
  5953  002AC2  0E00               	movlw	0
  5954  002AC4  6E52               	movwf	___ftdiv@f3+2,c
  5955  002AC6  5054               	movf	___ftdiv@sign,w,c
  5956  002AC8  0F89               	addlw	137
  5957  002ACA  5E53               	subwf	___ftdiv@exp,f,c
  5958  002ACC  C048  F054         	movff	___ftdiv@f1+2,___ftdiv@sign
  5959  002AD0  504B               	movf	___ftdiv@f2+2,w,c
  5960  002AD2  1A54               	xorwf	___ftdiv@sign,f,c
  5961  002AD4  0E80               	movlw	128
  5962  002AD6  1654               	andwf	___ftdiv@sign,f,c
  5963  002AD8  8E47               	bsf	___ftdiv@f1+1,7,c
  5964  002ADA  0EFF               	movlw	255
  5965  002ADC  1646               	andwf	___ftdiv@f1,f,c
  5966  002ADE  0EFF               	movlw	255
  5967  002AE0  1647               	andwf	___ftdiv@f1+1,f,c
  5968  002AE2  0E00               	movlw	0
  5969  002AE4  1648               	andwf	___ftdiv@f1+2,f,c
  5970  002AE6  8E4A               	bsf	___ftdiv@f2+1,7,c
  5971  002AE8  0EFF               	movlw	255
  5972  002AEA  1649               	andwf	___ftdiv@f2,f,c
  5973  002AEC  0EFF               	movlw	255
  5974  002AEE  164A               	andwf	___ftdiv@f2+1,f,c
  5975  002AF0  0E00               	movlw	0
  5976  002AF2  164B               	andwf	___ftdiv@f2+2,f,c
  5977  002AF4  0E18               	movlw	24
  5978  002AF6  6E4F               	movwf	___ftdiv@cntr,c
  5979  002AF8  90D8               	bcf	status,0,c
  5980  002AFA  3650               	rlcf	___ftdiv@f3,f,c
  5981  002AFC  3651               	rlcf	___ftdiv@f3+1,f,c
  5982  002AFE  3652               	rlcf	___ftdiv@f3+2,f,c
  5983  002B00  5049               	movf	___ftdiv@f2,w,c
  5984  002B02  5C46               	subwf	___ftdiv@f1,w,c
  5985  002B04  504A               	movf	___ftdiv@f2+1,w,c
  5986  002B06  5847               	subwfb	___ftdiv@f1+1,w,c
  5987  002B08  504B               	movf	___ftdiv@f2+2,w,c
  5988  002B0A  5848               	subwfb	___ftdiv@f1+2,w,c
  5989  002B0C  A0D8               	btfss	status,0,c
  5990  002B0E  D007               	goto	l628
  5991  002B10  5049               	movf	___ftdiv@f2,w,c
  5992  002B12  5E46               	subwf	___ftdiv@f1,f,c
  5993  002B14  504A               	movf	___ftdiv@f2+1,w,c
  5994  002B16  5A47               	subwfb	___ftdiv@f1+1,f,c
  5995  002B18  504B               	movf	___ftdiv@f2+2,w,c
  5996  002B1A  5A48               	subwfb	___ftdiv@f1+2,f,c
  5997  002B1C  8050               	bsf	___ftdiv@f3,0,c
  5998  002B1E                     l628:
  5999  002B1E  90D8               	bcf	status,0,c
  6000  002B20  3646               	rlcf	___ftdiv@f1,f,c
  6001  002B22  3647               	rlcf	___ftdiv@f1+1,f,c
  6002  002B24  3648               	rlcf	___ftdiv@f1+2,f,c
  6003  002B26  2E4F               	decfsz	___ftdiv@cntr,f,c
  6004  002B28  D7E7               	goto	l627
  6005  002B2A  C050  F001         	movff	___ftdiv@f3,___ftpack@arg
  6006  002B2E  C051  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6007  002B32  C052  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6008  002B36  C053  F004         	movff	___ftdiv@exp,___ftpack@exp
  6009  002B3A  C054  F005         	movff	___ftdiv@sign,___ftpack@sign
  6010  002B3E  EC13  F016         	call	___ftpack	;wreg free
  6011  002B42  C001  F046         	movff	?___ftpack,?___ftdiv
  6012  002B46  C002  F047         	movff	?___ftpack+1,?___ftdiv+1
  6013  002B4A  C003  F048         	movff	?___ftpack+2,?___ftdiv+2
  6014  002B4E  0012               	return	
  6015  002B50                     __end_of___ftdiv:
  6016                           	opt stack 0
  6017                           tblptru	equ	0xFF8
  6018                           tblptrh	equ	0xFF7
  6019                           tblptrl	equ	0xFF6
  6020                           tablat	equ	0xFF5
  6021                           prodh	equ	0xFF4
  6022                           prodl	equ	0xFF3
  6023                           postinc0	equ	0xFEE
  6024                           wreg	equ	0xFE8
  6025                           indf2	equ	0xFDF
  6026                           postinc2	equ	0xFDE
  6027                           postdec2	equ	0xFDD
  6028                           fsr2h	equ	0xFDA
  6029                           fsr2l	equ	0xFD9
  6030                           status	equ	0xFD8
  6031                           
  6032 ;; *************** function ___lwtoft *****************
  6033 ;; Defined at:
  6034 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;  c               2    8[COMRAM] unsigned int 
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;		None
  6039 ;; Return value:  Size  Location     Type
  6040 ;;                  3    8[COMRAM] float 
  6041 ;; Registers used:
  6042 ;;		wreg, status,2, status,0, cstack
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6048 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;Total ram usage:        3 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:    1
  6055 ;; This function calls:
  6056 ;;		___ftpack
  6057 ;; This function is called by:
  6058 ;;		_main
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           	psect	text20
  6063  00321A                     __ptext20:
  6064                           	opt stack 0
  6065  00321A                     ___lwtoft:
  6066                           	opt stack 29
  6067                           
  6068                           ;incstack = 0
  6069  00321A  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  6070  00321E  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  6071  003222  6A03               	clrf	___ftpack@arg+2,c
  6072  003224  0E8E               	movlw	142
  6073  003226  6E04               	movwf	___ftpack@exp,c
  6074  003228  0E00               	movlw	0
  6075  00322A  6E05               	movwf	___ftpack@sign,c
  6076  00322C  EC13  F016         	call	___ftpack	;wreg free
  6077  003230  C001  F009         	movff	?___ftpack,?___lwtoft
  6078  003234  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  6079  003238  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  6080  00323C  0012               	return	
  6081  00323E                     __end_of___lwtoft:
  6082                           	opt stack 0
  6083                           tblptru	equ	0xFF8
  6084                           tblptrh	equ	0xFF7
  6085                           tblptrl	equ	0xFF6
  6086                           tablat	equ	0xFF5
  6087                           prodh	equ	0xFF4
  6088                           prodl	equ	0xFF3
  6089                           postinc0	equ	0xFEE
  6090                           wreg	equ	0xFE8
  6091                           indf2	equ	0xFDF
  6092                           postinc2	equ	0xFDE
  6093                           postdec2	equ	0xFDD
  6094                           fsr2h	equ	0xFDA
  6095                           fsr2l	equ	0xFD9
  6096                           status	equ	0xFD8
  6097                           
  6098 ;; *************** function ___ftpack *****************
  6099 ;; Defined at:
  6100 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6101 ;; Parameters:    Size  Location     Type
  6102 ;;  arg             3    0[COMRAM] unsigned um
  6103 ;;  exp             1    3[COMRAM] unsigned char 
  6104 ;;  sign            1    4[COMRAM] unsigned char 
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;		None
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  3    0[COMRAM] float 
  6109 ;; Registers used:
  6110 ;;		wreg, status,2, status,0
  6111 ;; Tracked objects:
  6112 ;;		On entry : 0/0
  6113 ;;		On exit  : 0/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6116 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6118 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6119 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;Total ram usage:        8 bytes
  6121 ;; Hardware stack levels used:    1
  6122 ;; This function calls:
  6123 ;;		Nothing
  6124 ;; This function is called by:
  6125 ;;		___ftadd
  6126 ;;		___ftdiv
  6127 ;;		___ftmul
  6128 ;;		___lltoft
  6129 ;;		___lwtoft
  6130 ;; This function uses a non-reentrant model
  6131 ;;
  6132                           
  6133                           	psect	text21
  6134  002C26                     __ptext21:
  6135                           	opt stack 0
  6136  002C26                     ___ftpack:
  6137                           	opt stack 27
  6138                           
  6139                           ;incstack = 0
  6140  002C26  5004               	movf	___ftpack@exp,w,c
  6141  002C28  B4D8               	btfsc	status,2,c
  6142  002C2A  D005               	goto	u1700
  6143  002C2C  5001               	movf	___ftpack@arg,w,c
  6144  002C2E  1002               	iorwf	___ftpack@arg+1,w,c
  6145  002C30  1003               	iorwf	___ftpack@arg+2,w,c
  6146  002C32  A4D8               	btfss	status,2,c
  6147  002C34  D00C               	goto	l560
  6148  002C36                     u1700:
  6149  002C36  0E00               	movlw	0
  6150  002C38  6E01               	movwf	?___ftpack,c
  6151  002C3A  0E00               	movlw	0
  6152  002C3C  6E02               	movwf	?___ftpack+1,c
  6153  002C3E  0E00               	movlw	0
  6154  002C40  6E03               	movwf	?___ftpack+2,c
  6155  002C42  0012               	return	
  6156  002C44  2A04               	incf	___ftpack@exp,f,c
  6157  002C46  90D8               	bcf	status,0,c
  6158  002C48  3203               	rrcf	___ftpack@arg+2,f,c
  6159  002C4A  3202               	rrcf	___ftpack@arg+1,f,c
  6160  002C4C  3201               	rrcf	___ftpack@arg,f,c
  6161  002C4E                     l560:
  6162  002C4E  0E00               	movlw	0
  6163  002C50  1401               	andwf	___ftpack@arg,w,c
  6164  002C52  6E06               	movwf	??___ftpack& (0+255),c
  6165  002C54  0E00               	movlw	0
  6166  002C56  1402               	andwf	___ftpack@arg+1,w,c
  6167  002C58  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6168  002C5A  0EFE               	movlw	254
  6169  002C5C  1403               	andwf	___ftpack@arg+2,w,c
  6170  002C5E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6171  002C60  5006               	movf	??___ftpack,w,c
  6172  002C62  1007               	iorwf	??___ftpack+1,w,c
  6173  002C64  1008               	iorwf	??___ftpack+2,w,c
  6174  002C66  B4D8               	btfsc	status,2,c
  6175  002C68  D00C               	goto	l563
  6176  002C6A  D7EC               	goto	l561
  6177  002C6C  2A04               	incf	___ftpack@exp,f,c
  6178  002C6E  0E01               	movlw	1
  6179  002C70  2601               	addwf	___ftpack@arg,f,c
  6180  002C72  0E00               	movlw	0
  6181  002C74  2202               	addwfc	___ftpack@arg+1,f,c
  6182  002C76  0E00               	movlw	0
  6183  002C78  2203               	addwfc	___ftpack@arg+2,f,c
  6184  002C7A  90D8               	bcf	status,0,c
  6185  002C7C  3203               	rrcf	___ftpack@arg+2,f,c
  6186  002C7E  3202               	rrcf	___ftpack@arg+1,f,c
  6187  002C80  3201               	rrcf	___ftpack@arg,f,c
  6188  002C82                     l563:
  6189  002C82  0E00               	movlw	0
  6190  002C84  1401               	andwf	___ftpack@arg,w,c
  6191  002C86  6E06               	movwf	??___ftpack& (0+255),c
  6192  002C88  0E00               	movlw	0
  6193  002C8A  1402               	andwf	___ftpack@arg+1,w,c
  6194  002C8C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6195  002C8E  0EFF               	movlw	255
  6196  002C90  1403               	andwf	___ftpack@arg+2,w,c
  6197  002C92  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6198  002C94  5006               	movf	??___ftpack,w,c
  6199  002C96  1007               	iorwf	??___ftpack+1,w,c
  6200  002C98  1008               	iorwf	??___ftpack+2,w,c
  6201  002C9A  B4D8               	btfsc	status,2,c
  6202  002C9C  D006               	goto	l566
  6203  002C9E  D7E6               	goto	l564
  6204  002CA0  0604               	decf	___ftpack@exp,f,c
  6205  002CA2  90D8               	bcf	status,0,c
  6206  002CA4  3601               	rlcf	___ftpack@arg,f,c
  6207  002CA6  3602               	rlcf	___ftpack@arg+1,f,c
  6208  002CA8  3603               	rlcf	___ftpack@arg+2,f,c
  6209  002CAA                     l566:
  6210  002CAA  BE02               	btfsc	___ftpack@arg+1,7,c
  6211  002CAC  D003               	goto	u1740
  6212  002CAE  0E02               	movlw	2
  6213  002CB0  6004               	cpfslt	___ftpack@exp,c
  6214  002CB2  D7F6               	goto	l567
  6215  002CB4                     u1740:
  6216  002CB4  A004               	btfss	___ftpack@exp,0,c
  6217  002CB6  9E02               	bcf	___ftpack@arg+1,7,c
  6218  002CB8  90D8               	bcf	status,0,c
  6219  002CBA  3204               	rrcf	___ftpack@exp,f,c
  6220  002CBC  5004               	movf	___ftpack@exp,w,c
  6221  002CBE  1203               	iorwf	___ftpack@arg+2,f,c
  6222  002CC0  5005               	movf	___ftpack@sign,w,c
  6223  002CC2  A4D8               	btfss	status,2,c
  6224  002CC4  8E03               	bsf	___ftpack@arg+2,7,c
  6225  002CC6  C001  F001         	movff	___ftpack@arg,?___ftpack
  6226  002CCA  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6227  002CCE  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6228  002CD2  0012               	return	
  6229  002CD4                     __end_of___ftpack:
  6230                           	opt stack 0
  6231                           tblptru	equ	0xFF8
  6232                           tblptrh	equ	0xFF7
  6233                           tblptrl	equ	0xFF6
  6234                           tablat	equ	0xFF5
  6235                           prodh	equ	0xFF4
  6236                           prodl	equ	0xFF3
  6237                           postinc0	equ	0xFEE
  6238                           wreg	equ	0xFE8
  6239                           indf2	equ	0xFDF
  6240                           postinc2	equ	0xFDE
  6241                           postdec2	equ	0xFDD
  6242                           fsr2h	equ	0xFDA
  6243                           fsr2l	equ	0xFD9
  6244                           status	equ	0xFD8
  6245                           
  6246 ;; *************** function _SYSTEM_Initialize *****************
  6247 ;; Defined at:
  6248 ;;		line 110 in file "mcc_generated_files/mcc.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;		None
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;		None
  6253 ;; Return value:  Size  Location     Type
  6254 ;;                  1    wreg      void 
  6255 ;; Registers used:
  6256 ;;		wreg, status,2, cstack
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6266 ;;Total ram usage:        0 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    2
  6269 ;; This function calls:
  6270 ;;		_ADC_Initialize
  6271 ;;		_OSCILLATOR_Initialize
  6272 ;;		_PIN_MANAGER_Initialize
  6273 ;;		_PWM2_Initialize
  6274 ;;		_TMR2_Initialize
  6275 ;; This function is called by:
  6276 ;;		_main
  6277 ;; This function uses a non-reentrant model
  6278 ;;
  6279                           
  6280                           	psect	text22
  6281  00328C                     __ptext22:
  6282                           	opt stack 0
  6283  00328C                     _SYSTEM_Initialize:
  6284                           	opt stack 28
  6285                           
  6286                           ;mcc.c: 113: PIN_MANAGER_Initialize();
  6287                           
  6288                           ;incstack = 0
  6289  00328C  ECD3  F018         	call	_PIN_MANAGER_Initialize	;wreg free
  6290                           
  6291                           ;mcc.c: 114: OSCILLATOR_Initialize();
  6292  003290  EC7D  F019         	call	_OSCILLATOR_Initialize	;wreg free
  6293                           
  6294                           ;mcc.c: 115: ADC_Initialize();
  6295  003294  EC51  F019         	call	_ADC_Initialize	;wreg free
  6296                           
  6297                           ;mcc.c: 116: TMR2_Initialize();
  6298  003298  EC5C  F019         	call	_TMR2_Initialize	;wreg free
  6299                           
  6300                           ;mcc.c: 117: PWM2_Initialize();
  6301  00329C  EC70  F019         	call	_PWM2_Initialize	;wreg free
  6302  0032A0  0012               	return		;funcret
  6303  0032A2                     __end_of_SYSTEM_Initialize:
  6304                           	opt stack 0
  6305                           tblptru	equ	0xFF8
  6306                           tblptrh	equ	0xFF7
  6307                           tblptrl	equ	0xFF6
  6308                           tablat	equ	0xFF5
  6309                           prodh	equ	0xFF4
  6310                           prodl	equ	0xFF3
  6311                           postinc0	equ	0xFEE
  6312                           wreg	equ	0xFE8
  6313                           indf2	equ	0xFDF
  6314                           postinc2	equ	0xFDE
  6315                           postdec2	equ	0xFDD
  6316                           fsr2h	equ	0xFDA
  6317                           fsr2l	equ	0xFD9
  6318                           status	equ	0xFD8
  6319                           
  6320 ;; *************** function _TMR2_Initialize *****************
  6321 ;; Defined at:
  6322 ;;		line 58 in file "mcc_generated_files/tmr2.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;		None
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;		None
  6327 ;; Return value:  Size  Location     Type
  6328 ;;                  1    wreg      void 
  6329 ;; Registers used:
  6330 ;;		wreg, status,2, cstack
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6340 ;;Total ram usage:        0 bytes
  6341 ;; Hardware stack levels used:    1
  6342 ;; Hardware stack levels required when called:    1
  6343 ;; This function calls:
  6344 ;;		_TMR2_StartTimer
  6345 ;; This function is called by:
  6346 ;;		_SYSTEM_Initialize
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           	psect	text23
  6351  0032B8                     __ptext23:
  6352                           	opt stack 0
  6353  0032B8                     _TMR2_Initialize:
  6354                           	opt stack 28
  6355                           
  6356                           ;tmr2.c: 62: T2CON = 0x02;
  6357                           
  6358                           ;incstack = 0
  6359  0032B8  0E02               	movlw	2
  6360  0032BA  6ECA               	movwf	4042,c	;volatile
  6361                           
  6362                           ;tmr2.c: 65: PR2 = 0x7C;
  6363  0032BC  0E7C               	movlw	124
  6364  0032BE  6ECB               	movwf	4043,c	;volatile
  6365                           
  6366                           ;tmr2.c: 68: TMR2 = 0x00;
  6367  0032C0  0E00               	movlw	0
  6368  0032C2  6ECC               	movwf	4044,c	;volatile
  6369                           
  6370                           ;tmr2.c: 71: PIR1bits.TMR2IF = 0;
  6371  0032C4  929E               	bcf	3998,1,c	;volatile
  6372                           
  6373                           ;tmr2.c: 74: TMR2_StartTimer();
  6374  0032C6  EC82  F019         	call	_TMR2_StartTimer	;wreg free
  6375  0032CA  0012               	return		;funcret
  6376  0032CC                     __end_of_TMR2_Initialize:
  6377                           	opt stack 0
  6378                           tblptru	equ	0xFF8
  6379                           tblptrh	equ	0xFF7
  6380                           tblptrl	equ	0xFF6
  6381                           tablat	equ	0xFF5
  6382                           prodh	equ	0xFF4
  6383                           prodl	equ	0xFF3
  6384                           postinc0	equ	0xFEE
  6385                           wreg	equ	0xFE8
  6386                           indf2	equ	0xFDF
  6387                           postinc2	equ	0xFDE
  6388                           postdec2	equ	0xFDD
  6389                           fsr2h	equ	0xFDA
  6390                           fsr2l	equ	0xFD9
  6391                           status	equ	0xFD8
  6392                           
  6393 ;; *************** function _TMR2_StartTimer *****************
  6394 ;; Defined at:
  6395 ;;		line 77 in file "mcc_generated_files/tmr2.c"
  6396 ;; Parameters:    Size  Location     Type
  6397 ;;		None
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;		None
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  1    wreg      void 
  6402 ;; Registers used:
  6403 ;;		None
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6413 ;;Total ram usage:        0 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; This function calls:
  6416 ;;		Nothing
  6417 ;; This function is called by:
  6418 ;;		_TMR2_Initialize
  6419 ;; This function uses a non-reentrant model
  6420 ;;
  6421                           
  6422                           	psect	text24
  6423  003304                     __ptext24:
  6424                           	opt stack 0
  6425  003304                     _TMR2_StartTimer:
  6426                           	opt stack 28
  6427                           
  6428                           ;tmr2.c: 79: T2CONbits.TMR2ON = 1;
  6429                           
  6430                           ;incstack = 0
  6431  003304  84CA               	bsf	4042,2,c	;volatile
  6432  003306  0012               	return		;funcret
  6433  003308                     __end_of_TMR2_StartTimer:
  6434                           	opt stack 0
  6435                           tblptru	equ	0xFF8
  6436                           tblptrh	equ	0xFF7
  6437                           tblptrl	equ	0xFF6
  6438                           tablat	equ	0xFF5
  6439                           prodh	equ	0xFF4
  6440                           prodl	equ	0xFF3
  6441                           postinc0	equ	0xFEE
  6442                           wreg	equ	0xFE8
  6443                           indf2	equ	0xFDF
  6444                           postinc2	equ	0xFDE
  6445                           postdec2	equ	0xFDD
  6446                           fsr2h	equ	0xFDA
  6447                           fsr2l	equ	0xFD9
  6448                           status	equ	0xFD8
  6449                           
  6450 ;; *************** function _PWM2_Initialize *****************
  6451 ;; Defined at:
  6452 ;;		line 64 in file "mcc_generated_files/pwm2.c"
  6453 ;; Parameters:    Size  Location     Type
  6454 ;;		None
  6455 ;; Auto vars:     Size  Location     Type
  6456 ;;		None
  6457 ;; Return value:  Size  Location     Type
  6458 ;;                  1    wreg      void 
  6459 ;; Registers used:
  6460 ;;		wreg, status,2
  6461 ;; Tracked objects:
  6462 ;;		On entry : 0/0
  6463 ;;		On exit  : 0/0
  6464 ;;		Unchanged: 0/0
  6465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6470 ;;Total ram usage:        0 bytes
  6471 ;; Hardware stack levels used:    1
  6472 ;; This function calls:
  6473 ;;		Nothing
  6474 ;; This function is called by:
  6475 ;;		_SYSTEM_Initialize
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479                           	psect	text25
  6480  0032E0                     __ptext25:
  6481                           	opt stack 0
  6482  0032E0                     _PWM2_Initialize:
  6483                           	opt stack 29
  6484                           
  6485                           ;pwm2.c: 68: CCP2CON = 0x3C;
  6486                           
  6487                           ;incstack = 0
  6488  0032E0  0E3C               	movlw	60
  6489  0032E2  6EBA               	movwf	4026,c	;volatile
  6490                           
  6491                           ;pwm2.c: 71: CCPR2L = 0x7C;
  6492  0032E4  0E7C               	movlw	124
  6493  0032E6  6EBB               	movwf	4027,c	;volatile
  6494                           
  6495                           ;pwm2.c: 74: CCPR2H = 0x00;
  6496  0032E8  0E00               	movlw	0
  6497  0032EA  6EBC               	movwf	4028,c	;volatile
  6498  0032EC  0012               	return		;funcret
  6499  0032EE                     __end_of_PWM2_Initialize:
  6500                           	opt stack 0
  6501                           tblptru	equ	0xFF8
  6502                           tblptrh	equ	0xFF7
  6503                           tblptrl	equ	0xFF6
  6504                           tablat	equ	0xFF5
  6505                           prodh	equ	0xFF4
  6506                           prodl	equ	0xFF3
  6507                           postinc0	equ	0xFEE
  6508                           wreg	equ	0xFE8
  6509                           indf2	equ	0xFDF
  6510                           postinc2	equ	0xFDE
  6511                           postdec2	equ	0xFDD
  6512                           fsr2h	equ	0xFDA
  6513                           fsr2l	equ	0xFD9
  6514                           status	equ	0xFD8
  6515                           
  6516 ;; *************** function _PIN_MANAGER_Initialize *****************
  6517 ;; Defined at:
  6518 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;		None
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;		None
  6523 ;; Return value:  Size  Location     Type
  6524 ;;                  1    wreg      void 
  6525 ;; Registers used:
  6526 ;;		wreg, status,2
  6527 ;; Tracked objects:
  6528 ;;		On entry : 0/0
  6529 ;;		On exit  : 0/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6536 ;;Total ram usage:        0 bytes
  6537 ;; Hardware stack levels used:    1
  6538 ;; This function calls:
  6539 ;;		Nothing
  6540 ;; This function is called by:
  6541 ;;		_SYSTEM_Initialize
  6542 ;; This function uses a non-reentrant model
  6543 ;;
  6544                           
  6545                           	psect	text26
  6546  0031A6                     __ptext26:
  6547                           	opt stack 0
  6548  0031A6                     _PIN_MANAGER_Initialize:
  6549                           	opt stack 29
  6550                           
  6551                           ;pin_manager.c: 51: LATB = 0x0;
  6552                           
  6553                           ;incstack = 0
  6554  0031A6  0E00               	movlw	0
  6555  0031A8  6E8A               	movwf	3978,c	;volatile
  6556                           
  6557                           ;pin_manager.c: 52: LATA = 0x0;
  6558  0031AA  0E00               	movlw	0
  6559  0031AC  6E89               	movwf	3977,c	;volatile
  6560                           
  6561                           ;pin_manager.c: 53: ANSEL = 0x1F;
  6562  0031AE  0E1F               	movlw	31
  6563  0031B0  6E7E               	movwf	3966,c	;volatile
  6564                           
  6565                           ;pin_manager.c: 54: ANSELH = 0x0;
  6566  0031B2  0E00               	movlw	0
  6567  0031B4  6E7F               	movwf	3967,c	;volatile
  6568                           
  6569                           ;pin_manager.c: 55: LATC = 0x00;
  6570  0031B6  0E00               	movlw	0
  6571  0031B8  6E8B               	movwf	3979,c	;volatile
  6572                           
  6573                           ;pin_manager.c: 56: TRISB = 0x0;
  6574  0031BA  0E00               	movlw	0
  6575  0031BC  6E93               	movwf	3987,c	;volatile
  6576                           
  6577                           ;pin_manager.c: 57: TRISC = 0xFD;
  6578  0031BE  0EFD               	movlw	253
  6579  0031C0  6E94               	movwf	3988,c	;volatile
  6580                           
  6581                           ;pin_manager.c: 58: WPUB = 0x0;
  6582  0031C2  0E00               	movlw	0
  6583  0031C4  6E7C               	movwf	3964,c	;volatile
  6584                           
  6585                           ;pin_manager.c: 59: TRISA = 0xFF;
  6586  0031C6  6892               	setf	3986,c	;volatile
  6587                           
  6588                           ;pin_manager.c: 61: INTCON2bits.nRBPU = 0x1;
  6589  0031C8  8EF1               	bsf	intcon2,7,c	;volatile
  6590                           
  6591                           ;pin_manager.c: 65: INTCONbits.RBIE = 0;
  6592  0031CA  96F2               	bcf	intcon,3,c	;volatile
  6593                           
  6594                           ;pin_manager.c: 66: INTCON2bits.nRBPU = 0x01;
  6595  0031CC  8EF1               	bsf	intcon2,7,c	;volatile
  6596  0031CE  0012               	return		;funcret
  6597  0031D0                     __end_of_PIN_MANAGER_Initialize:
  6598                           	opt stack 0
  6599                           tblptru	equ	0xFF8
  6600                           tblptrh	equ	0xFF7
  6601                           tblptrl	equ	0xFF6
  6602                           tablat	equ	0xFF5
  6603                           prodh	equ	0xFF4
  6604                           prodl	equ	0xFF3
  6605                           intcon	equ	0xFF2
  6606                           intcon2	equ	0xFF1
  6607                           postinc0	equ	0xFEE
  6608                           wreg	equ	0xFE8
  6609                           indf2	equ	0xFDF
  6610                           postinc2	equ	0xFDE
  6611                           postdec2	equ	0xFDD
  6612                           fsr2h	equ	0xFDA
  6613                           fsr2l	equ	0xFD9
  6614                           status	equ	0xFD8
  6615                           
  6616 ;; *************** function _OSCILLATOR_Initialize *****************
  6617 ;; Defined at:
  6618 ;;		line 120 in file "mcc_generated_files/mcc.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;		None
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;		None
  6623 ;; Return value:  Size  Location     Type
  6624 ;;                  1    wreg      void 
  6625 ;; Registers used:
  6626 ;;		wreg, status,2
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6636 ;;Total ram usage:        0 bytes
  6637 ;; Hardware stack levels used:    1
  6638 ;; This function calls:
  6639 ;;		Nothing
  6640 ;; This function is called by:
  6641 ;;		_SYSTEM_Initialize
  6642 ;; This function uses a non-reentrant model
  6643 ;;
  6644                           
  6645                           	psect	text27
  6646  0032FA                     __ptext27:
  6647                           	opt stack 0
  6648  0032FA                     _OSCILLATOR_Initialize:
  6649                           	opt stack 29
  6650                           
  6651                           ;mcc.c: 123: OSCCON = 0x62;
  6652                           
  6653                           ;incstack = 0
  6654  0032FA  0E62               	movlw	98
  6655  0032FC  6ED3               	movwf	4051,c	;volatile
  6656                           
  6657                           ;mcc.c: 125: OSCTUNE = 0x00;
  6658  0032FE  0E00               	movlw	0
  6659  003300  6E9B               	movwf	3995,c	;volatile
  6660  003302  0012               	return		;funcret
  6661  003304                     __end_of_OSCILLATOR_Initialize:
  6662                           	opt stack 0
  6663                           tblptru	equ	0xFF8
  6664                           tblptrh	equ	0xFF7
  6665                           tblptrl	equ	0xFF6
  6666                           tablat	equ	0xFF5
  6667                           prodh	equ	0xFF4
  6668                           prodl	equ	0xFF3
  6669                           intcon	equ	0xFF2
  6670                           intcon2	equ	0xFF1
  6671                           postinc0	equ	0xFEE
  6672                           wreg	equ	0xFE8
  6673                           indf2	equ	0xFDF
  6674                           postinc2	equ	0xFDE
  6675                           postdec2	equ	0xFDD
  6676                           fsr2h	equ	0xFDA
  6677                           fsr2l	equ	0xFD9
  6678                           status	equ	0xFD8
  6679                           
  6680 ;; *************** function _ADC_Initialize *****************
  6681 ;; Defined at:
  6682 ;;		line 59 in file "mcc_generated_files/adc.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;		None
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;		None
  6687 ;; Return value:  Size  Location     Type
  6688 ;;                  1    wreg      void 
  6689 ;; Registers used:
  6690 ;;		wreg, status,2
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;Total ram usage:        0 bytes
  6701 ;; Hardware stack levels used:    1
  6702 ;; This function calls:
  6703 ;;		Nothing
  6704 ;; This function is called by:
  6705 ;;		_SYSTEM_Initialize
  6706 ;; This function uses a non-reentrant model
  6707 ;;
  6708                           
  6709                           	psect	text28
  6710  0032A2                     __ptext28:
  6711                           	opt stack 0
  6712  0032A2                     _ADC_Initialize:
  6713                           	opt stack 29
  6714                           
  6715                           ;adc.c: 64: ADCON0 = 0x01;
  6716                           
  6717                           ;incstack = 0
  6718  0032A2  0E01               	movlw	1
  6719  0032A4  6EC2               	movwf	4034,c	;volatile
  6720                           
  6721                           ;adc.c: 67: ADCON1 = 0x00;
  6722  0032A6  0E00               	movlw	0
  6723  0032A8  6EC1               	movwf	4033,c	;volatile
  6724                           
  6725                           ;adc.c: 70: ADCON2 = 0x88;
  6726  0032AA  0E88               	movlw	136
  6727  0032AC  6EC0               	movwf	4032,c	;volatile
  6728                           
  6729                           ;adc.c: 73: ADRESL = 0x00;
  6730  0032AE  0E00               	movlw	0
  6731  0032B0  6EC3               	movwf	4035,c	;volatile
  6732                           
  6733                           ;adc.c: 76: ADRESH = 0x00;
  6734  0032B2  0E00               	movlw	0
  6735  0032B4  6EC4               	movwf	4036,c	;volatile
  6736  0032B6  0012               	return		;funcret
  6737  0032B8                     __end_of_ADC_Initialize:
  6738                           	opt stack 0
  6739                           tblptru	equ	0xFF8
  6740                           tblptrh	equ	0xFF7
  6741                           tblptrl	equ	0xFF6
  6742                           tablat	equ	0xFF5
  6743                           prodh	equ	0xFF4
  6744                           prodl	equ	0xFF3
  6745                           intcon	equ	0xFF2
  6746                           intcon2	equ	0xFF1
  6747                           postinc0	equ	0xFEE
  6748                           wreg	equ	0xFE8
  6749                           indf2	equ	0xFDF
  6750                           postinc2	equ	0xFDE
  6751                           postdec2	equ	0xFDD
  6752                           fsr2h	equ	0xFDA
  6753                           fsr2l	equ	0xFD9
  6754                           status	equ	0xFD8
  6755                           
  6756 ;; *************** function _PWM2_LoadDutyValue *****************
  6757 ;; Defined at:
  6758 ;;		line 78 in file "mcc_generated_files/pwm2.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;  dutyValue       2    0[COMRAM] unsigned int 
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;		None
  6763 ;; Return value:  Size  Location     Type
  6764 ;;                  1    wreg      void 
  6765 ;; Registers used:
  6766 ;;		wreg, status,2, status,0
  6767 ;; Tracked objects:
  6768 ;;		On entry : 0/0
  6769 ;;		On exit  : 0/0
  6770 ;;		Unchanged: 0/0
  6771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6772 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6775 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6776 ;;Total ram usage:        4 bytes
  6777 ;; Hardware stack levels used:    1
  6778 ;; This function calls:
  6779 ;;		Nothing
  6780 ;; This function is called by:
  6781 ;;		_main
  6782 ;; This function uses a non-reentrant model
  6783 ;;
  6784                           
  6785                           	psect	text29
  6786  00311A                     __ptext29:
  6787                           	opt stack 0
  6788  00311A                     _PWM2_LoadDutyValue:
  6789                           	opt stack 30
  6790                           
  6791                           ;pwm2.c: 80: CCPR2L = ((dutyValue & 0x03FC) >> 2);
  6792                           
  6793                           ;incstack = 0
  6794  00311A  C001  F003         	movff	PWM2_LoadDutyValue@dutyValue,??_PWM2_LoadDutyValue
  6795  00311E  C002  F004         	movff	PWM2_LoadDutyValue@dutyValue+1,??_PWM2_LoadDutyValue+1
  6796  003122  90D8               	bcf	status,0,c
  6797  003124  3204               	rrcf	??_PWM2_LoadDutyValue+1,f,c
  6798  003126  3203               	rrcf	??_PWM2_LoadDutyValue,f,c
  6799  003128  90D8               	bcf	status,0,c
  6800  00312A  3204               	rrcf	??_PWM2_LoadDutyValue+1,f,c
  6801  00312C  3203               	rrcf	??_PWM2_LoadDutyValue,f,c
  6802  00312E  5003               	movf	??_PWM2_LoadDutyValue,w,c
  6803  003130  6EBB               	movwf	4027,c	;volatile
  6804                           
  6805                           ;pwm2.c: 83: CCP2CON = (CCP2CON & 0xCF) | ((dutyValue & 0x0003) << 4);
  6806  003132  C001  F003         	movff	PWM2_LoadDutyValue@dutyValue,??_PWM2_LoadDutyValue
  6807  003136  0E03               	movlw	3
  6808  003138  1603               	andwf	??_PWM2_LoadDutyValue,f,c
  6809  00313A  3A03               	swapf	??_PWM2_LoadDutyValue,f,c
  6810  00313C  0EF0               	movlw	240
  6811  00313E  1603               	andwf	??_PWM2_LoadDutyValue,f,c
  6812  003140  50BA               	movf	4026,w,c	;volatile
  6813  003142  0BCF               	andlw	207
  6814  003144  1003               	iorwf	??_PWM2_LoadDutyValue,w,c
  6815  003146  6EBA               	movwf	4026,c	;volatile
  6816  003148  0012               	return		;funcret
  6817  00314A                     __end_of_PWM2_LoadDutyValue:
  6818                           	opt stack 0
  6819                           tblptru	equ	0xFF8
  6820                           tblptrh	equ	0xFF7
  6821                           tblptrl	equ	0xFF6
  6822                           tablat	equ	0xFF5
  6823                           prodh	equ	0xFF4
  6824                           prodl	equ	0xFF3
  6825                           intcon	equ	0xFF2
  6826                           intcon2	equ	0xFF1
  6827                           postinc0	equ	0xFEE
  6828                           wreg	equ	0xFE8
  6829                           indf2	equ	0xFDF
  6830                           postinc2	equ	0xFDE
  6831                           postdec2	equ	0xFDD
  6832                           fsr2h	equ	0xFDA
  6833                           fsr2l	equ	0xFD9
  6834                           status	equ	0xFD8
  6835                           
  6836 ;; *************** function _LCD_Initialize *****************
  6837 ;; Defined at:
  6838 ;;		line 4 in file "lcd.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;		None
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;		None
  6843 ;; Return value:  Size  Location     Type
  6844 ;;                  1    wreg      void 
  6845 ;; Registers used:
  6846 ;;		wreg, status,2, status,0, cstack
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6854 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6855 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6856 ;;Total ram usage:        1 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; Hardware stack levels required when called:    2
  6859 ;; This function calls:
  6860 ;;		_LCDPutCmd
  6861 ;; This function is called by:
  6862 ;;		_main
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           	psect	text30
  6867  0030DE                     __ptext30:
  6868                           	opt stack 0
  6869  0030DE                     _LCD_Initialize:
  6870                           	opt stack 28
  6871                           
  6872                           ;lcd.c: 7: PORTB = 0;
  6873                           
  6874                           ;incstack = 0
  6875  0030DE  0E00               	movlw	0
  6876  0030E0  6E81               	movwf	3969,c	;volatile
  6877                           
  6878                           ;lcd.c: 9: TRISB = 0x00;
  6879  0030E2  0E00               	movlw	0
  6880  0030E4  6E93               	movwf	3987,c	;volatile
  6881                           
  6882                           ;lcd.c: 12: PORTBbits.RB7 = 1;
  6883  0030E6  8E81               	bsf	3969,7,c	;volatile
  6884                           
  6885                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  6886  0030E8  0E31               	movlw	49
  6887  0030EA  6E05               	movwf	??_LCD_Initialize& (0+255),c
  6888  0030EC  0EB2               	movlw	178
  6889  0030EE                     u3357:
  6890  0030EE  2EE8               	decfsz	wreg,f,c
  6891  0030F0  D7FE               	bra	u3357
  6892  0030F2  2E05               	decfsz	??_LCD_Initialize& (0+255),f,c
  6893  0030F4  D7FC               	bra	u3357
  6894  0030F6  F000 F000          	nop2	
  6895                           
  6896                           ;lcd.c: 18: LCDPutCmd(0x32);
  6897  0030FA  0E32               	movlw	50
  6898  0030FC  EC50  F018         	call	_LCDPutCmd
  6899                           
  6900                           ;lcd.c: 21: LCDPutCmd(0x28);
  6901  003100  0E28               	movlw	40
  6902  003102  EC50  F018         	call	_LCDPutCmd
  6903                           
  6904                           ;lcd.c: 24: LCDPutCmd(0x0C);
  6905  003106  0E0C               	movlw	12
  6906  003108  EC50  F018         	call	_LCDPutCmd
  6907                           
  6908                           ;lcd.c: 26: LCDPutCmd(0x01);
  6909  00310C  0E01               	movlw	1
  6910  00310E  EC50  F018         	call	_LCDPutCmd
  6911                           
  6912                           ;lcd.c: 29: LCDPutCmd(0x06);
  6913  003112  0E06               	movlw	6
  6914  003114  EC50  F018         	call	_LCDPutCmd
  6915  003118  0012               	return		;funcret
  6916  00311A                     __end_of_LCD_Initialize:
  6917                           	opt stack 0
  6918                           tblptru	equ	0xFF8
  6919                           tblptrh	equ	0xFF7
  6920                           tblptrl	equ	0xFF6
  6921                           tablat	equ	0xFF5
  6922                           prodh	equ	0xFF4
  6923                           prodl	equ	0xFF3
  6924                           intcon	equ	0xFF2
  6925                           intcon2	equ	0xFF1
  6926                           postinc0	equ	0xFEE
  6927                           wreg	equ	0xFE8
  6928                           indf2	equ	0xFDF
  6929                           postinc2	equ	0xFDE
  6930                           postdec2	equ	0xFDD
  6931                           fsr2h	equ	0xFDA
  6932                           fsr2l	equ	0xFD9
  6933                           status	equ	0xFD8
  6934                           
  6935 ;; *************** function _LCDPutStr *****************
  6936 ;; Defined at:
  6937 ;;		line 93 in file "lcd.c"
  6938 ;; Parameters:    Size  Location     Type
  6939 ;;  str             2    4[COMRAM] PTR const unsigned char 
  6940 ;;		 -> VOLTAGE(20), STR_1(11), 
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;  i               1    8[COMRAM] unsigned char 
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1    wreg      void 
  6945 ;; Registers used:
  6946 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6952 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6953 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6954 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;Total ram usage:        5 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:    2
  6959 ;; This function calls:
  6960 ;;		_LCDPutChar
  6961 ;; This function is called by:
  6962 ;;		_main
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           	psect	text31
  6967  002E6A                     __ptext31:
  6968                           	opt stack 0
  6969  002E6A                     _LCDPutStr:
  6970                           	opt stack 28
  6971                           
  6972                           ;lcd.c: 95: uint8_t i=0;
  6973                           
  6974                           ;incstack = 0
  6975  002E6A  0E00               	movlw	0
  6976  002E6C  6E09               	movwf	LCDPutStr@i,c
  6977                           
  6978                           ;lcd.c: 98: while (str[i])
  6979  002E6E  D01E               	goto	l140
  6980  002E70                     
  6981                           ;lcd.c: 99: {
  6982                           ;lcd.c: 101: LCDPutChar(str[i++]);
  6983  002E70  5009               	movf	LCDPutStr@i,w,c
  6984  002E72  0D01               	mullw	1
  6985  002E74  C005  F007         	movff	LCDPutStr@str,??_LCDPutStr
  6986  002E78  C006  F008         	movff	LCDPutStr@str+1,??_LCDPutStr+1
  6987  002E7C  50F3               	movf	prodl,w,c
  6988  002E7E  2607               	addwf	??_LCDPutStr,f,c
  6989  002E80  50F4               	movf	prodh,w,c
  6990  002E82  2208               	addwfc	??_LCDPutStr+1,f,c
  6991  002E84  C007  FFF6         	movff	??_LCDPutStr,tblptrl
  6992  002E88  C008  FFF7         	movff	??_LCDPutStr+1,tblptrh
  6993  002E8C  0E00               	movlw	low (__smallconst shr (0+16))
  6994  002E8E  6EF8               	movwf	tblptru,c
  6995  002E90  0E0F               	movlw	(high __ramtop+-1)
  6996  002E92  64F7               	cpfsgt	tblptrh,c
  6997  002E94  D003               	bra	u2697
  6998  002E96  0008               	tblrd		*
  6999  002E98  50F5               	movf	tablat,w,c
  7000  002E9A  D005               	bra	u2690
  7001  002E9C                     u2697:
  7002  002E9C  CFF6 FFE9          	movff	tblptrl,fsr0l
  7003  002EA0  CFF7 FFEA          	movff	tblptrh,fsr0h
  7004  002EA4  50EF               	movf	indf0,w,c
  7005  002EA6                     u2690:
  7006  002EA6  ECA5  F018         	call	_LCDPutChar
  7007  002EAA  2A09               	incf	LCDPutStr@i,f,c
  7008  002EAC                     l140:
  7009  002EAC  5009               	movf	LCDPutStr@i,w,c
  7010  002EAE  0D01               	mullw	1
  7011  002EB0  C005  F007         	movff	LCDPutStr@str,??_LCDPutStr
  7012  002EB4  C006  F008         	movff	LCDPutStr@str+1,??_LCDPutStr+1
  7013  002EB8  50F3               	movf	prodl,w,c
  7014  002EBA  2607               	addwf	??_LCDPutStr,f,c
  7015  002EBC  50F4               	movf	prodh,w,c
  7016  002EBE  2208               	addwfc	??_LCDPutStr+1,f,c
  7017  002EC0  C007  FFF6         	movff	??_LCDPutStr,tblptrl
  7018  002EC4  C008  FFF7         	movff	??_LCDPutStr+1,tblptrh
  7019  002EC8  0E00               	movlw	low (__smallconst shr (0+16))
  7020  002ECA  6EF8               	movwf	tblptru,c
  7021  002ECC  0E0F               	movlw	(high __ramtop+-1)
  7022  002ECE  64F7               	cpfsgt	tblptrh,c
  7023  002ED0  D003               	bra	u2707
  7024  002ED2  0008               	tblrd		*
  7025  002ED4  50F5               	movf	tablat,w,c
  7026  002ED6  D005               	bra	u2700
  7027  002ED8                     u2707:
  7028  002ED8  CFF6 FFE9          	movff	tblptrl,fsr0l
  7029  002EDC  CFF7 FFEA          	movff	tblptrh,fsr0h
  7030  002EE0  50EF               	movf	indf0,w,c
  7031  002EE2                     u2700:
  7032  002EE2  0900               	iorlw	0
  7033  002EE4  B4D8               	btfsc	status,2,c
  7034  002EE6  0012               	return	
  7035  002EE8  D7C3               	goto	l141
  7036  002EEA                     __end_of_LCDPutStr:
  7037                           	opt stack 0
  7038                           tblptru	equ	0xFF8
  7039                           tblptrh	equ	0xFF7
  7040                           tblptrl	equ	0xFF6
  7041                           tablat	equ	0xFF5
  7042                           prodh	equ	0xFF4
  7043                           prodl	equ	0xFF3
  7044                           intcon	equ	0xFF2
  7045                           intcon2	equ	0xFF1
  7046                           indf0	equ	0xFEF
  7047                           postinc0	equ	0xFEE
  7048                           fsr0h	equ	0xFEA
  7049                           fsr0l	equ	0xFE9
  7050                           wreg	equ	0xFE8
  7051                           indf2	equ	0xFDF
  7052                           postinc2	equ	0xFDE
  7053                           postdec2	equ	0xFDD
  7054                           fsr2h	equ	0xFDA
  7055                           fsr2l	equ	0xFD9
  7056                           status	equ	0xFD8
  7057                           
  7058 ;; *************** function _LCDPutChar *****************
  7059 ;; Defined at:
  7060 ;;		line 61 in file "lcd.c"
  7061 ;; Parameters:    Size  Location     Type
  7062 ;;  ch              1    wreg     unsigned char 
  7063 ;; Auto vars:     Size  Location     Type
  7064 ;;  ch              1    3[COMRAM] unsigned char 
  7065 ;; Return value:  Size  Location     Type
  7066 ;;                  1    wreg      void 
  7067 ;; Registers used:
  7068 ;;		wreg, status,2, status,0, cstack
  7069 ;; Tracked objects:
  7070 ;;		On entry : 0/0
  7071 ;;		On exit  : 0/0
  7072 ;;		Unchanged: 0/0
  7073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7075 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7076 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7077 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7078 ;;Total ram usage:        2 bytes
  7079 ;; Hardware stack levels used:    1
  7080 ;; Hardware stack levels required when called:    1
  7081 ;; This function calls:
  7082 ;;		_LCDWriteNibble
  7083 ;; This function is called by:
  7084 ;;		_LCDPutStr
  7085 ;; This function uses a non-reentrant model
  7086 ;;
  7087                           
  7088                           	psect	text32
  7089  00314A                     __ptext32:
  7090                           	opt stack 0
  7091  00314A                     _LCDPutChar:
  7092                           	opt stack 28
  7093                           
  7094                           ;incstack = 0
  7095                           ;LCDPutChar@ch stored from wreg
  7096  00314A  6E04               	movwf	LCDPutChar@ch,c
  7097                           
  7098                           ;lcd.c: 63: _delay((unsigned long)((5)*(10000000/4000.0)));
  7099  00314C  0E11               	movlw	17
  7100  00314E  6E03               	movwf	??_LCDPutChar& (0+255),c
  7101  003150  0E3A               	movlw	58
  7102  003152                     u3367:
  7103  003152  2EE8               	decfsz	wreg,f,c
  7104  003154  D7FE               	bra	u3367
  7105  003156  2E03               	decfsz	??_LCDPutChar& (0+255),f,c
  7106  003158  D7FC               	bra	u3367
  7107  00315A  F000 F000          	nop2	
  7108                           
  7109                           ;lcd.c: 66: LCDWriteNibble(ch,1);
  7110  00315E  0E01               	movlw	1
  7111  003160  6E01               	movwf	LCDWriteNibble@rs,c
  7112  003162  5004               	movf	LCDPutChar@ch,w,c
  7113  003164  ECBD  F018         	call	_LCDWriteNibble
  7114                           
  7115                           ;lcd.c: 69: ch = (ch << 4);
  7116  003168  3804               	swapf	LCDPutChar@ch,w,c
  7117  00316A  0BF0               	andlw	240
  7118  00316C  6E04               	movwf	LCDPutChar@ch,c
  7119                           
  7120                           ;lcd.c: 72: LCDWriteNibble(ch,1);
  7121  00316E  0E01               	movlw	1
  7122  003170  6E01               	movwf	LCDWriteNibble@rs,c
  7123  003172  5004               	movf	LCDPutChar@ch,w,c
  7124  003174  ECBD  F018         	call	_LCDWriteNibble
  7125  003178  0012               	return		;funcret
  7126  00317A                     __end_of_LCDPutChar:
  7127                           	opt stack 0
  7128                           tblptru	equ	0xFF8
  7129                           tblptrh	equ	0xFF7
  7130                           tblptrl	equ	0xFF6
  7131                           tablat	equ	0xFF5
  7132                           prodh	equ	0xFF4
  7133                           prodl	equ	0xFF3
  7134                           intcon	equ	0xFF2
  7135                           intcon2	equ	0xFF1
  7136                           indf0	equ	0xFEF
  7137                           postinc0	equ	0xFEE
  7138                           fsr0h	equ	0xFEA
  7139                           fsr0l	equ	0xFE9
  7140                           wreg	equ	0xFE8
  7141                           indf2	equ	0xFDF
  7142                           postinc2	equ	0xFDE
  7143                           postdec2	equ	0xFDD
  7144                           fsr2h	equ	0xFDA
  7145                           fsr2l	equ	0xFD9
  7146                           status	equ	0xFD8
  7147                           
  7148 ;; *************** function _LCDGoto *****************
  7149 ;; Defined at:
  7150 ;;		line 106 in file "lcd.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  pos             1    wreg     unsigned char 
  7153 ;;  ln              1    4[COMRAM] unsigned char 
  7154 ;; Auto vars:     Size  Location     Type
  7155 ;;  pos             1    9[COMRAM] unsigned char 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  1    wreg      void 
  7158 ;; Registers used:
  7159 ;;		wreg, status,2, status,0, cstack
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7165 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;Total ram usage:        6 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    2
  7172 ;; This function calls:
  7173 ;;		_LCDPutCmd
  7174 ;; This function is called by:
  7175 ;;		_main
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           	psect	text33
  7180  00301C                     __ptext33:
  7181                           	opt stack 0
  7182  00301C                     _LCDGoto:
  7183                           	opt stack 28
  7184                           
  7185                           ;incstack = 0
  7186                           ;LCDGoto@pos stored from wreg
  7187  00301C  6E0A               	movwf	LCDGoto@pos,c
  7188                           
  7189                           ;lcd.c: 109: if ((ln > (2-1)) || (pos > (16-1)))
  7190  00301E  0E02               	movlw	2
  7191  003020  6005               	cpfslt	LCDGoto@ln,c
  7192  003022  0012               	return	
  7193  003024  0E0F               	movlw	15
  7194  003026  640A               	cpfsgt	LCDGoto@pos,c
  7195  003028  D001               	goto	l146
  7196  00302A  0012               	return	
  7197  00302C                     l146:
  7198                           
  7199                           ;lcd.c: 113: }
  7200                           ;lcd.c: 116: LCDPutCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
  7201  00302C  0405               	decf	LCDGoto@ln,w,c
  7202  00302E  B4D8               	btfsc	status,2,c
  7203  003030  D002               	goto	l151
  7204  003032  0E80               	movlw	128
  7205  003034  D001               	goto	L5
  7206  003036                     l151:
  7207  003036  0EC0               	movlw	192
  7208  003038                     L5:
  7209  003038  C00A  F006         	movff	LCDGoto@pos,??_LCDGoto
  7210  00303C  6A07               	clrf	(??_LCDGoto+1)& (0+255),c
  7211  00303E  1006               	iorwf	??_LCDGoto,w,c
  7212  003040  6E08               	movwf	_LCDGoto$428,c
  7213  003042  5007               	movf	??_LCDGoto+1,w,c
  7214  003044  6E09               	movwf	_LCDGoto$428+1,c
  7215  003046  5008               	movf	_LCDGoto$428,w,c
  7216  003048  EC50  F018         	call	_LCDPutCmd
  7217                           
  7218                           ;lcd.c: 119: _delay((unsigned long)((5)*(10000000/4000.0)));
  7219  00304C  0E11               	movlw	17
  7220  00304E  6E06               	movwf	??_LCDGoto& (0+255),c
  7221  003050  0E3A               	movlw	58
  7222  003052                     u3377:
  7223  003052  2EE8               	decfsz	wreg,f,c
  7224  003054  D7FE               	bra	u3377
  7225  003056  2E06               	decfsz	??_LCDGoto& (0+255),f,c
  7226  003058  D7FC               	bra	u3377
  7227  00305A  F000 F000          	nop2	
  7228  00305E  0012               	return		;funcret
  7229  003060                     __end_of_LCDGoto:
  7230                           	opt stack 0
  7231                           tblptru	equ	0xFF8
  7232                           tblptrh	equ	0xFF7
  7233                           tblptrl	equ	0xFF6
  7234                           tablat	equ	0xFF5
  7235                           prodh	equ	0xFF4
  7236                           prodl	equ	0xFF3
  7237                           intcon	equ	0xFF2
  7238                           intcon2	equ	0xFF1
  7239                           indf0	equ	0xFEF
  7240                           postinc0	equ	0xFEE
  7241                           fsr0h	equ	0xFEA
  7242                           fsr0l	equ	0xFE9
  7243                           wreg	equ	0xFE8
  7244                           indf2	equ	0xFDF
  7245                           postinc2	equ	0xFDE
  7246                           postdec2	equ	0xFDD
  7247                           fsr2h	equ	0xFDA
  7248                           fsr2l	equ	0xFD9
  7249                           status	equ	0xFD8
  7250                           
  7251 ;; *************** function _LCDPutCmd *****************
  7252 ;; Defined at:
  7253 ;;		line 76 in file "lcd.c"
  7254 ;; Parameters:    Size  Location     Type
  7255 ;;  ch              1    wreg     unsigned char 
  7256 ;; Auto vars:     Size  Location     Type
  7257 ;;  ch              1    3[COMRAM] unsigned char 
  7258 ;; Return value:  Size  Location     Type
  7259 ;;                  1    wreg      void 
  7260 ;; Registers used:
  7261 ;;		wreg, status,2, status,0, cstack
  7262 ;; Tracked objects:
  7263 ;;		On entry : 0/0
  7264 ;;		On exit  : 0/0
  7265 ;;		Unchanged: 0/0
  7266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7270 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7271 ;;Total ram usage:        2 bytes
  7272 ;; Hardware stack levels used:    1
  7273 ;; Hardware stack levels required when called:    1
  7274 ;; This function calls:
  7275 ;;		_LCDWriteNibble
  7276 ;; This function is called by:
  7277 ;;		_main
  7278 ;;		_LCD_Initialize
  7279 ;;		_LCDGoto
  7280 ;; This function uses a non-reentrant model
  7281 ;;
  7282                           
  7283                           	psect	text34
  7284  0030A0                     __ptext34:
  7285                           	opt stack 0
  7286  0030A0                     _LCDPutCmd:
  7287                           	opt stack 28
  7288                           
  7289                           ;incstack = 0
  7290                           ;LCDPutCmd@ch stored from wreg
  7291  0030A0  6E04               	movwf	LCDPutCmd@ch,c
  7292                           
  7293                           ;lcd.c: 78: _delay((unsigned long)((5)*(10000000/4000.0)));
  7294  0030A2  0E11               	movlw	17
  7295  0030A4  6E03               	movwf	??_LCDPutCmd& (0+255),c
  7296  0030A6  0E3A               	movlw	58
  7297  0030A8                     u3387:
  7298  0030A8  2EE8               	decfsz	wreg,f,c
  7299  0030AA  D7FE               	bra	u3387
  7300  0030AC  2E03               	decfsz	??_LCDPutCmd& (0+255),f,c
  7301  0030AE  D7FC               	bra	u3387
  7302  0030B0  F000 F000          	nop2	
  7303                           
  7304                           ;lcd.c: 81: LCDWriteNibble(ch,0);
  7305  0030B4  0E00               	movlw	0
  7306  0030B6  6E01               	movwf	LCDWriteNibble@rs,c
  7307  0030B8  5004               	movf	LCDPutCmd@ch,w,c
  7308  0030BA  ECBD  F018         	call	_LCDWriteNibble
  7309                           
  7310                           ;lcd.c: 84: ch = (ch << 4);
  7311  0030BE  3804               	swapf	LCDPutCmd@ch,w,c
  7312  0030C0  0BF0               	andlw	240
  7313  0030C2  6E04               	movwf	LCDPutCmd@ch,c
  7314                           
  7315                           ;lcd.c: 86: _delay((unsigned long)((1)*(10000000/4000.0)));
  7316  0030C4  0E04               	movlw	4
  7317  0030C6  6E03               	movwf	??_LCDPutCmd& (0+255),c
  7318  0030C8  0E3E               	movlw	62
  7319  0030CA                     u3397:
  7320  0030CA  2EE8               	decfsz	wreg,f,c
  7321  0030CC  D7FE               	bra	u3397
  7322  0030CE  2E03               	decfsz	??_LCDPutCmd& (0+255),f,c
  7323  0030D0  D7FC               	bra	u3397
  7324                           
  7325                           ;lcd.c: 89: LCDWriteNibble(ch,0);
  7326  0030D2  0E00               	movlw	0
  7327  0030D4  6E01               	movwf	LCDWriteNibble@rs,c
  7328  0030D6  5004               	movf	LCDPutCmd@ch,w,c
  7329  0030D8  ECBD  F018         	call	_LCDWriteNibble
  7330  0030DC  0012               	return		;funcret
  7331  0030DE                     __end_of_LCDPutCmd:
  7332                           	opt stack 0
  7333                           tblptru	equ	0xFF8
  7334                           tblptrh	equ	0xFF7
  7335                           tblptrl	equ	0xFF6
  7336                           tablat	equ	0xFF5
  7337                           prodh	equ	0xFF4
  7338                           prodl	equ	0xFF3
  7339                           intcon	equ	0xFF2
  7340                           intcon2	equ	0xFF1
  7341                           indf0	equ	0xFEF
  7342                           postinc0	equ	0xFEE
  7343                           fsr0h	equ	0xFEA
  7344                           fsr0l	equ	0xFE9
  7345                           wreg	equ	0xFE8
  7346                           indf2	equ	0xFDF
  7347                           postinc2	equ	0xFDE
  7348                           postdec2	equ	0xFDD
  7349                           fsr2h	equ	0xFDA
  7350                           fsr2l	equ	0xFD9
  7351                           status	equ	0xFD8
  7352                           
  7353 ;; *************** function _LCDWriteNibble *****************
  7354 ;; Defined at:
  7355 ;;		line 34 in file "lcd.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;  ch              1    wreg     unsigned char 
  7358 ;;  rs              1    0[COMRAM] unsigned char 
  7359 ;; Auto vars:     Size  Location     Type
  7360 ;;  ch              1    1[COMRAM] unsigned char 
  7361 ;; Return value:  Size  Location     Type
  7362 ;;                  1    wreg      void 
  7363 ;; Registers used:
  7364 ;;		wreg, status,2, status,0
  7365 ;; Tracked objects:
  7366 ;;		On entry : 0/0
  7367 ;;		On exit  : 0/0
  7368 ;;		Unchanged: 0/0
  7369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7370 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7374 ;;Total ram usage:        2 bytes
  7375 ;; Hardware stack levels used:    1
  7376 ;; This function calls:
  7377 ;;		Nothing
  7378 ;; This function is called by:
  7379 ;;		_LCDPutChar
  7380 ;;		_LCDPutCmd
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           	psect	text35
  7385  00317A                     __ptext35:
  7386                           	opt stack 0
  7387  00317A                     _LCDWriteNibble:
  7388                           	opt stack 28
  7389                           
  7390                           ;incstack = 0
  7391                           ;LCDWriteNibble@ch stored from wreg
  7392  00317A  6E02               	movwf	LCDWriteNibble@ch,c
  7393                           
  7394                           ;lcd.c: 37: ch = (ch >> 4);
  7395  00317C  3802               	swapf	LCDWriteNibble@ch,w,c
  7396  00317E  0B0F               	andlw	15
  7397  003180  6E02               	movwf	LCDWriteNibble@ch,c
  7398                           
  7399                           ;lcd.c: 40: ch = (ch & 0x0F);
  7400  003182  5002               	movf	LCDWriteNibble@ch,w,c
  7401  003184  0B0F               	andlw	15
  7402  003186  6E02               	movwf	LCDWriteNibble@ch,c
  7403                           
  7404                           ;lcd.c: 43: PORTB = (PORTB & 0xF0);
  7405  003188  5081               	movf	3969,w,c	;volatile
  7406  00318A  0BF0               	andlw	240
  7407  00318C  6E81               	movwf	3969,c	;volatile
  7408                           
  7409                           ;lcd.c: 46: PORTB = (PORTB | ch);
  7410  00318E  5081               	movf	3969,w,c	;volatile
  7411  003190  1002               	iorwf	LCDWriteNibble@ch,w,c
  7412  003192  6E81               	movwf	3969,c	;volatile
  7413                           
  7414                           ;lcd.c: 49: PORTBbits.RB5 = rs;
  7415  003194  B001               	btfsc	LCDWriteNibble@rs,0,c
  7416  003196  D002               	bra	u1775
  7417  003198  9A81               	bcf	3969,5,c	;volatile
  7418  00319A  D001               	bra	u1776
  7419  00319C                     u1775:
  7420  00319C  8A81               	bsf	3969,5,c	;volatile
  7421  00319E                     u1776:
  7422                           
  7423                           ;lcd.c: 52: PORTBbits.RB6 = 0;
  7424  00319E  9C81               	bcf	3969,6,c	;volatile
  7425                           
  7426                           ;lcd.c: 55: PORTBbits.RB4 = 1;
  7427  0031A0  8881               	bsf	3969,4,c	;volatile
  7428                           
  7429                           ;lcd.c: 58: PORTBbits.RB4 = 0;
  7430  0031A2  9881               	bcf	3969,4,c	;volatile
  7431  0031A4  0012               	return		;funcret
  7432  0031A6                     __end_of_LCDWriteNibble:
  7433                           	opt stack 0
  7434                           tblptru	equ	0xFF8
  7435                           tblptrh	equ	0xFF7
  7436                           tblptrl	equ	0xFF6
  7437                           tablat	equ	0xFF5
  7438                           prodh	equ	0xFF4
  7439                           prodl	equ	0xFF3
  7440                           intcon	equ	0xFF2
  7441                           intcon2	equ	0xFF1
  7442                           indf0	equ	0xFEF
  7443                           postinc0	equ	0xFEE
  7444                           fsr0h	equ	0xFEA
  7445                           fsr0l	equ	0xFE9
  7446                           wreg	equ	0xFE8
  7447                           indf2	equ	0xFDF
  7448                           postinc2	equ	0xFDE
  7449                           postdec2	equ	0xFDD
  7450                           fsr2h	equ	0xFDA
  7451                           fsr2l	equ	0xFD9
  7452                           status	equ	0xFD8
  7453                           
  7454 ;; *************** function _ADC_StartConversion *****************
  7455 ;; Defined at:
  7456 ;;		line 80 in file "mcc_generated_files/adc.c"
  7457 ;; Parameters:    Size  Location     Type
  7458 ;;  channel         1    wreg     enum E2897
  7459 ;; Auto vars:     Size  Location     Type
  7460 ;;  channel         1    1[COMRAM] enum E2897
  7461 ;; Return value:  Size  Location     Type
  7462 ;;                  1    wreg      void 
  7463 ;; Registers used:
  7464 ;;		wreg, status,2, status,0
  7465 ;; Tracked objects:
  7466 ;;		On entry : 0/0
  7467 ;;		On exit  : 0/0
  7468 ;;		Unchanged: 0/0
  7469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7471 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7472 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7473 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;Total ram usage:        2 bytes
  7475 ;; Hardware stack levels used:    1
  7476 ;; This function calls:
  7477 ;;		Nothing
  7478 ;; This function is called by:
  7479 ;;		_main
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           	psect	text36
  7484  00325C                     __ptext36:
  7485                           	opt stack 0
  7486  00325C                     _ADC_StartConversion:
  7487                           	opt stack 30
  7488                           
  7489                           ;incstack = 0
  7490                           ;ADC_StartConversion@channel stored from wreg
  7491  00325C  6E02               	movwf	ADC_StartConversion@channel,c
  7492                           
  7493                           ;adc.c: 83: ADCON0bits.CHS = channel;
  7494  00325E  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
  7495  003262  4601               	rlncf	??_ADC_StartConversion,f,c
  7496  003264  4601               	rlncf	??_ADC_StartConversion,f,c
  7497  003266  50C2               	movf	4034,w,c	;volatile
  7498  003268  1801               	xorwf	??_ADC_StartConversion,w,c
  7499  00326A  0BC3               	andlw	-61
  7500  00326C  1801               	xorwf	??_ADC_StartConversion,w,c
  7501  00326E  6EC2               	movwf	4034,c	;volatile
  7502                           
  7503                           ;adc.c: 85: ADCON0bits.ADON = 1;
  7504  003270  80C2               	bsf	4034,0,c	;volatile
  7505                           
  7506                           ;adc.c: 89: ADCON0bits.GO_nDONE = 1;
  7507  003272  82C2               	bsf	4034,1,c	;volatile
  7508  003274  0012               	return		;funcret
  7509  003276                     __end_of_ADC_StartConversion:
  7510                           	opt stack 0
  7511                           tblptru	equ	0xFF8
  7512                           tblptrh	equ	0xFF7
  7513                           tblptrl	equ	0xFF6
  7514                           tablat	equ	0xFF5
  7515                           prodh	equ	0xFF4
  7516                           prodl	equ	0xFF3
  7517                           intcon	equ	0xFF2
  7518                           intcon2	equ	0xFF1
  7519                           indf0	equ	0xFEF
  7520                           postinc0	equ	0xFEE
  7521                           fsr0h	equ	0xFEA
  7522                           fsr0l	equ	0xFE9
  7523                           wreg	equ	0xFE8
  7524                           indf2	equ	0xFDF
  7525                           postinc2	equ	0xFDE
  7526                           postdec2	equ	0xFDD
  7527                           fsr2h	equ	0xFDA
  7528                           fsr2l	equ	0xFD9
  7529                           status	equ	0xFD8
  7530                           
  7531 ;; *************** function _ADC_IsConversionDone *****************
  7532 ;; Defined at:
  7533 ;;		line 93 in file "mcc_generated_files/adc.c"
  7534 ;; Parameters:    Size  Location     Type
  7535 ;;		None
  7536 ;; Auto vars:     Size  Location     Type
  7537 ;;		None
  7538 ;; Return value:  Size  Location     Type
  7539 ;;                  1    wreg      unsigned char 
  7540 ;; Registers used:
  7541 ;;		wreg
  7542 ;; Tracked objects:
  7543 ;;		On entry : 0/0
  7544 ;;		On exit  : 0/0
  7545 ;;		Unchanged: 0/0
  7546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7551 ;;Total ram usage:        0 bytes
  7552 ;; Hardware stack levels used:    1
  7553 ;; This function calls:
  7554 ;;		Nothing
  7555 ;; This function is called by:
  7556 ;;		_main
  7557 ;; This function uses a non-reentrant model
  7558 ;;
  7559                           
  7560                           	psect	text37
  7561  0032EE                     __ptext37:
  7562                           	opt stack 0
  7563  0032EE                     _ADC_IsConversionDone:
  7564                           	opt stack 30
  7565                           
  7566                           ;adc.c: 96: return (!ADCON0bits.GO_nDONE);
  7567                           
  7568                           ;incstack = 0
  7569  0032EE  B2C2               	btfsc	4034,1,c	;volatile
  7570  0032F0  D002               	goto	u2670
  7571  0032F2  0E01               	movlw	1
  7572  0032F4  0012               	return	
  7573  0032F6                     u2670:
  7574  0032F6  0E00               	movlw	0
  7575  0032F8  0012               	return	
  7576  0032FA                     __end_of_ADC_IsConversionDone:
  7577                           	opt stack 0
  7578                           tblptru	equ	0xFF8
  7579                           tblptrh	equ	0xFF7
  7580                           tblptrl	equ	0xFF6
  7581                           tablat	equ	0xFF5
  7582                           prodh	equ	0xFF4
  7583                           prodl	equ	0xFF3
  7584                           intcon	equ	0xFF2
  7585                           intcon2	equ	0xFF1
  7586                           indf0	equ	0xFEF
  7587                           postinc0	equ	0xFEE
  7588                           fsr0h	equ	0xFEA
  7589                           fsr0l	equ	0xFE9
  7590                           wreg	equ	0xFE8
  7591                           indf2	equ	0xFDF
  7592                           postinc2	equ	0xFDE
  7593                           postdec2	equ	0xFDD
  7594                           fsr2h	equ	0xFDA
  7595                           fsr2l	equ	0xFD9
  7596                           status	equ	0xFD8
  7597                           
  7598 ;; *************** function _ADC_GetConversionResult *****************
  7599 ;; Defined at:
  7600 ;;		line 99 in file "mcc_generated_files/adc.c"
  7601 ;; Parameters:    Size  Location     Type
  7602 ;;		None
  7603 ;; Auto vars:     Size  Location     Type
  7604 ;;		None
  7605 ;; Return value:  Size  Location     Type
  7606 ;;                  2    0[COMRAM] unsigned int 
  7607 ;; Registers used:
  7608 ;;		wreg, status,2, status,0
  7609 ;; Tracked objects:
  7610 ;;		On entry : 0/0
  7611 ;;		On exit  : 0/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7614 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7617 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;Total ram usage:        4 bytes
  7619 ;; Hardware stack levels used:    1
  7620 ;; This function calls:
  7621 ;;		Nothing
  7622 ;; This function is called by:
  7623 ;;		_main
  7624 ;; This function uses a non-reentrant model
  7625 ;;
  7626                           
  7627                           	psect	text38
  7628  0032CC                     __ptext38:
  7629                           	opt stack 0
  7630  0032CC                     _ADC_GetConversionResult:
  7631                           	opt stack 30
  7632                           
  7633                           ;adc.c: 102: return ((ADRESH << 8) + ADRESL);
  7634                           
  7635                           ;incstack = 0
  7636  0032CC  50C4               	movf	4036,w,c	;volatile
  7637  0032CE  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  7638  0032D0  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
  7639  0032D2  50C3               	movf	4035,w,c	;volatile
  7640  0032D4  2403               	addwf	??_ADC_GetConversionResult,w,c
  7641  0032D6  6E01               	movwf	?_ADC_GetConversionResult,c
  7642  0032D8  0E00               	movlw	0
  7643  0032DA  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
  7644  0032DC  6E02               	movwf	?_ADC_GetConversionResult+1,c
  7645  0032DE  0012               	return	
  7646  0032E0                     __end_of_ADC_GetConversionResult:
  7647                           	opt stack 0
  7648                           tblptru	equ	0xFF8
  7649                           tblptrh	equ	0xFF7
  7650                           tblptrl	equ	0xFF6
  7651                           tablat	equ	0xFF5
  7652                           prodh	equ	0xFF4
  7653                           prodl	equ	0xFF3
  7654                           intcon	equ	0xFF2
  7655                           intcon2	equ	0xFF1
  7656                           indf0	equ	0xFEF
  7657                           postinc0	equ	0xFEE
  7658                           fsr0h	equ	0xFEA
  7659                           fsr0l	equ	0xFE9
  7660                           wreg	equ	0xFE8
  7661                           indf2	equ	0xFDF
  7662                           postinc2	equ	0xFDE
  7663                           postdec2	equ	0xFDD
  7664                           fsr2h	equ	0xFDA
  7665                           fsr2l	equ	0xFD9
  7666                           status	equ	0xFD8
  7667                           tblptru	equ	0xFF8
  7668                           tblptrh	equ	0xFF7
  7669                           tblptrl	equ	0xFF6
  7670                           tablat	equ	0xFF5
  7671                           prodh	equ	0xFF4
  7672                           prodl	equ	0xFF3
  7673                           intcon	equ	0xFF2
  7674                           intcon2	equ	0xFF1
  7675                           indf0	equ	0xFEF
  7676                           postinc0	equ	0xFEE
  7677                           fsr0h	equ	0xFEA
  7678                           fsr0l	equ	0xFE9
  7679                           wreg	equ	0xFE8
  7680                           indf2	equ	0xFDF
  7681                           postinc2	equ	0xFDE
  7682                           postdec2	equ	0xFDD
  7683                           fsr2h	equ	0xFDA
  7684                           fsr2l	equ	0xFD9
  7685                           status	equ	0xFD8
  7686                           
  7687                           	psect	rparam
  7688  0000                     tblptru	equ	0xFF8
  7689                           tblptrh	equ	0xFF7
  7690                           tblptrl	equ	0xFF6
  7691                           tablat	equ	0xFF5
  7692                           prodh	equ	0xFF4
  7693                           prodl	equ	0xFF3
  7694                           intcon	equ	0xFF2
  7695                           intcon2	equ	0xFF1
  7696                           indf0	equ	0xFEF
  7697                           postinc0	equ	0xFEE
  7698                           fsr0h	equ	0xFEA
  7699                           fsr0l	equ	0xFE9
  7700                           wreg	equ	0xFE8
  7701                           indf2	equ	0xFDF
  7702                           postinc2	equ	0xFDE
  7703                           postdec2	equ	0xFDD
  7704                           fsr2h	equ	0xFDA
  7705                           fsr2l	equ	0xFD9
  7706                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    118
    Data        0
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     93      93
    BANK0           160     39      64
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> VOLTAGE(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCDPutStr@str	PTR const unsigned char  size(2) Largest target is 20
		 -> VOLTAGE(BANK0[20]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _sprintf->___ftge
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftneg
    ___awdiv->___awmod
    ___lltoft->___fttol
    ___fttol->___wmul
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftneg->___lltoft
    ___ftge->___ftadd
    ___ftdiv->_scale
    ___lwtoft->___ftpack
    _LCD_Initialize->_LCDPutCmd
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_LCDWriteNibble
    _LCDGoto->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   75191
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                _ADC_StartConversion
                            _LCDGoto
                          _LCDPutCmd
                          _LCDPutStr
                     _LCD_Initialize
                 _PWM2_LoadDutyValue
                  _SYSTEM_Initialize
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             47    40      7   61242
                                              0 BANK0     39    32      7
                            ___awdiv
                            ___awmod
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12667
                                             62 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   12469
                                             62 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5693
                                             47 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1816
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1972
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2802
                                             35 COMRAM     9     5      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8    1071
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     922
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     936
                                             20 COMRAM    15    11      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4728
                                             84 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4383
                                             72 COMRAM    12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                           ___lltoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     273
                                             44 COMRAM     3     0      3
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     744
                                             84 COMRAM     9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3215
                                             69 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2603
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM2_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2_LoadDutyValue                                   4     2      2     120
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       1     1      0     461
                                              4 COMRAM     1     1      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (1) _LCDPutStr                                            5     3      2     703
                                              4 COMRAM     5     3      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           2     2      0     461
                                              2 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDGoto                                              6     5      1     671
                                              4 COMRAM     6     5      1
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _LCDPutCmd                                            2     2      0     461
                                              2 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       2     1      1     394
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversionResult
   _ADC_IsConversionDone
   _ADC_StartConversion
   _LCDGoto
     _LCDPutCmd
       _LCDWriteNibble
   _LCDPutCmd
     _LCDWriteNibble
   _LCDPutStr
     _LCDPutChar
       _LCDWriteNibble
   _LCD_Initialize
     _LCDPutCmd
       _LCDWriteNibble
   _PWM2_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM2_Initialize
     _TMR2_Initialize
       _TMR2_StartTimer
   ___ftdiv
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftneg (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___fttol (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lltoft (ARG)
       ___ftpack
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___awmod
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___fttol
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     27      40       5       40.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5D      5D       1       97.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9D      32        0.0%
DATA                 0      0      9D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jul 08 19:27:59 2019

                  _LCD_Initialize 30DE                       ?_LCDPutChar 0001  
                    ___awdiv@sign 000C               ___wmul@multiplicand 0011  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                    ___ftadd@exp1 0054                      ___ftadd@exp2 0053  
                    ___ftadd@sign 0052                               l111 2B6E  
                             l140 2EAC                               l141 2E70  
                             l221 243C                               l109 2B5E  
                             l310 1BDA                               l302 1ACA  
                             l151 3036                               l231 2206  
                             l311 1BC4                               l224 202A  
                             l320 1D62                               l225 1F56  
                             l313 1BFE                               l146 302C  
                             l218 2370                               l322 1D9A  
                             l314 1C02                               l250 11BA  
                             l242 113A                               l323 1DB6  
                             l315 1C24                               l307 1BBA  
                             l235 1098                               l500 2D9E  
                             l228 2006                               l316 1D56  
                             l308 1B26                               l252 124C  
                             l236 10B0                               l229 2156  
                             l325 1DD6                               l317 1C74  
                             l261 132A                               l253 12B2  
                             l245 1136                               l237 1128  
                             l510 2F0A                               l326 1DFA  
                             l262 133C                               l246 1162  
                             l238 1112                               l503 2DC6  
                             l319 1D78                               l271 16D2  
                             l263 1340                               l255 12D8  
                             l239 10DA                               l600 255E  
                             l504 2DD0                               l512 2F20  
                             l248 1D82                               l280 195C  
                             l272 1616                               l256 12EE  
                             l505 2DDE                               l513 2F18  
                             l281 179E                               l273 1636  
                             l265 1414                               l257 12F2  
                             l249 1178                               l530 2796  
                             l266 149C                               l258 1782  
                             l531 27D8                               l275 16F4  
                             l540 286A                               l532 2808  
                             l516 2F38                               l292 199C  
                             l276 16DE                               l268 150A  
                             l605 2554                               l541 285E  
                             l517 2F42                               l509 2EFE  
                             l293 1A64                               l285 1846  
                             l269 1530                               l614 2592  
                             l606 254A                               l534 2846  
                             l518 2F50                               l286 1920  
                             l278 1724                               l615 2588  
                             l535 2836                               l287 18E4  
                             l560 2C4E                               l624 2A92  
                             l528 2778                               l632 2654  
                             l296 1A0C                               l561 2C44  
                             l617 25B6                               l626 2ABA  
                             l650 2D34                               l618 25D2  
                             l722 2E4A                               l634 2680  
                             l563 2C82                               l627 2AF8  
                             l619 2602                               l723 2E58  
                             l635 26BA                               l564 2C6C  
                             l628 2B1E                               l732 2FA0  
                             l740 2FC6                               l644 2742  
                             l636 26E2                               l660 2914  
                             l733 2FAE                               l645 2736  
                             l566 2CAA                               l718 2E16  
                             l638 271E                               l662 292C  
                             l567 2CA0                               l591 24CE  
                             l719 2E0A                               l639 270E  
                             l663 293C                               l680 2A08  
                             l728 2F78                               l496 2D78  
                             l656 28AA                               l649 2D04  
                             l673 3076                               l729 2F6C  
                             l497 2D88                               l658 28D2  
                             l667 320C                               l595 24F8  
                             l739 2FD2                               l499 2DA6  
                             l659 2904                               l692 3254  
                             l685 2A3C                               l677 29A2  
                             l686 2A30                               l679 2A18  
                             l688 2A58                      __CFG_CPB$OFF 000000  
                             _PR2 000FCB                      __CFG_CPD$OFF 000000  
                    __CFG_BORV$18 000000                      ___awmod@sign 0006  
                 _TMR2_Initialize 32B8                               wreg 000FE8  
                    __CFG_IESO$ON 000000                      __CFG_LVP$OFF 000000  
                 __end_of_LCDGoto 3060                      ___ftdiv@cntr 004F  
                    ___ftdiv@sign 0054                              l2109 2D60  
                            l3031 19E6                              l3023 199C  
                            l3051 1ACE                              l3141 1DF6  
                            l3079 1BC4                              l2991 17C4  
                            STR_1 1077                              STR_2 1082  
                            u2011 28BA                              u2140 2F24  
                            u3100 19AE                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            u2080 2DAA                              u3200 1BE8  
                            u2410 2870                              u3210 1BF8  
                            u3130 19E6                              u3050 17FC  
                            u1700 2C36                              u2340 2748  
                            u3300 1E14                              u3060 1818  
                            u2421 2A7A                              u2261 2638  
                            u2441 2AA2                              u2521 2986  
                            u2281 2664                              u2610 2E1A  
                            u3170 1B06                              u3090 196E  
                            u2700 2EE2                              u1740 2CB4  
                            u1820 24C0                              u2540 29C0  
                            u1920 2566                              u2640 2F7C  
                            u2545 29B8                              u1850 24EA  
                            u2707 2ED8                              u2580 2A42  
                            u3357 30EE                              u1781 248C  
                            u2670 32F6                              u1950 259A  
                            u2830 12E8                              u1775 319C  
                            u3367 3152                              u1791 24A0  
                            u1776 319E                              u1880 2528  
                            u3377 3052                              u2690 2EA6  
                            u2850 1306                              u3387 30A8  
                            u2860 131A                              u3397 30CA  
                            u2790 11F2                              u1991 2892  
                            u2697 2E9C                              u2890 1336  
                            u2795 11E8                              u2990 16FC  
                            _TMR2 000FCC                              _WPUB 000F7C  
                   __CFG_FCMEN$ON 000000                              _main 2B50  
                    ___ftpack@arg 0001                      ___ftpack@exp 0004  
                            fsr0h 000FEA                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf2 000FDF                              fsr2l 000FD9  
                            _volt 0087                __size_of_LCDPutCmd 003E  
                            prodh 000FF4                              prodl 000FF3  
                            start 0000                __size_of_LCDPutStr 0080  
                    _sprintf$1163 006D            __end_of_LCD_Initialize 311A  
                    ___ftmul@cntr 003D                      ___param_bank 000000  
                    ___ftmul@sign 003E                      ___fttol@exp1 0023  
                    ___fttol@lval 001F           __end_of_PWM2_Initialize 32EE  
                     LCDPutCmd@ch 0004    __size_of_OSCILLATOR_Initialize 000A  
   __end_of_OSCILLATOR_Initialize 3304                             ?_main 0001  
                 __end_of___awdiv 2DE8                   __end_of___ftadd 2628  
                 __end_of___awmod 2F5A                   __end_of___ftdiv 2B50  
                 __end_of___ftneg 321A                             _ANSEL 000F7E  
                 __end_of___lldiv 2E6A                   __end_of___ftmul 2976  
                 ___awdiv@divisor 0009                   __end_of___llmod 2FC0  
                 __end_of___ftsub 30A0                   __end_of___fttol 2A6A  
                           _T2CON 000FCA                    __CFG_DEBUG$OFF 000000  
                 ___awdiv@counter 000B                             _PORTB 000F81  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94  __size_of_ADC_GetConversionResult 0014  
                   __CFG_PWRT$OFF 000000                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                      ___lltoft@exp 002C  
                  __CFG_EBTR0$OFF 000000                    __CFG_EBTR1$OFF 000000  
                  __CFG_EBTR2$OFF 000000                    __CFG_EBTR3$OFF 000000  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
                 __end_of_dpowers 1029                             _scale 1E22  
                 __end_of_isdigit 325C                     ___ftpack@sign 0005  
                  __CFG_BOREN$OFF 000000                             tablat 000FF5  
             __size_of_LCDPutChar 0030                             status 000FD8  
                 __end_of_sprintf 1E22                    __CFG_HFOFST$ON 000000  
                 _TMR2_StartTimer 3304                    __CFG_MCLRE$OFF 000000  
                 ?_LCD_Initialize 0001                   __initialization 3276  
                    __end_of_main 2C26           __end_of_TMR2_Initialize 32CC  
                          ??_main 005E                     ___fttol@sign1 001E  
                   __activetblptr 000002        ADC_StartConversion@channel 0002  
                       ??_LCDGoto 0006                 __end_of_LCDPutCmd 30DE  
            __size_of__tdiv_to_l_ 0132                      LCDPutChar@ch 0004  
               __end_of_LCDPutStr 2EEA                    _convertedValue 008A  
   __size_of_ADC_IsConversionDone 000C                            _ADCON0 000FC2  
                          _ADCON1 000FC1                            _ADCON2 000FC0  
                ___llmod@dividend 0001                            ?_scale 003F  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                          _CCPR2H 000FBC                            _CCPR2L 000FBB  
                ___awdiv@dividend 0007                  __end_of___ftpack 2CD4  
                          _ANSELH 000F7F                  __end_of___lltoft 301C  
                  __CFG_WDTEN$OFF 000000                  __end_of___lwtoft 323E  
                          _OSCCON 000FD3                      LCDPutStr@str 0005  
                  _LCDWriteNibble 317A                    __CFG_XINST$OFF 000000  
                __end_of__powers_ 1050                            ___ftge 2CD4  
                          ___wmul 31D0                         ??___awdiv 000B  
                       ??___ftadd 004F                    __CFG_STVREN$ON 000000  
                       ??___awmod 0005                         ??___ftdiv 004C  
                       ??___ftneg 0030                         ??___lldiv 0009  
                       ??___ftmul 0036                         ??___llmod 0009  
                       ??___ftsub 005B                         ??___fttol 0019  
                ?_PWM2_Initialize 0001                            _fround 222A  
                          clear_0 327C                  ___awdiv@quotient 000D  
                 ___awmod@divisor 0003                   ___awmod@counter 0005  
           ___ftmul@f3_as_product 003A                         ??_isdigit 0001  
                    __mediumconst 0000                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
         __end_of_TMR2_StartTimer 3308                         ??_sprintf 0067  
               _SYSTEM_Initialize 328C            __end_of_LCDWriteNibble 31A6  
                      __accesstop 0060           __end_of__initialization 3282  
                 __CFG_PBADEN$OFF 000000                        ___ftadd@f1 0049  
                      ___ftadd@f2 004C                        ___ftge@ff1 0055  
                      ___ftge@ff2 0058                ?_SYSTEM_Initialize 0001  
      __end_of_PWM2_LoadDutyValue 314A                     ___rparam_used 000001  
                      ___ftdiv@f1 0046                        ___ftdiv@f2 0049  
                      ___ftdiv@f3 0050                         LCDGoto@ln 0005  
                      ___ftneg@f1 002D                        ___ftmul@f1 0030  
                      ___ftmul@f2 0033                        ___ftsub@f1 0055  
                      ___ftsub@f2 0058                        ___fttol@f1 0015  
    __size_of_ADC_StartConversion 001A                    __pcstackCOMRAM 0001  
             ??_SYSTEM_Initialize 0001                        ___lltoft@c 0024  
                   __end_of_scale 222A                      ??_LCDPutChar 0003  
                ?_TMR2_Initialize 0001                        ___lwtoft@c 0009  
         _ADC_GetConversionResult 32CC                        __div_to_l_ 275A  
                 __div_to_l_@exp1 000C                   __div_to_l_@cntr 000B  
                 __CFG_LPT1OSC$ON 000000                           ??_scale 0042  
       __end_of_SYSTEM_Initialize 32A2                   __div_to_l_@quot 0007  
                      __pbssBANK0 0087                   ?_LCDWriteNibble 0001  
              __end_of_LCDPutChar 317A                     __div_to_l_@f1 0001  
                   __div_to_l_@f2 0004                           ?___ftge 0055  
                         ?___wmul 000F                           _CCP2CON 000FBA  
                         ?_fround 003F                         ?___ftpack 0001  
                       ?___lltoft 0024           __size_of_ADC_Initialize 0016  
                       ?___lwtoft 0009                           _LCDGoto 301C  
                         _OSCTUNE 000F9B                  ?_TMR2_StartTimer 0001  
                         _VOLTAGE 008C                  ??_LCD_Initialize 0005  
               __end_of__npowers_ 1077                           __Hparam 0000  
                      _scale$1162 0042                           __Lparam 0000  
                 __size_of___ftge 0090                           ___awdiv 2D64  
                         ___ftadd 247C                           ___awmod 2EEA  
                         ___ftdiv 2A6A                           ___ftneg 31F6  
                         ___lldiv 2DE8                   __size_of___wmul 0026  
                         ___ftmul 2882                           ___llmod 2F5A  
                         ___ftsub 3060                           ___fttol 2976  
                    __psmallconst 1000         ??_ADC_GetConversionResult 0003  
                         __pcinit 3276                        ??___ftpack 0006  
                 __size_of_fround 0252                           __ramtop 1000  
                      ??___lltoft 0028                           __ptext0 2B50  
                         __ptext1 108A                           __ptext2 1E22  
                         __ptext3 323E                           __ptext4 222A  
                         __ptext5 31D0                           __ptext6 2882  
                         __ptext7 2EEA                           __ptext8 2D64  
                         __ptext9 2628                        ??___lwtoft 000C  
                     ?__div_to_l_ 0001                           _dpowers 1001  
           _OSCILLATOR_Initialize 32FA                         _T2CONbits 000FCA  
                         _isdigit 323E                  ___awmod@dividend 0001  
        ??_PIN_MANAGER_Initialize 0001                         _LCDPutCmd 30A0  
      __size_of_SYSTEM_Initialize 0016                           _sprintf 108A  
                       _LCDPutStr 2E6A              end_of_initialization 3282  
                   __Lmediumconst 0000                   ___lldiv@divisor 0005  
    __end_of_ADC_IsConversionDone 32FA                   ___lldiv@counter 000D  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE                    __tdiv_to_l_@f1 0001  
                  __tdiv_to_l_@f2 0004                     ??__tdiv_to_l_ 0007  
                       _PORTBbits 000F81               _ADC_StartConversion 325C  
                      ?_LCDPutCmd 0001                        ?_LCDPutStr 0005  
                     ___ftdiv@exp 0053                        LCDGoto@pos 000A  
             __size_of__div_to_l_ 0128                       ___ftmul@exp 0039  
            ?_ADC_StartConversion 0001                    __end_of___ftge 2D64  
                      LCDPutStr@i 0009                    __end_of___wmul 31F6  
              _PWM2_LoadDutyValue 311A                    _ADC_Initialize 32A2  
          ?_OSCILLATOR_Initialize 0001                    __end_of_fround 247C  
             start_initialization 3276          __size_of_PWM2_Initialize 000E  
             ?_PWM2_LoadDutyValue 0001   __size_of_PIN_MANAGER_Initialize 002A  
             __end_of__tdiv_to_l_ 275A                  ??_LCDWriteNibble 0002  
                 ___llmod@divisor 0005                   ___llmod@counter 0009  
           ??_ADC_StartConversion 0001              ??_PWM2_LoadDutyValue 0003  
     PWM2_LoadDutyValue@dutyValue 0001                          ??___ftge 005B  
                        ??___wmul 0013            __end_of_ADC_Initialize 32B8  
                        ??_fround 0042                     sprintf@tmpval 0077  
                      fround@prec 0048                          ?_LCDGoto 0005  
               __size_of___ftpack 00AE                 __size_of___lltoft 005C  
               __size_of___lwtoft 0024                     __pcstackBANK0 0060  
            _ADC_IsConversionDone 32EE          __size_of_TMR2_Initialize 0014  
                     ??_LCDPutCmd 0003                       ??_LCDPutStr 0007  
                     sprintf@flag 0075                       sprintf@fval 0083  
                     sprintf@prec 0081                       sprintf@temp 0072  
          _PIN_MANAGER_Initialize 31A6                 __CFG_CCP2MX$PORTC 000000  
                        ?___awdiv 0007                          ?___ftadd 0049  
                        ?___awmod 0001                          ?___ftdiv 0046  
                        ?___ftneg 002D                          ?___lldiv 0001  
                        ?___ftmul 0030                          ?___llmod 0001  
                        ?___ftsub 0055                         __npowers_ 1050  
                        ?___fttol 0015                   ?_ADC_Initialize 0001  
                LCDWriteNibble@ch 0002                  LCDWriteNibble@rs 0001  
                     __tdiv_to_l_ 2628                      ??__div_to_l_ 0007  
                     __smallconst 1000                          ?_isdigit 0001  
           ?_ADC_IsConversionDone 0001                          ?_sprintf 0060  
                  __size_of_scale 0408                 ??_PWM2_Initialize 0001  
                  ___wmul@product 0013          __size_of_TMR2_StartTimer 0004  
                     _LCDGoto$428 0008                          _PIR1bits 000F9E  
              __end_of__div_to_l_ 2882                  __CFG_WDTPS$32768 000000  
                      _ADCON0bits 000FC2                 ___wmul@multiplier 000F  
                __size_of_LCDGoto 0044                       _INTCON2bits 000FF1  
               ??_TMR2_Initialize 0001                          __Hrparam 0000  
                        __Lrparam 0000          ?_ADC_GetConversionResult 0001  
         ??_OSCILLATOR_Initialize 0001           __size_of_LCD_Initialize 003C  
                __size_of___awdiv 0084                  __size_of___ftadd 01AC  
                __size_of___awmod 0070                  __size_of___ftdiv 00E6  
                __size_of___ftneg 0024                  __size_of___lldiv 0082  
                __size_of___ftmul 00F4                  __size_of___llmod 0066  
                __size_of___ftsub 0040                  __size_of___fttol 00F4  
                        ___ftpack 2C26                       _fround$1160 0045  
                     _fround$1161 0042                          ___lltoft 2FC0  
                     _isdigit$800 0002                          ___lwtoft 321A  
          ??_ADC_IsConversionDone 0001                        sprintf@exp 007F  
                      sprintf@val 007B                  __size_of_isdigit 001E  
                        __ptext10 275A                          __ptext11 2FC0  
                        __ptext20 321A                          __ptext12 2F5A  
                        __ptext21 2C26                          __ptext13 2DE8  
                        __ptext30 30DE                          __ptext22 328C  
                        __ptext14 2976                          __ptext31 2E6A  
                        __ptext23 32B8                          __ptext15 3060  
                        __ptext32 314A                          __ptext24 3304  
                        __ptext16 247C                          __ptext33 301C  
                        __ptext25 32E0                          __ptext17 31F6  
                        __ptext34 30A0                          __ptext26 31A6  
                        __ptext18 2CD4                          __ptext35 317A  
                        __ptext27 32FA                          __ptext19 2A6A  
                        __ptext36 325C                          __ptext28 32A2  
                        __ptext37 32EE                          __ptext29 311A  
                        __ptext38 32CC                          __powers_ 1029  
                __size_of_sprintf 0D98                     __size_of_main 00D6  
               ??_TMR2_StartTimer 0001                        _LCDPutChar 314A  
                      _INTCONbits 000FF2                          isdigit@c 0003  
                        scale@scl 0045                         sprintf@ap 0070  
                __tdiv_to_l_@exp1 000F                  __tdiv_to_l_@cntr 000E  
                       sprintf@sp 0060                  __tdiv_to_l_@quot 000A  
     __end_of_ADC_StartConversion 3276                  ___lldiv@dividend 0001  
         ?_PIN_MANAGER_Initialize 0001   __end_of_ADC_GetConversionResult 32E0  
                ??_ADC_Initialize 0001       __size_of_PWM2_LoadDutyValue 0030  
                    ?__tdiv_to_l_ 0001                          sprintf@c 0086  
                        sprintf@f 0062                  ___lldiv@quotient 0009  
                 _PWM2_Initialize 32E0    __end_of_PIN_MANAGER_Initialize 31D0  
               __CFG_FOSC$INTIO67 000000           __size_of_LCDWriteNibble 002C  
